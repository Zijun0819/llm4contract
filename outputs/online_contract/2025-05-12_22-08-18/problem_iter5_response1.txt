```python
import numpy as np
from sklearn.cluster import AgglomerativeClustering

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Infer a valid agent setting (actions = outcome distributions + cost)
    consistent with historical contract logs, with adaptive clustering,
    robust IR/IC/rejection constraints, and iterative refinement.

    Params:
        v (np.ndarray): Principal's value vector (length 5)
        content (list[dict]): each dict has keys: 'Contract' (list of 5),
                              'Principal Utility' (float),
                              'Agent Action' (1 or -1)
    Returns:
        np.ndarray: n_actions x 6 (5 probabilities + 1 cost)
    """
    m = v.size
    L = len(content)

    # Extract contract data arrays
    contracts = np.array([log['Contract'] for log in content])  # (L,5)
    ag_actions = np.array([log['Agent Action'] for log in content])  # (L,)
    p_util = np.array([log['Principal Utility'] for log in content])  # (L,)

    accepted_ix = np.where(ag_actions == 1)[0]
    rejected_ix = np.where(ag_actions == -1)[0]

    # If no accepted contracts, return trivial uniform action with zero cost
    if accepted_ix.size == 0:
        return np.hstack([np.ones((1, m)) / m, np.array([[0.]])])

    accepted_w = contracts[accepted_ix]

    # Normalize contracts to sum 1 for clustering (avoid zero-sum issues)
    norm_w = accepted_w / (accepted_w.sum(axis=1, keepdims=True) + 1e-12)

    # Adaptive number of clusters: min(10, #accepted, int(sqrt(#accepted)*1.5)) to allow some flexibility
    n_max_actions = max(1, min(10, len(accepted_ix), int(np.sqrt(len(accepted_ix)) * 1.5)))

    # Use agglomerative clustering with average linkage on normalized weights
    clustering = AgglomerativeClustering(n_clusters=n_max_actions, linkage='average')
    labels = clustering.fit_predict(norm_w)

    # Initialize candidate probs and cost bounds lists
    p_candidates = []
    costs_lower_bound = []

    # For each cluster, compute robust p and cost lower bound
    for c in range(n_max_actions):
        cluster_idx = accepted_ix[labels == c]
        if cluster_idx.size == 0:
            continue
        cluster_w = contracts[cluster_idx]

        # Weight contracts by (principal utility - min) + 1, enhancing better contracts importance
        weights = p_util[cluster_idx] - p_util[cluster_idx].min() + 1
        avg_w = np.average(cluster_w, axis=0, weights=weights)

        # Project avg_w to probability simplex (nonnegative + sums to 1)
        p = np.clip(avg_w, 0, None)
        if p.sum() < 1e-12:
            p = np.ones(m) / m
        else:
            p = p / p.sum()
        p_candidates.append(p)

        # Cost lower bound: agent cost ≤ p @ w_i for accepted contracts in cluster (agent utility ≥0)
        pws = np.array([p @ contracts[i] for i in cluster_idx])
        min_cost = pws.min()
        costs_lower_bound.append(min_cost)

    p_candidates = np.array(p_candidates)
    costs_lower_bound = np.array(costs_lower_bound)

    # Handle rejected contracts: agent utility < 0 for all inferred actions
    if rejected_ix.size > 0:
        reject_contracts = contracts[rejected_ix]  # (#rej,5)
        # Shape (n_actions, #rej)
        p_w_rej = p_candidates @ reject_contracts.T
        # For each action a, cost_a must be strictly > max_r p_a @ w_r to reject all
        c_rej_min = p_w_rej.max(axis=1) + 1e-6
    else:
        c_rej_min = np.zeros(len(p_candidates))

    # Final costs: ensure cost >= max(accepted lower bound, rejection lower bound), nonnegative
    costs = np.maximum(costs_lower_bound, c_rej_min)
    costs = np.maximum(costs, 0)

    # Validate accepted contracts: each must be rationalized by some action
    def valid_action_for_contract(w_i):
        for a, (p, c) in enumerate(zip(p_candidates, costs)):
            util = p @ w_i - c
            if util >= -1e-10:
                return a
        return None

    # For any accepted contract not explained, add a new action matching it (with normalization and cost)
    for i in accepted_ix:
        w_i = contracts[i]
        if valid_action_for_contract(w_i) is None:
            p_new = w_i.copy()
            if p_new.sum() < 1e-12:
                p_new = np.ones(m) / m
            else:
                p_new = p_new / p_new.sum()
            c_new = p_new @ w_i
            p_candidates = np.vstack([p_candidates, p_new])
            costs = np.append(costs, c_new)

    # Iterative refinement to adjust costs to satisfy rejection constraints
    if rejected_ix.size > 0:
        reject_contracts = contracts[rejected_ix]
        p_w_rej = p_candidates @ reject_contracts.T
        for a in range(len(p_candidates)):
            max_rej_util = p_w_rej[a].max()
            if costs[a] < max_rej_util + 1e-8:
                costs[a] = max_rej_util + 1e-4  # small margin

    # Iterative refinement to also ensure all accepted contracts have utility ≥ 0 for at least one action
    # If some accepted contract is close but negative utility, try to adjust costs downward cautiously
    for _ in range(3):
        improved = False
        for i in accepted_ix:
            w_i = contracts[i]
            utils = p_candidates @ w_i - costs
            max_util = utils.max()
            if max_util < -1e-8:  # no action explains acceptance
                # Find closest action and try to decrease cost to make utility ≥ 0
                a = np.argmax(utils)
                required_cost = p_candidates[a] @ w_i
                if costs[a] > required_cost:
                    costs[a] = required_cost
                    improved = True
        # After lowering costs, ensure rejection constraints still hold
        if rejected_ix.size > 0:
            p_w_rej = p_candidates @ reject_contracts.T
            for a in range(len(p_candidates)):
                max_rej_util = p_w_rej[a].max()
                if costs[a] < max_rej_util + 1e-8:
                    costs[a] = max_rej_util + 1e-4
                    improved = True
        if not improved:
            break

    # Final normalization to ensure valid probability distributions
    p_candidates = np.clip(p_candidates, 0, None)
    p_sums = p_candidates.sum(axis=1, keepdims=True)
    p_sums[p_sums < 1e-12] = 1.0
    p_candidates /= p_sums

    # Assemble final agent setting matrix (n_actions x 6)
    agent_setting = np.hstack([p_candidates, costs[:, None]])

    return agent_setting
```
