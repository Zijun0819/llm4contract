```python
import numpy as np
from sklearn.cluster import AgglomerativeClustering
from scipy.optimize import linprog

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Enhanced agent setting inference consistent with historical logs,
    enforcing global IR/IC constraints via LP, adaptive weighted average linkage clustering,
    minimal dummy actions for unexplained accepted contracts,
    iterative cost refinement, and strict probability normalization.

    Params:
        v (np.ndarray): Principal's value vector (length 5)
        content (list[dict]): each dict has keys: 'Contract' (list of 5),
                              'Principal Utility' (float),
                              'Agent Action' (1 or -1)

    Returns:
        np.ndarray: n_actions x 6 (5 probabilities + 1 cost)
    """
    m_outcomes = v.size
    L = len(content)

    # Extract arrays from logs
    contracts = np.array([log['Contract'] for log in content])  # shape (L,5)
    ag_actions = np.array([log['Agent Action'] for log in content])  # shape (L,)
    p_util = np.array([log['Principal Utility'] for log in content])  # shape (L,)

    accepted_ix = np.where(ag_actions == 1)[0]
    rejected_ix = np.where(ag_actions == -1)[0]

    # If no accepted contracts: trivial uniform action with zero cost
    if accepted_ix.size == 0:
        uniform_p = np.ones(m_outcomes) / m_outcomes
        zero_cost = 0.0
        return np.hstack([uniform_p.reshape(1, -1), np.array([[zero_cost]])])

    accepted_w = contracts[accepted_ix]

    # Normalize accepted contracts to probability simplex for clustering (avoid zero-sum)
    norm_w = accepted_w / (accepted_w.sum(axis=1, keepdims=True) + 1e-12)

    # Adaptive number of clusters: min(10, #accepted contracts, max(1, sqrt(#accepted)))
    n_max_actions = max(1, min(10, len(accepted_ix), int(np.sqrt(len(accepted_ix)))))

    clustering = AgglomerativeClustering(n_clusters=n_max_actions, linkage='average')
    labels = clustering.fit_predict(norm_w)

    p_candidates = []
    costs_lb = []

    # Compute cluster centroids as weighted averages by shifted principal utilities
    for c in range(n_max_actions):
        cluster_idx = accepted_ix[labels == c]
        if cluster_idx.size == 0:
            continue
        cluster_w = contracts[cluster_idx]

        # Shift weights to be positive and reflect principal utilities
        weights = p_util[cluster_idx] - p_util[cluster_idx].min() + 1.0
        avg_w = np.average(cluster_w, axis=0, weights=weights)

        # Project average to simplex (clip negatives and renormalize)
        p = np.clip(avg_w, 0, None)
        s = p.sum()
        if s < 1e-12:
            p = np.ones(m_outcomes) / m_outcomes
        else:
            p /= s

        p_candidates.append(p)

        # Lower bound on cost from accepted contracts utility≥0: cost ≤ p @ w_i for some i
        costs_cluster = np.array([p @ contracts[i] for i in cluster_idx])
        min_cost = costs_cluster.min()
        costs_lb.append(min_cost)

    p_candidates = np.array(p_candidates)
    costs_lb = np.array(costs_lb)

    # Handle rejected contracts constraints: cost > max_r p@w_r for each action
    if rejected_ix.size > 0:
        reject_contracts = contracts[rejected_ix]
        p_w_rej = p_candidates @ reject_contracts.T  # shape (n_actions, n_rejected)
        c_rej_min = p_w_rej.max(axis=1) + 1e-6  # margin to strictly separate rejections
    else:
        c_rej_min = np.zeros(len(p_candidates))

    # Initial costs satisfying both accepted and rejected constraints
    costs = np.maximum(costs_lb, c_rej_min)
    costs = np.maximum(costs, 0)

    # Helper: Check if any action rationalizes accepted contract w_i (utility≥0)
    def valid_action_for_contract(w_i):
        for a, (p, c) in enumerate(zip(p_candidates, costs)):
            util = p @ w_i - c
            if util >= -1e-10:
                return a
        return None

    # Add minimal dummy actions for unexplained accepted contracts
    for i in accepted_ix:
        w_i = contracts[i]
        if valid_action_for_contract(w_i) is None:
            p_new = np.clip(w_i, 0, None)
            s = p_new.sum()
            if s < 1e-12:
                p_new = np.ones(m_outcomes) / m_outcomes
            else:
                p_new /= s
            c_new = p_new @ w_i  # cost = expected payment to ensure utility=0
            p_candidates = np.vstack([p_candidates, p_new])
            costs = np.append(costs, c_new)

    n_actions = len(p_candidates)

    # Enforce rejection constraints again, tighten costs if necessary
    if rejected_ix.size > 0:
        reject_contracts = contracts[rejected_ix]
        p_w_rej = p_candidates @ reject_contracts.T  # shape (n_actions, n_rejected)
        for a in range(n_actions):
            max_rej_util = p_w_rej[a].max()
            if costs[a] < max_rej_util + 1e-8:
                costs[a] = max_rej_util + 1e-4

    # Formulate LP to refine costs under rejection constraints
    # Minimize sum of costs (or zero objective) subject to:
    # For each rejected contract r and action a: c_a ≥ p_a @ w_r + ε
    # Costs ≥ 0

    c_obj = np.zeros(n_actions)  # zero objective to just satisfy constraints
    epsilon = 1e-5
    A_ub = []
    b_ub = []
    for a in range(n_actions):
        for r in rejected_ix:
            val = p_candidates[a] @ contracts[r] + epsilon
            row = np.zeros(n_actions)
            row[a] = -1  # -c_a ≤ -val  => c_a ≥ val
            A_ub.append(row)
            b_ub.append(-val)
    if A_ub:
        A_ub = np.array(A_ub)
        b_ub = np.array(b_ub)
    else:
        A_ub = None
        b_ub = None

    bounds = [(0, None)] * n_actions  # costs ≥ 0

    # Solve LP
    res = linprog(c_obj, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')
    if res.success:
        costs = res.x
    # else fallback to previous costs (already feasible w.r.t rejections)

    # Final normalization of probability vectors to simplex
    p_candidates = np.clip(p_candidates, 0, None)
    p_sums = p_candidates.sum(axis=1, keepdims=True)
    p_sums[p_sums < 1e-12] = 1.0
    p_candidates /= p_sums

    # Final agent setting matrix: n_actions x (5 probs + 1 cost)
    agent_setting = np.hstack([p_candidates, costs[:, None]])

    return agent_setting
```
