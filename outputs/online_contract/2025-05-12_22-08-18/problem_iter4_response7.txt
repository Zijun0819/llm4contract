```python
import numpy as np
from sklearn.cluster import AgglomerativeClustering

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Infer a valid agent setting matrix given principal reward vector v and historical interaction logs content.
    This improved version:
    - Uses adaptive agglomerative clustering with utility-weighted averages
    - Enforces strict rejection margins
    - Adds missing accepted contracts as distinct actions if needed
    - Robustly normalizes probability distributions

    Parameters:
    - v: np.ndarray, shape (5,), principal reward vector per outcome.
    - content: list of dicts with keys 'Contract', 'Principal Utility', 'Agent Action'.

    Returns:
    - agent_setting: np.ndarray, shape (n_actions, 6), each row [p1, p2, p3, p4, p5, cost].
    """
    m_outcomes = v.size
    L = len(content)

    # Extract arrays from logs
    contracts = np.array([log['Contract'] for log in content])  # (L,5)
    ag_actions = np.array([log['Agent Action'] for log in content])  # (L,)
    p_util = np.array([log['Principal Utility'] for log in content])  # (L,)

    accepted_ix = np.where(ag_actions == 1)[0]
    rejected_ix = np.where(ag_actions == -1)[0]

    # If no accepted contracts, return trivial uniform action with zero cost
    if accepted_ix.size == 0:
        uniform_p = np.ones(m_outcomes) / m_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])

    accepted_w = contracts[accepted_ix]

    # Normalize contracts for clustering (sum to 1) with numerical safety
    norm_w = accepted_w / (accepted_w.sum(axis=1, keepdims=True) + 1e-12)

    # Adaptive number of clusters: min(10, #accepted, ceil(sqrt(#accepted)))
    n_max_actions = max(1, min(10, int(np.ceil(np.sqrt(len(accepted_ix)))), len(accepted_ix)))

    clustering = AgglomerativeClustering(n_clusters=n_max_actions, linkage='average')
    labels = clustering.fit_predict(norm_w)

    p_candidates = []
    costs_lower_bound = []

    # For each cluster, compute utility-weighted average and cost lower bound
    for c in range(n_max_actions):
        cluster_idx = accepted_ix[labels == c]
        if cluster_idx.size == 0:
            continue
        cluster_w = contracts[cluster_idx]

        # Weights to favor better principal utilities, shifted to be â‰¥1
        cluster_p_util = p_util[cluster_idx]
        weights = cluster_p_util - cluster_p_util.min() + 1.0

        avg_w = np.average(cluster_w, axis=0, weights=weights)

        # Project avg_w to simplex (nonnegative + sum=1)
        p = np.clip(avg_w, 0, None)
        sum_p = p.sum()
        if sum_p < 1e-12:
            p = np.ones(m_outcomes) / m_outcomes
        else:
            p = p / sum_p

        p_candidates.append(p)

        # Lower bound on cost: minimal agent utility over cluster accepted contracts
        # Agent utility >= 0 => cost <= p @ w_i, so min p@w_i is upper bound on cost
        p_dot_ws = np.array([p @ contracts[i] for i in cluster_idx])
        min_cost = p_dot_ws.min()
        costs_lower_bound.append(min_cost)

    p_candidates = np.array(p_candidates)
    costs_lower_bound = np.array(costs_lower_bound)

    # Handle rejected contracts: cost must exceed max p@w for all rejected to ensure rejection
    if rejected_ix.size > 0:
        reject_contracts = contracts[rejected_ix]  # (#rej,5)
        p_w_rej = p_candidates @ reject_contracts.T  # shape (n_actions, #rej)
        c_rej_min = p_w_rej.max(axis=1) + 1e-6  # strict margin
    else:
        c_rej_min = np.zeros(len(p_candidates))

    # Final costs are max of accepted lower bound and rejection lower bound, clipped nonnegative
    costs = np.maximum(costs_lower_bound, c_rej_min)
    costs = np.maximum(costs, 0.0)

    # Check if every accepted contract is rationalized by some action (utility >= 0)
    def valid_action_for_contract(w_i):
        for a, (p, c) in enumerate(zip(p_candidates, costs)):
            util = p @ w_i - c
            if util >= -1e-8:
                return a
        return None

    # For any accepted contract not explained, add a new action exactly matching it
    for i in accepted_ix:
        w_i = contracts[i]
        if valid_action_for_contract(w_i) is None:
            p_new = w_i.copy()
            sum_p_new = p_new.sum()
            if sum_p_new < 1e-12:
                p_new = np.ones(m_outcomes) / m_outcomes
            else:
                p_new = p_new / sum_p_new
            c_new = p_new @ w_i
            p_candidates = np.vstack([p_candidates, p_new])
            costs = np.append(costs, c_new)

    # After adding new actions, re-check rejection constraints and raise costs if needed
    if rejected_ix.size > 0:
        reject_contracts = contracts[rejected_ix]
        p_w_rej = p_candidates @ reject_contracts.T
        for a in range(len(p_candidates)):
            max_rej_util = p_w_rej[a].max()
            if costs[a] < max_rej_util + 1e-8:
                costs[a] = max_rej_util + 1e-4  # safe margin

    # Final normalization: clip negatives, then normalize rows to sum 1 probability distributions
    p_candidates = np.clip(p_candidates, 0, None)
    sums = p_candidates.sum(axis=1, keepdims=True)
    sums[sums < 1e-12] = 1.0  # avoid division by zero
    p_candidates /= sums

    # Assemble final agent setting matrix (n_actions x 6)
    agent_setting = np.hstack([p_candidates, costs[:, None]])

    return agent_setting
```
