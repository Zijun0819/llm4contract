```python
import numpy as np
from sklearn.cluster import AgglomerativeClustering

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Agent setting inference with adaptive clustering, robust IR/IC/rejection constraints,
    iterative refinement, and dummy actions for outliers.

    Args:
        v (np.ndarray): Principal's value vector (length 5)
        content (list[dict]): Historical logs with 'Contract', 'Principal Utility', 'Agent Action'

    Returns:
        np.ndarray: n_actions x 6 matrix (5 outcome probabilities + 1 cost)
    """
    m_outcomes = v.size
    L = len(content)

    # Extract arrays from content
    contracts = np.array([log['Contract'] for log in content])  # (L,5)
    ag_actions = np.array([log['Agent Action'] for log in content])  # (L,)
    p_util = np.array([log['Principal Utility'] for log in content])  # (L,)

    accepted_ix = np.where(ag_actions == 1)[0]
    rejected_ix = np.where(ag_actions == -1)[0]

    # If no accepted contracts, return trivial uniform action with zero cost
    if accepted_ix.size == 0:
        uniform_p = np.ones(m_outcomes) / m_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0]])])

    accepted_w = contracts[accepted_ix]
    accepted_util = p_util[accepted_ix]

    # Normalize accepted contracts to simplex for clustering stability
    norm_w = accepted_w / (accepted_w.sum(axis=1, keepdims=True) + 1e-12)

    # Adaptive cluster count: min(10, sqrt(#accepted), #accepted)
    n_max_actions = max(1, min(10, int(np.sqrt(len(accepted_ix))), len(accepted_ix)))

    # Use AgglomerativeClustering with average linkage for stable clusters
    clustering = AgglomerativeClustering(n_clusters=n_max_actions, linkage='average')
    labels = clustering.fit_predict(norm_w)

    p_candidates = []
    costs_lower_bound = []

    # Compute robust cluster centers and cost lower bounds
    for c in range(n_max_actions):
        cluster_idx = accepted_ix[labels == c]
        if cluster_idx.size == 0:
            continue
        cluster_w = contracts[cluster_idx]
        cluster_util = p_util[cluster_idx]

        # Weight contracts by adjusted principal utility to favor higher payoffs
        weights = cluster_util - cluster_util.min() + 1.0
        avg_w = np.average(cluster_w, axis=0, weights=weights)

        # Project avg_w to simplex: clip non-neg and normalize sum=1
        p = np.clip(avg_w, 0, None)
        if p.sum() < 1e-12:
            p = np.ones(m_outcomes) / m_outcomes
        else:
            p = p / p.sum()

        p_candidates.append(p)

        # Cost lower bound: min of p @ w_i over cluster contracts (agent utility >=0)
        cluster_costs = np.array([p @ contracts[i] for i in cluster_idx])
        min_cost = cluster_costs.min()
        costs_lower_bound.append(min_cost)

    p_candidates = np.array(p_candidates)
    costs_lower_bound = np.array(costs_lower_bound)

    # Handle rejected contracts: agent utility must be < 0 for all inferred actions
    if rejected_ix.size > 0:
        reject_contracts = contracts[rejected_ix]
        # shape (n_actions, #rejections)
        p_w_rej = p_candidates @ reject_contracts.T
        # costs must be > max rejection utility for each action
        c_rej_min = p_w_rej.max(axis=1) + 1e-6
    else:
        c_rej_min = np.zeros(len(p_candidates))

    # Initial costs: max of accepted lower bound and rejection lower bound, clipped nonnegative
    costs = np.maximum(costs_lower_bound, c_rej_min)
    costs = np.maximum(costs, 0)

    # Validate if all accepted contracts are rationalized by some action
    def valid_action_for_contract(w_i):
        for a, (p, c) in enumerate(zip(p_candidates, costs)):
            util = p @ w_i - c
            if util >= -1e-8:
                return a
        return None

    # Add dummy actions for accepted contracts not explained by current actions
    unexplained_accepted = []
    for i in accepted_ix:
        w_i = contracts[i]
        if valid_action_for_contract(w_i) is None:
            unexplained_accepted.append(i)

    for i in unexplained_accepted:
        w_i = contracts[i]
        p_new = w_i.copy()
        # Normalize to simplex
        if p_new.sum() < 1e-12:
            p_new = np.ones(m_outcomes) / m_outcomes
        else:
            p_new = p_new / p_new.sum()
        c_new = p_new @ w_i  # cost = agent payoff on contract to ensure IR
        p_candidates = np.vstack([p_candidates, p_new])
        costs = np.append(costs, c_new)

    # After adding dummy actions, iteratively refine costs to satisfy rejection constraints with margin
    max_iter = 10
    margin = 1e-4
    for _ in range(max_iter):
        changed = False
        if rejected_ix.size > 0:
            reject_contracts = contracts[rejected_ix]
            p_w_rej = p_candidates @ reject_contracts.T
            for a in range(len(p_candidates)):
                max_rej_util = p_w_rej[a].max()
                if costs[a] < max_rej_util + margin:
                    costs[a] = max_rej_util + margin
                    changed = True
        if not changed:
            break

    # Final normalization of probabilities for numerical stability
    p_candidates = np.clip(p_candidates, 0, None)
    p_sums = p_candidates.sum(axis=1, keepdims=True)
    p_sums[p_sums < 1e-12] = 1.0  # prevent division by zero
    p_candidates = p_candidates / p_sums

    # Ensure costs nonnegative
    costs = np.maximum(costs, 0)

    # Return combined agent setting matrix: (n_actions, 6)
    agent_setting = np.hstack([p_candidates, costs[:, None]])

    return agent_setting
```
