```python
import numpy as np
from sklearn.cluster import AgglomerativeClustering

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Infer a valid agent setting (actions = outcome distributions + cost)
    consistent with historical contract logs under IR and IC constraints.

    Parameters:
        v (np.ndarray): Principal reward vector of length 5.
        content (list[dict]): Each dict contains:
            'Contract' (list of 5 floats),
            'Principal Utility' (float),
            'Agent Action' (1 for accept, -1 for reject).

    Returns:
        np.ndarray: n_actions x 6 array, each row is (p_1,...,p_5,cost)
                    where p_i >= 0, sum p_i = 1, cost >= 0.
    """
    m_outcomes = v.size
    L = len(content)

    if L == 0:
        # No data: return uniform zero-cost action
        uniform_p = np.ones(m_outcomes) / m_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.zeros((1, 1))])

    # Extract arrays
    contracts = np.array([log['Contract'] for log in content], dtype=np.float64)  # (L,5)
    principal_utils = np.array([log['Principal Utility'] for log in content], dtype=np.float64)  # (L,)
    agent_actions = np.array([log['Agent Action'] for log in content], dtype=int)  # (L,)

    accepted_ix = np.where(agent_actions == 1)[0]
    rejected_ix = np.where(agent_actions == -1)[0]

    # If no accepted contracts, return trivial uniform action zero cost
    if accepted_ix.size == 0:
        uniform_p = np.ones(m_outcomes) / m_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.zeros((1, 1))])

    accepted_contracts = contracts[accepted_ix]

    # Normalize accepted contract vectors to sum 1 for clustering; avoid div zero
    accepted_sums = accepted_contracts.sum(axis=1, keepdims=True)
    accepted_sums[accepted_sums < 1e-12] = 1.0
    normalized_accepted = accepted_contracts / accepted_sums

    n_accepted = accepted_ix.size
    # Adaptive clusters: min(10, n_accepted, sqrt(n_accepted) rounded up)
    n_clusters = max(1, min(10, n_accepted, int(np.ceil(np.sqrt(n_accepted)))))

    clustering = AgglomerativeClustering(n_clusters=n_clusters, affinity='euclidean', linkage='average')
    labels = clustering.fit_predict(normalized_accepted)

    p_candidates = []
    costs_lb = []

    # For each cluster, compute weighted average contract vector and minimal cost bound
    for cluster_id in range(n_clusters):
        mask = (labels == cluster_id)
        cluster_idx = accepted_ix[mask]
        if cluster_idx.size == 0:
            continue

        cluster_contracts = contracts[cluster_idx]
        cluster_putils = principal_utils[cluster_idx]

        # Shifted principal utilities for weights (to avoid negative weights)
        w_min = cluster_putils.min()
        weights = cluster_putils - w_min + 1.0
        weights = np.maximum(weights, 1e-3)  # prevent zero weights

        # Weighted average contract vector
        avg_w = np.average(cluster_contracts, axis=0, weights=weights)

        # Project avg_w onto simplex approximately: clip negatives, renormalize
        p = np.clip(avg_w, 0, None)
        s = p.sum()
        if s < 1e-12:
            p = np.ones(m_outcomes) / m_outcomes
        else:
            p = p / s

        p_candidates.append(p)

        # Minimal cost consistent with acceptance in cluster: must be <= p @ w_i for all i (agent utility >= 0)
        costs_in_cluster = np.array([p @ contracts[i] for i in cluster_idx])
        min_cost = costs_in_cluster.min()
        costs_lb.append(min_cost)

    p_candidates = np.array(p_candidates)
    costs_lb = np.array(costs_lb)
    costs_lb = np.maximum(costs_lb, 0.0)

    # Enforce rejection constraints: agent utility < 0 for rejected contracts
    if rejected_ix.size > 0:
        rejected_contracts = contracts[rejected_ix]  # (R,5)
        p_w_rej = p_candidates @ rejected_contracts.T  # (n_actions, R)
        rejection_cost_min = p_w_rej.max(axis=1) + 1e-6
    else:
        rejection_cost_min = np.zeros_like(costs_lb)

    costs = np.maximum(costs_lb, rejection_cost_min)

    def rationalizes_acceptance(w_i):
        """
        Check if any existing action yields agent utility >= 0 for contract w_i.
        Returns index of such action or None.
        """
        for idx, (p, c) in enumerate(zip(p_candidates, costs)):
            if p @ w_i - c >= -1e-8:
                return idx
        return None

    # Add new actions to explain accepted contracts not currently rationalized
    for i in accepted_ix:
        w_i = contracts[i]
        if rationalizes_acceptance(w_i) is None:
            p_new = w_i.copy()
            s = p_new.sum()
            if s < 1e-12:
                p_new = np.ones(m_outcomes) / m_outcomes
            else:
                p_new = p_new / s
            cost_new = p_new @ w_i  # minimal cost for utility >= 0 exactly
            p_candidates = np.vstack([p_candidates, p_new])
            costs = np.append(costs, cost_new)

    # Re-apply rejection constraints strictly after adding new actions
    if rejected_ix.size > 0:
        rejected_contracts = contracts[rejected_ix]
        p_w_rej = p_candidates @ rejected_contracts.T  # (n_actions, R)
        for a in range(len(costs)):
            max_rej_util = p_w_rej[a].max()
            if costs[a] < max_rej_util + 1e-8:
                costs[a] = max_rej_util + 1e-4

    # Robust normalization of probabilities
    p_candidates = np.clip(p_candidates, 0, None)
    row_sums = p_candidates.sum(axis=1, keepdims=True)
    row_sums[row_sums < 1e-12] = 1.0
    p_candidates /= row_sums

    costs = np.clip(costs, 0, None)

    agent_setting = np.hstack([p_candidates, costs[:, None]])
    return agent_setting
```
