```python
import numpy as np
import pandas as pd
from sklearn.cluster import DBSCAN
from scipy.optimize import linprog

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Infer a valid agent setting matrix (actions x [probabilities over 5 outcomes + cost])
    that explains all historical interactions under IR and IC constraints.

    Args:
        v: np.ndarray of shape (5,), principal's reward vector for 5 outcomes.
        content: list of dicts, each with keys 'Contract' (list of 5 float payments),
                 'Principal Utility' (float), and 'Agent Action' (1 or -1).

    Returns:
        np.ndarray of shape (n_actions, 6), rows are [p1,...,p5,cost]
    """
    m = v.shape[0]  # number of outcomes (expected 5)
    logs_df = pd.DataFrame(content)

    # Separate accepted and rejected logs
    accept_df = logs_df[logs_df['Agent Action'] == 1]
    reject_df = logs_df[logs_df['Agent Action'] == -1]

    # If no accepted logs, return trivial uniform distribution with zero cost
    if len(accept_df) == 0:
        p_uniform = np.ones(m) / m
        return np.array([np.append(p_uniform, 0.0)])

    accept_contracts = np.vstack(accept_df['Contract'].to_numpy())
    accept_putils = accept_df['Principal Utility'].to_numpy()
    reject_contracts = np.vstack(reject_df['Contract'].to_numpy()) if len(reject_df) > 0 else np.empty((0, m))

    # Step 1: For each accepted contract, infer a plausible outcome distribution p (prob vector)
    # Solve LP for each accepted contract:
    #   sum p = 1
    #   p @ (v - w) = principal utility
    #   0 <= p <= 1
    # This ensures p explains the observed principal utility given contract w.

    def solve_p_for_accept(w: np.ndarray, pu: float) -> np.ndarray:
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, pu])
        bounds = [(0, 1) for _ in range(m)]
        res = linprog(c=np.zeros(m), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p = res.x
            p = np.clip(p, 0, None)
            s = p.sum()
            if s > 0:
                p /= s
            else:
                p = np.ones(m) / m
            return p
        else:
            # fallback uniform distribution if infeasible
            return np.ones(m) / m

    candidate_ps = np.array([solve_p_for_accept(w, pu) for w, pu in zip(accept_contracts, accept_putils)])

    # Step 2: Cluster candidate_ps to find representative actions (outcome distributions)
    # Use DBSCAN with adaptive epsilon based on weighted average pairwise distances

    if len(candidate_ps) == 1:
        # Only one accepted contract, single action
        p_centers = candidate_ps
        accept_assign = np.zeros(1, dtype=int)
    else:
        # Compute pairwise distances weighted by acceptance frequency
        # Weight each candidate p by frequency of identical contracts (or uniform here)
        # Use cosine distance as metric to focus on distribution shape
        from sklearn.metrics.pairwise import cosine_distances

        dist_matrix = cosine_distances(candidate_ps)
        # Use median of distances as base epsilon
        median_dist = np.median(dist_matrix[np.triu_indices(len(candidate_ps), k=1)])
        # Adaptive epsilon: slightly larger than median distance to form meaningful clusters
        eps = max(0.05, median_dist * 1.2)

        # Use DBSCAN clustering
        clustering = DBSCAN(eps=eps, min_samples=1, metric='cosine').fit(candidate_ps)
        labels = clustering.labels_
        unique_labels = np.unique(labels)
        n_actions = len(unique_labels)

        # Compute cluster centers as weighted average of assigned candidate_ps
        p_centers = np.zeros((n_actions, m))
        for i, lbl in enumerate(unique_labels):
            members = candidate_ps[labels == lbl]
            # Weighted average by principal utilities to emphasize better explained contracts
            members_idx = np.where(labels == lbl)[0]
            weights = accept_putils[members_idx]
            weights = np.maximum(weights, 1e-3)  # avoid zero weights
            weights /= weights.sum()
            p_centers[i] = np.average(members, axis=0, weights=weights)

        accept_assign = labels

    # Step 3: Compute costs from IR constraints (agent rationality on accepted contracts)
    # For each action a:
    #   cost_a <= min_i (p_a @ w_i) for accepted contracts i assigned to a
    #   cost_a >= 0
    costs = np.zeros(len(p_centers))
    for a in range(len(p_centers)):
        idxs = np.where(accept_assign == a)[0]
        if len(idxs) == 0:
            costs[a] = 0.0
            continue
        p_a = p_centers[a]
        payoffs = accept_contracts[idxs] @ p_a  # shape (#assigned,)
        costs[a] = max(0.0, np.min(payoffs))

    # Step 4: Enforce IC constraints from rejected contracts:
    # For each rejected contract w_r and action a:
    #   agent utility < 0 => p_a @ w_r - cost_a < 0 => cost_a > p_a @ w_r
    # So cost_a > max_r p_a @ w_r for all rejected contracts r
    if reject_contracts.shape[0] > 0:
        rej_utils = reject_contracts @ p_centers.T  # shape (#rej, n_actions)
        max_rej_util = np.max(rej_utils, axis=0)  # max over rejected contracts per action
        # Add margin proportional to scale for strict inequality
        margin = np.maximum(1e-7, 1e-4 * np.maximum(1.0, max_rej_util))
        costs = np.maximum(costs, max_rej_util + margin)

    # Numerical safety: ensure costs non-negative
    costs = np.maximum(costs, 0.0)

    # Step 5: Normalize p_centers rows to sum to 1 (numerical safety)
    p_centers = np.clip(p_centers, 0, None)
    row_sums = p_centers.sum(axis=1, keepdims=True)
    row_sums[row_sums == 0] = 1.0
    p_centers /= row_sums

    # Step 6: Assemble agent setting matrix: [p1,...,p5, cost]
    agent_setting = np.hstack([p_centers, costs.reshape(-1, 1)])

    return agent_setting
```
