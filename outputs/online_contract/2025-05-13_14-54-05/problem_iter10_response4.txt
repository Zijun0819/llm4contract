```python
import numpy as np
from sklearn.cluster import AgglomerativeClustering

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Infer a valid agent setting matrix (actions x [probabilities over 5 outcomes + cost])
    that explains all historical interactions under IR and IC constraints.

    Args:
        v: np.ndarray of shape (5,), principal's reward vector for 5 outcomes.
        content: list of dicts, each with keys 'Contract' (list of 5 float payments),
                 'Principal Utility' (float), and 'Agent Action' (1 or -1).

    Returns:
        np.ndarray of shape (n_actions, 6), rows are [p1,...,p5,cost]
    """
    m = v.shape[0]  # number of outcomes (expected 5)

    # Separate accepted and rejected logs
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]

    # If no accepted logs, return trivial uniform distribution with zero cost
    if not accepted_logs:
        p_uniform = np.ones(m) / m
        return np.array([np.append(p_uniform, 0.0)])

    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    n_accepted = len(accepted_contracts)

    # Adaptive clustering of accepted contracts to identify agent actions
    max_clusters = min(10, n_accepted)
    threshold = 0.07  # increased threshold for max avg cluster radius (Euclidean norm)
    best_labels = None
    best_n_clusters = 1
    best_centers = None

    for n_clusters in range(1, max_clusters + 1):
        if n_clusters == 1:
            labels = np.zeros(n_accepted, dtype=int)
        else:
            clustering = AgglomerativeClustering(n_clusters=n_clusters)
            labels = clustering.fit_predict(accepted_contracts)

        centers = np.zeros((n_clusters, m))
        max_avg_dist = 0.0
        for i in range(n_clusters):
            cluster_points = accepted_contracts[labels == i]
            if cluster_points.shape[0] == 0:
                # Empty cluster, assign center as uniform distribution
                center = np.ones(m) / m
            else:
                center = cluster_points.mean(axis=0)
            centers[i] = center
            avg_dist = np.mean(np.linalg.norm(cluster_points - center, axis=1)) if cluster_points.shape[0] > 0 else 0.0
            if avg_dist > max_avg_dist:
                max_avg_dist = avg_dist

        if max_avg_dist <= threshold:
            best_labels = labels
            best_n_clusters = n_clusters
            best_centers = centers
            break

    # If no clustering met threshold, fallback to clustering with max_clusters
    if best_centers is None:
        if max_clusters == 1:
            best_labels = np.zeros(n_accepted, dtype=int)
            best_n_clusters = 1
            best_centers = accepted_contracts.mean(axis=0, keepdims=True)
        else:
            clustering = AgglomerativeClustering(n_clusters=max_clusters)
            best_labels = clustering.fit_predict(accepted_contracts)
            best_n_clusters = max_clusters
            best_centers = np.zeros((best_n_clusters, m))
            for i in range(best_n_clusters):
                cluster_points = accepted_contracts[best_labels == i]
                if cluster_points.shape[0] == 0:
                    best_centers[i] = np.ones(m) / m
                else:
                    best_centers[i] = cluster_points.mean(axis=0)

    # Normalize each cluster center to a probability distribution over outcomes
    eps = 1e-14
    ps = []
    for center in best_centers:
        p = np.maximum(center, 0)
        s = p.sum()
        if s > eps:
            p /= s
        else:
            p = np.ones(m) / m
        ps.append(p)
    ps = np.array(ps)  # shape (actions, m)

    # Assign accepted contracts to closest cluster center by Euclidean distance
    dist_to_centers = np.linalg.norm(accepted_contracts[:, None, :] - best_centers[None, :, :], axis=2)
    assigned_actions = dist_to_centers.argmin(axis=1)

    # Compute cost per action from IR constraints:
    # cost_a <= min_{w assigned to a} p_a @ w
    costs = np.zeros(best_n_clusters)
    for a in range(best_n_clusters):
        idxs = np.where(assigned_actions == a)[0]
        if idxs.size > 0:
            pay_ins = np.array([ps[a] @ accepted_contracts[i] for i in idxs])
            costs[a] = pay_ins.min()
        else:
            # No accepted contract assigned to action a, set cost to zero initially
            costs[a] = 0.0

    # Enforce IC constraints from rejected contracts:
    # For each rejected contract w, agent utility = max_a (p_a @ w - cost_a) < 0
    # => cost_a > p_a @ w for all a, for that w
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rej_utilities = ps @ rejected_contracts.T  # shape (actions, rejected_count)
        max_rej_util = rej_utilities.max(axis=1)  # max over rejected contracts for each action
        # Add margin proportional to scale for strict inequality
        margin = np.maximum(1e-8, 1e-4 * np.maximum(1.0, max_rej_util))
        costs = np.maximum(costs, max_rej_util + margin)

    # Ensure costs are non-negative
    costs = np.maximum(costs, 0.0)

    # Final agent setting matrix: each row [p1, ..., p5, cost]
    agent_setting = np.hstack([ps, costs.reshape(-1, 1)])

    return agent_setting
```
