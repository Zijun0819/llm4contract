```python
import numpy as np
import pandas as pd
from sklearn.cluster import DBSCAN
from sklearn.metrics.pairwise import cosine_distances
from scipy.optimize import linprog

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Infer a valid agent setting matrix (actions x [probabilities over 5 outcomes + cost])
    that explains all historical interactions under IR and IC constraints.

    Args:
        v: np.ndarray of shape (5,), principal's reward vector for 5 outcomes.
        content: list of dicts, each with keys 'Contract' (list of 5 float payments),
                 'Principal Utility' (float), and 'Agent Action' (1 or -1).

    Returns:
        np.ndarray of shape (n_actions, 6), rows are [p1,...,p5,cost]
    """
    m = v.shape[0]  # number of outcomes (expected 5)
    logs_df = pd.DataFrame(content)

    # Separate accepted and rejected logs
    accept_df = logs_df[logs_df['Agent Action'] == 1]
    reject_df = logs_df[logs_df['Agent Action'] == -1]

    # If no accepted logs, return trivial uniform distribution with zero cost
    if len(accept_df) == 0:
        p_uniform = np.ones(m) / m
        return np.array([np.append(p_uniform, 0.0)])

    accept_contracts = np.vstack(accept_df['Contract'].to_numpy())
    accept_putils = accept_df['Principal Utility'].to_numpy()
    reject_contracts = (
        np.vstack(reject_df['Contract'].to_numpy()) if len(reject_df) > 0 else np.empty((0, m))
    )

    # Step 1: For each accepted contract, infer a plausible outcome distribution p (prob vector)
    # Relax equality on principal utility with small tolerance to improve feasibility
    def solve_p_for_accept(w: np.ndarray, pu: float) -> np.ndarray:
        tol = 1e-8
        bounds = [(0, 1) for _ in range(m)]

        # Constraint: sum p_i = 1
        A_eq = np.ones((1, m))
        b_eq = np.array([1.0])

        # Two LPs for inequality relaxation on p@(v-w)
        # LP1: p@(v-w) >= pu - tol  =>  -(v-w) @ p <= -(pu - tol)
        A_ub1 = np.array([-(v - w)])
        b_ub1 = np.array([-(pu - tol)])
        res1 = linprog(
            c=np.zeros(m), A_eq=A_eq, b_eq=b_eq, A_ub=A_ub1, b_ub=b_ub1, bounds=bounds, method='highs'
        )

        # LP2: p@(v-w) <= pu + tol  =>  (v-w) @ p <= pu + tol
        A_ub2 = np.array([v - w])
        b_ub2 = np.array([pu + tol])
        res2 = linprog(
            c=np.zeros(m), A_eq=A_eq, b_eq=b_eq, A_ub=A_ub2, b_ub=b_ub2, bounds=bounds, method='highs'
        )

        candidates = []
        if res1.success:
            candidates.append(res1.x)
        if res2.success:
            candidates.append(res2.x)

        if candidates:
            best_p = min(candidates, key=lambda p: abs(p @ (v - w) - pu))
            p = best_p
        else:
            # fallback uniform distribution if infeasible
            p = np.ones(m) / m

        p = np.clip(p, 0, None)
        s = p.sum()
        if s > 0:
            p /= s
        else:
            p = np.ones(m) / m
        return p

    candidate_ps = np.array([solve_p_for_accept(w, pu) for w, pu in zip(accept_contracts, accept_putils)])

    # Step 2: Cluster candidate_ps to find representative actions (outcome distributions)
    weights = np.abs(accept_putils)
    if weights.sum() == 0:
        weights = np.ones_like(weights)
    weights /= weights.sum()

    if len(candidate_ps) == 1:
        labels = np.array([0])
    else:
        dist_mat = cosine_distances(candidate_ps)
        median_dist = np.median(dist_mat[np.triu_indices(len(candidate_ps), k=1)])
        eps = max(1e-3, median_dist * 0.3)
        dbscan = DBSCAN(eps=eps, min_samples=1, metric='cosine')
        labels = dbscan.fit_predict(candidate_ps)

    unique_labels = np.unique(labels)
    n_actions = len(unique_labels)

    p_centers = np.zeros((n_actions, m))
    for i, lab in enumerate(unique_labels):
        idxs = np.where(labels == lab)[0]
        if len(idxs) == 0:
            continue
        wts = weights[idxs]
        wts_sum = wts.sum()
        if wts_sum == 0:
            center = candidate_ps[idxs].mean(axis=0)
        else:
            center = np.average(candidate_ps[idxs], axis=0, weights=wts)
        center = np.clip(center, 0, None)
        s = center.sum()
        if s > 0:
            center /= s
        else:
            center = np.ones(m) / m
        p_centers[i] = center

    # Step 3: Initialize costs from IR constraints
    costs = np.zeros(n_actions)
    for i, lab in enumerate(unique_labels):
        idxs = np.where(labels == lab)[0]
        if len(idxs) == 0:
            costs[i] = 0.0
            continue
        p_a = p_centers[i]
        payoffs = accept_contracts[idxs] @ p_a
        min_payoff = np.min(payoffs)
        costs[i] = max(0.0, min_payoff)

    # Step 4: Enforce IC constraints from rejected contracts
    if reject_contracts.shape[0] > 0:
        rej_utils = reject_contracts @ p_centers.T
        max_rej_util = np.max(rej_utils, axis=0)
        margin = np.maximum(1e-7, 1e-4 * np.maximum(1.0, max_rej_util))
        costs = np.maximum(costs, max_rej_util + margin)

    # Step 5: Iterative global refinement of costs via LP enforcing IR and IC with margin
    margin_ir = 1e-7
    margin_ic = 1e-7

    accept_clusters = labels
    n_ir = len(accept_contracts)
    n_ic = reject_contracts.shape[0] * n_actions if reject_contracts.shape[0] > 0 else 0
    n_constraints = n_ir + n_ic

    if n_constraints > 0:
        A_ub = np.zeros((n_constraints, n_actions))
        b_ub = np.zeros(n_constraints)

        # IR constraints: cost_a <= p_a @ w_i - margin_ir  => cost_a - p_a @ w_i <= -margin_ir
        for idx in range(n_ir):
            a = accept_clusters[idx]
            p_a = p_centers[a]
            w_i = accept_contracts[idx]
            val = p_a @ w_i
            A_ub[idx, a] = 1.0
            b_ub[idx] = val - margin_ir

        # IC constraints: cost_a >= p_a @ w_r + margin_ic  => -cost_a + p_a @ w_r <= -margin_ic
        if n_ic > 0:
            row = n_ir
            for r_idx in range(reject_contracts.shape[0]):
                w_r = reject_contracts[r_idx]
                for a in range(n_actions):
                    p_a = p_centers[a]
                    val = p_a @ w_r
                    A_ub[row, a] = -1.0
                    b_ub[row] = -val - margin_ic
                    row += 1

        bounds = [(0, None) for _ in range(n_actions)]
        c = np.ones(n_actions)  # minimize sum costs (arbitrary)

        res = linprog(c=c, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')

        if res.success:
            costs = res.x
        else:
            # Relax margins to zero and retry
            margin_ir = 0.0
            margin_ic = 0.0
            for idx in range(n_ir):
                a = accept_clusters[idx]
                p_a = p_centers[a]
                w_i = accept_contracts[idx]
                val = p_a @ w_i
                A_ub[idx, a] = 1.0
                b_ub[idx] = val - margin_ir
            if n_ic > 0:
                row = n_ir
                for r_idx in range(reject_contracts.shape[0]):
                    w_r = reject_contracts[r_idx]
                    for a in range(n_actions):
                        p_a = p_centers[a]
                        val = p_a @ w_r
                        A_ub[row, a] = -1.0
                        b_ub[row] = -val - margin_ic
                        row += 1
            res2 = linprog(c=c, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')
            if res2.success:
                costs = res2.x
            else:
                costs = np.maximum(costs, 0.0)

    costs = np.maximum(costs, 0.0)

    # Step 6: Normalize p_centers rows robustly
    p_centers = np.clip(p_centers, 0, None)
    row_sums = p_centers.sum(axis=1, keepdims=True)
    row_sums[row_sums == 0] = 1.0
    p_centers /= row_sums

    # Step 7: Assemble agent setting matrix
    agent_setting = np.hstack([p_centers, costs.reshape(-1, 1)])

    return agent_setting
```
