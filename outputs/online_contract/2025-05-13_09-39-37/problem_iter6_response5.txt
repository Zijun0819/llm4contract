```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import DBSCAN
from sklearn.metrics import silhouette_score
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Infer a valid agent setting (probabilities over outcomes + costs)
    consistent with historical logs of contracts, principal utilities,
    and agent accept/reject actions.

    Args:
        v (np.ndarray): Principal's reward vector for 5 outcomes, shape (5,)
        content (list[dict]): Each dict with keys:
            - 'Contract': 5-dim payment vector,
            - 'Principal Utility': float,
            - 'Agent Action': int (1 accept, -1 reject)

    Returns:
        np.ndarray: n_actions x 6 matrix, each row:
            first 5 columns = outcome probabilities (sum=1),
            last column = agent cost (â‰¥0).
    """
    m = v.shape[0]
    logs_df = pd.DataFrame(content)
    accepted = logs_df[logs_df['Agent Action'] == 1].reset_index(drop=True)
    rejected = logs_df[logs_df['Agent Action'] == -1].reset_index(drop=True)

    # If no accepted contracts, return trivial uniform action with zero cost
    if accepted.empty:
        uniform_p = np.ones(m) / m
        return np.hstack([uniform_p, 0.0])[np.newaxis, :]

    # --- Infer agent outcome distributions p for accepted contracts ---
    def infer_p_accept(w, u_p):
        # maximize p@w
        # s.t sum p=1
        #     p@(v-w) = u_p
        #     0 <= p_i <= 1
        c = -np.array(w, dtype=np.float64)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u_p], dtype=np.float64)
        bounds = [(0, 1) for _ in range(m)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p = np.clip(res.x, 0, None)
            s = p.sum()
            if s > 0:
                p /= s
            else:
                p = np.ones(m) / m
            return p
        else:
            return np.ones(m) / m

    p_accept_list = [infer_p_accept(row['Contract'], row['Principal Utility']) for _, row in accepted.iterrows()]
    p_accept = np.vstack(p_accept_list)  # shape (n_accept, m)

    # --- Infer outcome distributions p for rejected contracts ---
    def infer_p_reject(w):
        # maximize p@w
        # s.t sum p=1
        #     p@(v-w) <= -delta (agent utility < 0)
        #     0 <= p_i <= 1
        delta = 1e-8
        c = -np.array(w, dtype=np.float64)
        A_eq = np.ones((1, m))
        b_eq = np.array([1.0])
        A_ub = np.array([-(v - w)])
        b_ub = np.array([-delta])
        bounds = [(0, 1) for _ in range(m)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')
        if res.success:
            p = np.clip(res.x, 0, None)
            s = p.sum()
            if s > 0:
                p /= s
            else:
                p = np.ones(m) / m
            return p
        else:
            # fallback uniform if infeasible
            return np.ones(m) / m

    p_reject_list = [infer_p_reject(row['Contract']) for _, row in rejected.iterrows()]
    p_reject = np.vstack(p_reject_list) if p_reject_list else np.empty((0, m))

    # Combine all p's for clustering
    combined_p = np.vstack([p_accept, p_reject]) if p_reject.size else p_accept.copy()

    # --- Cluster combined p with DBSCAN (Euclidean) and select best eps by silhouette ---
    eps_candidates = np.linspace(0.05, 0.3, 6)
    best_eps = None
    best_score = -1
    best_labels = None
    for eps in eps_candidates:
        clustering = DBSCAN(eps=eps, min_samples=2, metric='euclidean').fit(combined_p)
        labels = clustering.labels_
        n_clusters = len(set(labels)) - (1 if -1 in labels else 0)
        if n_clusters < 2:
            continue
        mask = labels != -1
        try:
            score = silhouette_score(combined_p[mask], labels[mask])
            if score > best_score:
                best_score = score
                best_eps = eps
                best_labels = labels
        except Exception:
            continue

    if best_labels is None:
        # fallback: all accepted in one cluster, rejected noise
        n_accept = p_accept.shape[0]
        n_reject = p_reject.shape[0]
        best_labels = np.concatenate([np.zeros(n_accept, dtype=int), -np.ones(n_reject, dtype=int)])
        best_eps = 0.15

    labels = best_labels
    clustered_mask = labels != -1
    clustered_p = combined_p[clustered_mask]
    clustered_labels = labels[clustered_mask]
    n_actions = clustered_labels.max() + 1 if clustered_labels.size > 0 else 1
    if n_actions == 0:
        n_actions = 1

    # --- Compute cluster centers (mean p per cluster) ---
    centers = np.zeros((n_actions, m))
    for a in range(n_actions):
        members = clustered_p[clustered_labels == a]
        if members.shape[0] == 0:
            centers[a] = np.ones(m) / m
        else:
            mean_p = members.mean(axis=0)
            mean_p = np.clip(mean_p, 0, None)
            s = mean_p.sum()
            if s > 0:
                mean_p /= s
            else:
                mean_p = np.ones(m) / m
            centers[a] = mean_p

    # --- Assign accepted logs to closest cluster center ---
    dist_accept = cdist(p_accept, centers, metric='euclidean')
    assign_accept = dist_accept.argmin(axis=1)

    accepted_contracts = np.array(accepted['Contract'].tolist())
    rejected_contracts = np.array(rejected['Contract'].tolist()) if not rejected.empty else np.empty((0, m))

    # --- Compute minimal costs c_a per action satisfying IR and IC ---
    eps_cost = 1e-9
    costs = np.zeros(n_actions)

    for a in range(n_actions):
        p_a = centers[a]

        # IR: accepted logs assigned to action a
        idx_acc = np.where(assign_accept == a)[0]
        if idx_acc.size > 0:
            payoffs_acc = accepted_contracts[idx_acc] @ p_a
            max_acc_payoff = payoffs_acc.max()
        else:
            max_acc_payoff = 0.0

        # IC: all rejected logs
        if rejected_contracts.shape[0] > 0:
            payoffs_rej = rejected_contracts @ p_a
            max_rej_payoff = payoffs_rej.max()
        else:
            max_rej_payoff = -np.inf

        cost_a = max(max_acc_payoff, max_rej_payoff + eps_cost, 0.0)
        costs[a] = cost_a

    # --- Iteratively refine costs to satisfy IR and IC ---
    max_iter = 15
    for _ in range(max_iter):
        violated = False

        # Check IR: accepted logs must have some action with utility >= 0
        accept_utils = accepted_contracts @ centers.T - costs  # shape (n_accept, n_actions)
        max_accept_util = accept_utils.max(axis=1)
        if np.any(max_accept_util < -eps_cost):
            violation_idx = np.where(max_accept_util < -eps_cost)[0]
            for i in violation_idx:
                # For this log, find action with max utility (even if negative)
                max_a = accept_utils[i].argmax()
                # Try decreasing cost to fix IR (cost >= 0)
                old_cost = costs[max_a]
                new_cost = max(old_cost + accept_utils[i, max_a], 0.0)
                if new_cost < old_cost:
                    costs[max_a] = new_cost
                    violated = True
            if not violated:
                # Cannot fix IR violation by decreasing costs, break
                break

        # Check IC: rejected logs must have all utilities < 0
        if rejected_contracts.shape[0] > 0:
            reject_utils = rejected_contracts @ centers.T - costs  # shape (n_reject, n_actions)
            for i in range(rejected_contracts.shape[0]):
                viol_actions = np.where(reject_utils[i] >= -eps_cost)[0]
                if viol_actions.size > 0:
                    violated = True
                    for a in viol_actions:
                        costs[a] = max(costs[a], rejected_contracts[i] @ centers[a] + eps_cost)
                    break  # re-check after update
            if violated:
                continue

        if not violated:
            break

    # Final normalization and clipping
    centers = np.clip(centers, 0, None)
    centers /= centers.sum(axis=1, keepdims=True)
    costs = np.maximum(costs, 0.0)

    agent_setting = np.hstack([centers, costs[:, None]])
    return agent_setting
```
