```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import DBSCAN
from sklearn.metrics import silhouette_score
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Infer a valid agent setting (prob distributions over outcomes + costs)
    explaining the historical interaction logs between principal and agent,
    incorporating both accepted and rejected logs adaptively.

    Args:
        v (np.ndarray): Principal's reward vector for 5 outcomes, shape (5,)
        content (list[dict]): Each dict contains
            - 'Contract': 5-dim payment vector,
            - 'Principal Utility': principal utility under contract,
            - 'Agent Action': 1 for accept, -1 for reject.

    Returns:
        np.ndarray: n x 6 matrix: first 5 cols are outcome probabilities (sum=1),
                    last column is agent cost (â‰¥0).
    """
    m_outcomes = v.shape[0]
    logs_df = pd.DataFrame(content)
    accepted = logs_df[logs_df['Agent Action'] == 1].reset_index(drop=True)
    rejected = logs_df[logs_df['Agent Action'] == -1].reset_index(drop=True)

    # If no accepted contracts, trivial agent: uniform dist and zero cost
    if accepted.empty:
        return np.hstack([np.ones((1, m_outcomes)) / m_outcomes, np.zeros((1, 1))])

    # --- Infer p for accepted logs via LP ---
    def infer_p_for_accept(w, u_p):
        # maximize p@w s.t. sum p=1, p@(v-w)=u_p, 0<=p<=1
        c = -np.array(w)
        A_eq = np.vstack([np.ones(m_outcomes), v - w])
        b_eq = np.array([1.0, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c=c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p = np.clip(res.x, 0, None)
            s = p.sum()
            if s > 0:
                p /= s
            else:
                p = np.ones(m_outcomes) / m_outcomes
            return p
        else:
            return np.ones(m_outcomes) / m_outcomes

    p_accept_list = [infer_p_for_accept(row['Contract'], row['Principal Utility']) for _, row in accepted.iterrows()]
    p_accept = np.vstack(p_accept_list)  # (n_accept, m_outcomes)

    # --- Infer p for rejected logs via LP with agent utility < 0 constraint ---
    def infer_p_for_reject(w):
        # maximize p@w s.t. sum p=1, p@(v-w) <= -delta, 0<=p<=1
        delta = 1e-6
        c = -np.array(w)
        A_eq = np.ones((1, m_outcomes))
        b_eq = np.array([1.0])
        A_ub = np.array([-(v - w)])
        b_ub = np.array([-delta])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c=c, A_eq=A_eq, b_eq=b_eq, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')
        if res.success:
            p = np.clip(res.x, 0, None)
            s = p.sum()
            if s > 0:
                p /= s
            else:
                p = np.ones(m_outcomes) / m_outcomes
            return p
        else:
            return np.ones(m_outcomes) / m_outcomes

    p_reject_list = [infer_p_for_reject(row['Contract']) for _, row in rejected.iterrows()]
    p_reject = np.vstack(p_reject_list) if p_reject_list else np.empty((0, m_outcomes))

    # Combine p_accept and p_reject for clustering
    combined_p = np.vstack([p_accept, p_reject]) if p_reject.size else p_accept.copy()

    # --- Cluster combined p with DBSCAN (Euclidean) and select best eps by silhouette ---
    eps_candidates = np.linspace(0.05, 0.3, 6)
    best_eps = None
    best_score = -1
    for eps in eps_candidates:
        clustering = DBSCAN(eps=eps, min_samples=2, metric='euclidean').fit(combined_p)
        labels = clustering.labels_
        n_clusters = len(set(labels)) - (1 if -1 in labels else 0)
        if n_clusters < 2:
            continue
        try:
            score = silhouette_score(combined_p[labels != -1], labels[labels != -1])
            if score > best_score:
                best_score = score
                best_eps = eps
        except Exception:
            continue
    if best_eps is None:
        best_eps = 0.15  # fallback

    clustering = DBSCAN(eps=best_eps, min_samples=2, metric='euclidean').fit(combined_p)
    labels = clustering.labels_
    valid_mask = labels != -1
    filtered_p = combined_p[valid_mask]
    filtered_labels = labels[valid_mask]

    if len(set(filtered_labels)) == 0:
        # fallback: single cluster mean of accepted p
        centers = np.mean(p_accept, axis=0, keepdims=True)
        centers = np.clip(centers, 0, None)
        centers /= centers.sum(axis=1, keepdims=True)
        n_actions = 1
    else:
        n_actions = len(set(filtered_labels))
        centers = np.zeros((n_actions, m_outcomes))
        for a in range(n_actions):
            cluster_ps = filtered_p[filtered_labels == a]
            c = cluster_ps.mean(axis=0)
            c = np.clip(c, 0, None)
            s = c.sum()
            if s > 0:
                c /= s
            else:
                c = np.ones(m_outcomes) / m_outcomes
            centers[a] = c

    # --- Assign accepted logs to closest cluster ---
    dist_acc = cdist(p_accept, centers, metric='euclidean')
    assigned_clusters = dist_acc.argmin(axis=1)

    accepted_contracts = np.array(accepted['Contract'].tolist())
    rejected_contracts = np.array(rejected['Contract'].tolist()) if not rejected.empty else np.empty((0, m_outcomes))

    # --- Infer costs satisfying IR and IC ---
    eps_cost = 1e-7
    costs = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = centers[a]

        acc_idx = np.where(assigned_clusters == a)[0]
        if acc_idx.size > 0:
            acc_vals = accepted_contracts[acc_idx] @ p_a
            max_acc = acc_vals.max()
        else:
            max_acc = 0.0

        if rejected_contracts.shape[0] > 0:
            rej_vals = rejected_contracts @ p_a
            max_rej = rej_vals.max()
        else:
            max_rej = -np.inf

        costs[a] = max(max_acc, max_rej + eps_cost, 0.0)

    # --- Iteratively adjust costs to satisfy IR and IC ---
    max_iters = 10
    for _ in range(max_iters):
        # Accepted logs: max utility over actions >= 0
        accept_utils = accepted_contracts @ centers.T - costs  # shape (n_accept, n_actions)
        max_accept_util = accept_utils.max(axis=1)
        if np.any(max_accept_util < -eps_cost):
            violation_idx = np.where(max_accept_util < -eps_cost)[0]
            for idx in violation_idx:
                a = assigned_clusters[idx]
                # Decrease cost a slightly but keep >= 0
                costs[a] = max(costs[a] - eps_cost * 10, 0.0)
            continue

        # Rejected logs: all utilities < 0
        if rejected_contracts.shape[0] > 0:
            reject_utils = rejected_contracts @ centers.T - costs  # shape (n_reject, n_actions)
            max_reject_util = reject_utils.max(axis=1)
            if np.any(max_reject_util >= -eps_cost):
                costs += eps_cost * 10
                continue
        break

    # Normalize centers and ensure costs non-negative
    centers = np.clip(centers, 0, None)
    centers /= centers.sum(axis=1, keepdims=True)
    costs = np.maximum(costs, 0.0)

    agent_setting = np.hstack([centers, costs[:, None]])
    return agent_setting
```
