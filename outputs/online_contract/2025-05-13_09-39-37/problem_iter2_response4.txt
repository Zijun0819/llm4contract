```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import AgglomerativeClustering

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Infer a valid agent setting (prob distributions over outcomes + costs)
    explaining the historical interaction logs between principal and agent.

    Args:
        v (np.ndarray): Principal's reward vector for 5 outcomes, shape (5,)
        content (list[dict]): Each dict contains
            - 'Contract': 5-dim payment vector,
            - 'Principal Utility': principal utility under contract,
            - 'Agent Action': 1 for accept, -1 for reject.

    Returns:
        np.ndarray: n x 6 matrix: first 5 cols are outcome probabilities (sum=1),
                    last column is agent cost (â‰¥0).
    """
    m_outcomes = v.shape[0]
    logs_df = pd.DataFrame(content)
    accepted = logs_df[logs_df['Agent Action'] == 1].reset_index(drop=True)
    rejected = logs_df[logs_df['Agent Action'] == -1].reset_index(drop=True)

    # If no accepted logs, return trivial agent: uniform dist + zero cost
    if accepted.empty:
        return np.hstack([np.ones((1, m_outcomes)) / m_outcomes, np.zeros((1, 1))])

    # LP to infer p for each accepted contract by maximizing agent expected wage p @ w
    def infer_p_for_log(w, u_p):
        c_obj = -np.array(w)  # maximize p @ w <=> minimize -p @ w
        A_eq = [np.ones(m_outcomes), v - w]
        b_eq = [1.0, u_p]
        bounds = [(0, 1) for _ in range(m_outcomes)]
        res = linprog(c=c_obj, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p = res.x
            p = np.clip(p, 0, None)
            s = p.sum()
            if s > 0:
                p /= s
            else:
                p = np.ones(m_outcomes) / m_outcomes
            return p
        else:
            # fallback uniform
            return np.ones(m_outcomes) / m_outcomes

    p_list = [infer_p_for_log(row['Contract'], row['Principal Utility']) for _, row in accepted.iterrows()]
    p_array = np.vstack(p_list)

    # Adaptive clustering to find distinct agent actions
    clustering = AgglomerativeClustering(n_clusters=None, distance_threshold=0.15).fit(p_array)
    labels = clustering.labels_
    n_actions = labels.max() + 1

    # Compute cluster centers (mean p per cluster)
    centers = np.zeros((n_actions, m_outcomes))
    for a in range(n_actions):
        cluster_ps = p_array[labels == a]
        c = cluster_ps.mean(axis=0)
        c = np.clip(c, 0, None)
        s = c.sum()
        if s > 0:
            c /= s
        else:
            c = np.ones(m_outcomes) / m_outcomes
        centers[a] = c

    # Extract contracts arrays
    accepted_contracts = np.array(accepted['Contract'].tolist())
    rejected_contracts = np.array(rejected['Contract'].tolist()) if not rejected.empty else np.empty((0, m_outcomes))

    eps = 1e-7
    max_iters = 10

    # Initialize costs conservatively
    costs = np.zeros(n_actions)

    for _ in range(max_iters):
        prev_costs = costs.copy()

        # IR constraints: cost_a <= min_{accepted assigned a} p_a @ w
        for a in range(n_actions):
            assigned_idx = np.where(labels == a)[0]
            if assigned_idx.size > 0:
                w_assigned = accepted_contracts[assigned_idx]
                vals = w_assigned @ centers[a]
                costs[a] = min(costs[a], vals.min()) if costs[a] > 0 else vals.min()
            else:
                # No accepted assigned: keep current or zero
                costs[a] = max(costs[a], 0.0)

        # IC constraints: cost_a > max_{rejected} p_a @ w
        if rejected_contracts.shape[0] > 0:
            for a in range(n_actions):
                rej_vals = rejected_contracts @ centers[a]
                max_rej = rej_vals.max()
                if costs[a] <= max_rej:
                    costs[a] = max_rej + eps

        # Enforce non-negativity
        costs = np.clip(costs, 0, None)

        # Check convergence
        if np.allclose(costs, prev_costs, atol=eps):
            break

    # After cost update, validate acceptance logs feasibility & reassign
    accept_utils = accepted_contracts @ centers.T - costs  # shape (n_accept, n_actions)
    accept_best_util = accept_utils.max(axis=1)
    accept_best_action = accept_utils.argmax(axis=1)

    # If any accepted log cannot be explained, slightly relax costs
    if np.any(accept_best_util < -eps):
        costs += eps
        costs = np.clip(costs, 0, None)

    # Validate rejection logs feasibility
    if rejected_contracts.shape[0] > 0:
        reject_utils = rejected_contracts @ centers.T - costs  # shape (n_reject, n_actions)
        reject_max_util = reject_utils.max(axis=1)
        if np.any(reject_max_util >= -eps):
            # Increase costs slightly to maintain IC
            costs += eps * 10
            costs = np.clip(costs, 0, None)

    # Final agent setting matrix: probabilities + cost
    agent_setting = np.hstack([centers, costs[:, None]])

    return agent_setting
```
