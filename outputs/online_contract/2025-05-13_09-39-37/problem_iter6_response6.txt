```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import DBSCAN
from sklearn.metrics import silhouette_score
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Infer a valid agent setting (probabilities over outcomes + costs)
    consistent with historical logs of contracts, principal utilities,
    and agent accept/reject actions.

    Args:
        v (np.ndarray): Principal's reward vector for 5 outcomes, shape (5,)
        content (list[dict]): Each dict with keys:
            - 'Contract': 5-dim payment vector,
            - 'Principal Utility': float,
            - 'Agent Action': int (1 accept, -1 reject)

    Returns:
        np.ndarray: n_actions x 6 matrix, each row:
            first 5 columns = outcome probabilities (sum=1),
            last column = agent cost (â‰¥0).
    """
    m = v.shape[0]
    logs_df = pd.DataFrame(content)
    accepted = logs_df[logs_df['Agent Action'] == 1].reset_index(drop=True)
    rejected = logs_df[logs_df['Agent Action'] == -1].reset_index(drop=True)

    # If no accepted contracts, return trivial uniform action with zero cost
    if accepted.empty:
        uniform_p = np.ones(m) / m
        return np.hstack([uniform_p, 0.0])[np.newaxis, :]

    # Step 1: Infer agent outcome distributions p for accepted contracts via LP
    def infer_p_accept(w, u_p):
        # LP:
        # maximize p @ w
        # s.t sum p = 1
        #     p @ (v - w) = u_p  (agent utility = principal utility)
        #     0 <= p_i <= 1
        c = -np.array(w, dtype=np.float64)  # maximize p@w = minimize -p@w
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u_p], dtype=np.float64)
        bounds = [(0, 1) for _ in range(m)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p = res.x
            p = np.clip(p, 0, None)
            s = p.sum()
            if s > 0:
                p /= s
            else:
                p = np.ones(m) / m
            return p
        else:
            return np.ones(m) / m

    p_accept_list = []
    for _, row in accepted.iterrows():
        p_accept_list.append(infer_p_accept(row['Contract'], row['Principal Utility']))
    p_accept = np.vstack(p_accept_list)  # shape (num_accept, m)

    # Step 2: Infer proxy p for rejected contracts by LP with strict IR<0 constraint
    def infer_p_reject(w):
        # LP:
        # maximize p @ w
        # s.t sum p = 1
        #     p @ (v - w) <= -delta (agent utility < 0)
        #     0 <= p_i <= 1
        delta = 1e-7
        c = -np.array(w, dtype=np.float64)
        A_eq = [np.ones(m)]
        b_eq = [1.0]
        A_ub = [-(v - w)]
        b_ub = [-delta]
        bounds = [(0, 1) for _ in range(m)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')
        if res.success:
            p = res.x
            p = np.clip(p, 0, None)
            s = p.sum()
            if s > 0:
                p /= s
            else:
                p = np.ones(m) / m
            return p
        else:
            return np.ones(m) / m

    p_reject_list = []
    for _, row in rejected.iterrows():
        p_reject_list.append(infer_p_reject(row['Contract']))
    p_reject = np.vstack(p_reject_list) if p_reject_list else np.empty((0, m))

    # Step 3: Combine accepted and rejected p's for clustering
    combined_p = np.vstack([p_accept, p_reject]) if p_reject.size else p_accept.copy()

    # Step 4: Tune DBSCAN eps by silhouette score with Euclidean metric
    best_eps = None
    best_score = -1
    eps_candidates = np.linspace(0.05, 0.3, 6)
    for eps in eps_candidates:
        clustering = DBSCAN(eps=eps, min_samples=2, metric='euclidean').fit(combined_p)
        labels = clustering.labels_
        n_clusters = len(set(labels)) - (1 if -1 in labels else 0)
        if n_clusters < 2:
            continue
        try:
            score = silhouette_score(combined_p[labels != -1], labels[labels != -1])
            if score > best_score:
                best_score = score
                best_eps = eps
        except Exception:
            continue
    if best_eps is None:
        best_eps = 0.15

    clustering = DBSCAN(eps=best_eps, min_samples=2, metric='euclidean').fit(combined_p)
    labels = clustering.labels_

    # Step 5: Filter noise points (-1)
    valid_mask = labels != -1
    filtered_p = combined_p[valid_mask]
    filtered_labels = labels[valid_mask]

    # Step 6: Compute cluster centers (mean p per cluster)
    if len(set(filtered_labels)) == 0:
        # fallback: single cluster mean of accepted p
        centers = np.mean(p_accept, axis=0, keepdims=True)
        centers = np.clip(centers, 0, None)
        s = centers.sum(axis=1, keepdims=True)
        centers /= np.where(s > 0, s, 1)
        n_actions = 1
    else:
        unique_labels = sorted(set(filtered_labels))
        n_actions = len(unique_labels)
        centers = np.zeros((n_actions, m), dtype=np.float64)
        for i, lab in enumerate(unique_labels):
            cluster_ps = filtered_p[filtered_labels == lab]
            c = cluster_ps.mean(axis=0)
            c = np.clip(c, 0, None)
            s = c.sum()
            if s > 0:
                c /= s
            else:
                c = np.ones(m) / m
            centers[i] = c

    # Step 7: Assign accepted logs to closest cluster center by Euclidean distance
    dist_accept = cdist(p_accept, centers, metric='euclidean')
    assigned_clusters = dist_accept.argmin(axis=1)

    accepted_contracts = np.array(accepted['Contract'].tolist())
    rejected_contracts = np.array(rejected['Contract'].tolist()) if rejected.shape[0] > 0 else np.empty((0, m))

    eps_cost = 1e-7
    costs = np.zeros(n_actions, dtype=np.float64)

    # Step 8: Compute minimal costs c_a per action satisfying IR and IC
    for a in range(n_actions):
        p_a = centers[a]

        # IR constraints: accepted contracts assigned to action a
        idx_acc = np.where(assigned_clusters == a)[0]
        if idx_acc.size > 0:
            w_acc = accepted_contracts[idx_acc]
            payoffs_acc = w_acc @ p_a
            max_acc_payoff = payoffs_acc.max()
        else:
            max_acc_payoff = 0.0

        # IC constraints: all rejected contracts
        if rejected_contracts.shape[0] > 0:
            payoffs_rej = rejected_contracts @ p_a
            max_rej_payoff = payoffs_rej.max()
        else:
            max_rej_payoff = -np.inf

        # cost_a >= max_acc_payoff (IR), cost_a > max_rej_payoff (IC)
        cost_a = max(max_acc_payoff, max_rej_payoff + eps_cost)
        costs[a] = max(cost_a, 0.0)

    # Step 9: Iteratively adjust costs to enforce IR and IC constraints
    max_iter = 20
    for _ in range(max_iter):
        violated = False

        # Accepted logs: some action must have utility >= 0
        accept_utils = accepted_contracts @ centers.T - costs  # (n_accept, n_actions)
        max_accept_util = accept_utils.max(axis=1)
        if np.any(max_accept_util < -eps_cost):
            violate_idx = np.where(max_accept_util < -eps_cost)[0]
            for i in violate_idx:
                # For violated accepted log i, find action with max utility
                a = accept_utils[i].argmax()
                # Decrease cost if possible (cost >=0)
                old_cost = costs[a]
                new_cost = max(old_cost + accept_utils[i, a], 0)
                if new_cost < old_cost:
                    costs[a] = new_cost
                    violated = True
            if not violated:
                # Cannot fix by decreasing costs, break
                break

        # Rejected logs: all actions must have utility < 0
        if rejected_contracts.shape[0] > 0:
            reject_utils = rejected_contracts @ centers.T - costs  # (n_reject, n_actions)
            for i in range(rejected_contracts.shape[0]):
                viol_actions = np.where(reject_utils[i] >= -eps_cost)[0]
                if viol_actions.size > 0:
                    violated = True
                    # Increase costs minimally for violating actions
                    for a in viol_actions:
                        costs[a] = max(costs[a], rejected_contracts[i] @ centers[a] + eps_cost)
                    # After update, break to re-check
                    break

        if not violated:
            break

    # Step 10: Final normalization and clipping
    centers = np.clip(centers, 0, None)
    s = centers.sum(axis=1, keepdims=True)
    s[s == 0] = 1
    centers /= s
    costs = np.maximum(costs, 0.0)

    agent_setting = np.hstack([centers, costs[:, None]])
    return agent_setting
```
