```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import AgglomerativeClustering
from sklearn.metrics.pairwise import cosine_distances

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    """
    Infer a valid agent setting (probability distributions over outcomes + costs)
    explaining the historical interaction logs between principal and agent,
    by hierarchical clustering with cosine similarity for stable action grouping,
    and iteratively refining costs enforcing IR and IC constraints.

    Args:
        v (np.ndarray): Principal's reward vector for 5 outcomes, shape (5,)
        content (list[dict]): Each dict contains:
            - 'Contract': 5-dim payment vector,
            - 'Principal Utility': principal utility under contract,
            - 'Agent Action': 1 for accept, -1 for reject.

    Returns:
        np.ndarray: n x 6 matrix: first 5 cols are outcome probabilities (sum=1),
                    last column is agent cost (â‰¥0).
    """
    m_outcomes = v.shape[0]
    logs_df = pd.DataFrame(content)
    accepted = logs_df[logs_df['Agent Action'] == 1].reset_index(drop=True)
    rejected = logs_df[logs_df['Agent Action'] == -1].reset_index(drop=True)

    # If no accepted contracts, return trivial agent with uniform dist and zero cost
    if accepted.empty:
        return np.hstack([np.ones((1, m_outcomes)) / m_outcomes, np.zeros((1, 1))])

    # Step 1: Infer p for each accepted contract by LP
    # p: distribution over outcomes for agent action that accepted contract corresponds to
    def infer_p_for_log(w, u_p):
        # Solve LP:
        # variables: p (length m_outcomes)
        # constraints:
        #   sum p = 1
        #   p @ (v - w) = u_p
        # bounds: p_i in [0,1]
        # objective: maximize p @ w (agent expected payment)
        c_obj = -np.array(w)
        A_eq = [np.ones(m_outcomes), v - np.array(w)]
        b_eq = [1.0, u_p]
        bounds = [(0, 1) for _ in range(m_outcomes)]
        res = linprog(c=c_obj, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p = res.x
            # Numerical fix: clip and re-normalize
            p = np.clip(p, 0, None)
            s = p.sum()
            if s > 0:
                p /= s
            else:
                p = np.ones(m_outcomes) / m_outcomes
            return p
        else:
            # fallback: uniform distribution
            return np.ones(m_outcomes) / m_outcomes

    p_list = [infer_p_for_log(row['Contract'], row['Principal Utility']) for _, row in accepted.iterrows()]
    p_array = np.vstack(p_list)  # shape (n_accept, m_outcomes)

    # Step 2: Hierarchical clustering with cosine distance and thresholding
    # We determine threshold adaptively by inspecting dendrogram linkage distances
    from scipy.cluster.hierarchy import linkage, fcluster

    # Compute cosine distance matrix
    dist_matrix = cosine_distances(p_array)
    # linkage requires condensed distance matrix (upper triangular)
    from scipy.spatial.distance import squareform
    condensed_dist = squareform(dist_matrix, checks=False)
    Z = linkage(condensed_dist, method='average')

    # Determine threshold for clustering by inspecting gaps in linkage distances
    # We want a threshold that yields 2..min(10, n_accept) clusters if possible
    n_accept = p_array.shape[0]
    max_clusters = min(10, n_accept)
    # Extract linkage distances
    dists = Z[:, 2]
    # Candidate thresholds between min and max distances
    min_dist = dists.min()
    max_dist = dists.max()
    thresholds = np.linspace(min_dist, max_dist, 20)

    best_labels = None
    best_score = -np.inf

    def silhouette_cosine(X, labels):
        # Compute silhouette score with cosine similarity manually
        # to avoid dependency on sklearn silhouette_score
        from sklearn.metrics import pairwise_distances
        unique_labels = np.unique(labels)
        if len(unique_labels) == 1:
            return 0.0
        dist = pairwise_distances(X, metric='cosine')
        sil_samples = []
        for i in range(len(X)):
            own_cluster = labels[i]
            in_cluster = labels == own_cluster
            out_clusters = labels != own_cluster
            a = np.mean(dist[i, in_cluster]) if np.sum(in_cluster) > 1 else 0
            b = np.min([np.mean(dist[i, labels == l]) for l in unique_labels if l != own_cluster])
            sil_samples.append((b - a) / max(a, b) if max(a, b) > 0 else 0)
        return np.mean(sil_samples)

    for thresh in thresholds:
        labels = fcluster(Z, t=thresh, criterion='distance') - 1  # zero-based labels
        n_clusters = len(np.unique(labels))
        if 1 < n_clusters <= max_clusters:
            try:
                score = silhouette_cosine(p_array, labels)
                if score > best_score:
                    best_score = score
                    best_labels = labels.copy()
            except Exception:
                pass

    if best_labels is None:
        # fallback: all in one cluster
        best_labels = np.zeros(n_accept, dtype=int)

    labels = best_labels
    unique_labels = np.unique(labels)
    n_actions = len(unique_labels)

    # Step 3: Compute cluster centers (mean p per cluster)
    centers = np.zeros((n_actions, m_outcomes))
    for i, lab in enumerate(unique_labels):
        cluster_ps = p_array[labels == lab]
        center = cluster_ps.mean(axis=0)
        center = np.clip(center, 0, None)
        s = center.sum()
        if s > 0:
            center /= s
        else:
            center = np.ones(m_outcomes) / m_outcomes
        centers[i] = center

    # Step 4: Assign accepted logs to clusters by minimal cosine distance (to refine labels)
    # This ensures each accepted log is assigned to the closest center
    dist_to_centers = cosine_distances(p_array, centers)  # shape (n_accept, n_actions)
    refined_labels = dist_to_centers.argmin(axis=1)
    labels = refined_labels
    unique_labels = np.unique(labels)
    n_actions = len(unique_labels)

    # Recompute centers after refinement
    centers = np.zeros((n_actions, m_outcomes))
    for i, lab in enumerate(unique_labels):
        cluster_ps = p_array[labels == lab]
        center = cluster_ps.mean(axis=0)
        center = np.clip(center, 0, None)
        s = center.sum()
        if s > 0:
            center /= s
        else:
            center = np.ones(m_outcomes) / m_outcomes
        centers[i] = center

    # Step 5: Infer minimal costs c_a satisfying IR and IC constraints
    eps_cost = 1e-10
    contract_acc = np.array(accepted['Contract'].tolist())
    contract_rej = np.array(rejected['Contract'].tolist()) if not rejected.empty else np.empty((0, m_outcomes))

    costs = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = centers[a]
        assigned_acc_idx = np.where(labels == a)[0]
        if assigned_acc_idx.size > 0:
            w_acc = contract_acc[assigned_acc_idx]
            min_acc = np.min(w_acc @ p_a)
        else:
            min_acc = 0.0

        if contract_rej.shape[0] > 0:
            rej_vals = contract_rej @ p_a
            max_rej = np.max(rej_vals)
        else:
            max_rej = -np.inf

        cost_a = max(min_acc, max_rej + eps_cost)
        costs[a] = max(cost_a, 0.0)

    # Step 6: Iteratively refine costs to strictly enforce IR and IC with margin
    max_iter = 30
    margin = 1e-8
    for _ in range(max_iter):
        # Accepted logs: must have some action a with p_a @ w - c_a >= margin
        accept_utils = contract_acc @ centers.T - costs  # shape (n_accept, n_actions)
        accept_feasible = (accept_utils >= margin).any(axis=1)

        # Rejected logs: must have all actions a with p_a @ w - c_a < margin
        if contract_rej.shape[0] > 0:
            reject_utils = contract_rej @ centers.T - costs  # shape (n_reject, n_actions)
            reject_feasible = (reject_utils < margin).all(axis=1)
        else:
            reject_feasible = np.array([True])

        if accept_feasible.all() and reject_feasible.all():
            break

        # Increase costs slightly to enforce constraints
        costs += margin * 10
        costs = np.maximum(costs, 0.0)

    # Final normalization for numerical stability
    centers = np.clip(centers, 0, None)
    centers /= centers.sum(axis=1, keepdims=True)
    costs = np.maximum(costs, 0.0)

    agent_setting = np.hstack([centers, costs[:, None]])
    return agent_setting
```
