```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA


def agent_solver(v: np.ndarray, content: pd.DataFrame) -> np.ndarray:
    n_candidates = 12
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
        """Solve for agent outcome distribution p given wage vector w and utility u."""
        m = len(w)
        A_eq = [np.ones(m), v - w]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m
        res = linprog(np.zeros(m), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    # Step 1: Filter accepted contracts and solve mini LPs
    candidate_ps = []
    accepted_indices = []
    for idx, log in content.iterrows():
        if log['Agent Action'] == 1:
            w_i = np.array(log['Contract'])
            u_i = log['Principal Utility']
            p_i = mini_lp_p(w_i, u_i)
            if p_i is not None:
                candidate_ps.append(p_i)
                accepted_indices.append(idx)

    if not candidate_ps:
        raise ValueError("No valid accepted logs to infer agent strategies.")

    all_p = np.array(candidate_ps)

    # Step 2: Dimensionality reduction for better clustering
    if all_p.shape[0] > 15:
        pca = PCA(n_components=min(6, all_p.shape[0], all_p.shape[1]))
        all_p_reduced = pca.fit_transform(all_p)
        kmeans = KMeans(n_clusters=n_candidates, random_state=42, n_init=15).fit(all_p_reduced)
        labels = kmeans.labels_
    else:
        labels = np.arange(len(candidate_ps))

    # Step 3: Compute centroids in original space
    p0_list = []
    for a in range(n_candidates):
        idx_cluster = np.where(labels == a)[0]
        if len(idx_cluster) > 0:
            p0_list.append(np.mean(all_p[idx_cluster], axis=0))
        else:
            p0_list.append(np.full(m_outcomes, 1.0 / m_outcomes))
    p0 = np.array(p0_list)

    # Step 4: Assign each accepted log to best-fitting action
    assigns = np.full(L, -1, dtype=int)
    for i, log in content.iterrows():
        if log['Agent Action'] == 1:
            w = np.array(log['Contract'])
            utilities = p0 @ w
            assigns[i] = int(np.argmax(utilities))

    # Step 5: Compute IR-consistent cost for each action
    c_ir = np.zeros(n_candidates)
    for a in range(n_candidates):
        idx = np.where(assigns[accepted_indices] == a)[0]
        if len(idx) > 0:
            wages = np.array([content.iloc[accepted_indices[i]]['Contract'] for i in idx]).T
            c_ir[a] = p0[a] @ wages.min(axis=1)
        else:
            c_ir[a] = 0.0

    # Step 6: Ensure rejection consistency
    rej_idx = content[content['Agent Action'] == -1].index.tolist()
    if len(rej_idx) > 0:
        wages_rej = np.array([content.loc[i, 'Contract'] for i in rej_idx]).T
        rej_utils = p0 @ wages_rej
        c_rej = np.max(rej_utils, axis=1)
    else:
        c_rej = np.zeros(n_candidates)

    # Step 7: Final cost = max(IR, rejection threshold)
    c_init = np.maximum(c_ir, c_rej)

    # Step 8: Format agent setting
    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    return agent_setting
```
