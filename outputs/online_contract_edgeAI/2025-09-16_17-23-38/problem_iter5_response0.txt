```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

def agent_solver(v: np.ndarray, content) -> np.ndarray:
    m_outcomes = len(v)
    
    if isinstance(content, pd.DataFrame):
        contracts = np.vstack(content['Contract'].values)
        principal_utils = content['Principal Utility'].values
        agent_actions = content['Agent Action'].values
    else:
        contracts = np.array([log['Contract'] for log in content])
        principal_utils = np.array([log['Principal Utility'] for log in content])
        agent_actions = np.array([log['Agent Action'] for log in content])

    candidate_ps = []
    accepted_indices = agent_actions == 1
    if not np.any(accepted_indices):
        raise ValueError("No accepted contracts to infer agent strategies.")

    accepted_contracts = contracts[accepted_indices]
    accepted_principal_utils = principal_utils[accepted_indices]

    for i in range(len(accepted_contracts)):
        w_i = accepted_contracts[i]
        u_i = accepted_principal_utils[i]
        
        A_eq = np.array([np.ones(m_outcomes), v - w_i])
        b_eq = np.array([1.0, u_i])
        bounds = [(0, 1)] * m_outcomes
        
        res = linprog(np.zeros(m_outcomes), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            candidate_ps.append(res.x)

    if not candidate_ps:
        raise ValueError("No valid LP solutions found for accepted contracts.")
    
    candidate_ps = np.array(candidate_ps)
    
    # PCA for dimensionality reduction before clustering
    if candidate_ps.shape[0] > 2 and candidate_ps.shape[1] > 2:
        pca = PCA(n_components=min(3, candidate_ps.shape[1]))
        candidate_ps_reduced = pca.fit_transform(candidate_ps)
    else:
        candidate_ps_reduced = candidate_ps

    # Adaptive number of clusters using elbow method on reduced space
    max_k = min(15, len(candidate_ps_reduced))
    if max_k < 2:
        n_candidates = 2
    else:
        distortions = []
        K_range = range(2, max_k + 1)
        for k in K_range:
            kmeans = KMeans(n_clusters=k, random_state=42, n_init=10).fit(candidate_ps_reduced)
            distortions.append(kmeans.inertia_)
        
        if len(distortions) > 2:
            diffs = np.diff(distortions)
            diffs2 = np.diff(diffs)
            elbow_idx = np.argmax(diffs2) + 2
            n_candidates = max(2, min(elbow_idx, max_k))
        else:
            n_candidates = min(5, max_k)

    kmeans = KMeans(n_clusters=n_candidates, random_state=42, n_init=10).fit(candidate_ps_reduced)
    # Use original space centers by assigning points to clusters and averaging
    cluster_centers_original = []
    labels = kmeans.labels_
    for i in range(n_candidates):
        cluster_points = candidate_ps[labels == i]
        if len(cluster_points) > 0:
            center = np.mean(cluster_points, axis=0)
        else:
            center = np.mean(candidate_ps, axis=0)
        cluster_centers_original.append(center)
    p0 = np.array(cluster_centers_original)

    # Normalize probabilities
    p0 = np.clip(p0, 0, 1)
    row_sums = p0.sum(axis=1, keepdims=True)
    row_sums[row_sums == 0] = 1
    p0 /= row_sums

    # Assignments for accepted contracts
    assignments = np.full(len(contracts), -1, dtype=int)
    for i in range(len(contracts)):
        if agent_actions[i] == 1:
            contract = contracts[i]
            utilities = p0 @ contract
            assignments[i] = np.argmax(utilities)

    # Compute costs from IR constraints: cost <= p @ w for all accepted contracts
    c_ir = np.full(n_candidates, np.inf)
    for a in range(n_candidates):
        action_indices = np.where(assignments == a)[0]
        if len(action_indices) > 0:
            wages = contracts[action_indices].T  # shape: (m, n_a)
            expected_wages = p0[a] @ wages  # shape: (n_a,)
            c_ir[a] = np.min(expected_wages)
        else:
            c_ir[a] = 0.0

    # Compute costs from IC constraints for rejections: cost >= p @ w for any rejected contract
    c_rej = np.zeros(n_candidates)
    rejected_indices = agent_actions == -1
    if np.any(rejected_indices):
        rejected_wages = contracts[rejected_indices].T  # shape: (m, n_r)
        for a in range(n_candidates):
            expected_wages = p0[a] @ rejected_wages  # shape: (n_r,)
            if len(expected_wages) > 0:
                c_rej[a] = np.max(expected_wages)

    # Compute final costs with margin ensuring non-negative and IR/IC
    slack = 1e-6
    c_final = np.maximum(c_rej, c_ir) + slack
    c_final = np.maximum(c_final, 0)

    # Regularization: Ensure strictly positive cost if agent acts
    for a in range(n_candidates):
        action_indices = np.where(assignments == a)[0]
        if len(action_indices) > 0:
            if c_final[a] <= 0:
                # Use average wage for accepted contracts as a proxy
                avg_wage = np.mean(contracts[action_indices], axis=0)
                c_final[a] = np.dot(p0[a], avg_wage) + slack

    # Final adjustment to avoid numerical issues
    c_final = np.maximum(0, c_final)
    agent_setting = np.hstack([p0, c_final[:, np.newaxis]])
    
    return agent_setting
```
