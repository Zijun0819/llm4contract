```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

def agent_solver(v: np.ndarray, content: pd.DataFrame) -> np.ndarray:
    n_candidates = 10
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
        """Solve for agent outcome distribution p given wage vector w and utility u."""
        m = len(w)
        c = np.zeros(m)
        A_eq = np.array([np.ones(m), v - w])
        b_eq = np.array([1.0, u])
        bounds = [(0, 1)] * m
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    candidate_ps = []
    accepted_wages = []
    accepted_utils = []

    for _, log in content.iterrows():
        w_i = np.array(log['Contract'])
        action = log['Agent Action']
        if action == 1:
            u_i = log['Principal Utility']
            p_i = mini_lp_p(w_i, u_i)
            if p_i is not None:
                candidate_ps.append(p_i)
                accepted_wages.append(w_i)
                accepted_utils.append(u_i)

    if not candidate_ps:
        raise ValueError("No valid accepted logs to infer agent strategies.")

    all_p = np.array(candidate_ps)
    
    if all_p.shape[0] < n_candidates:
        n_candidates = all_p.shape[0]

    pca = PCA(n_components=min(5, all_p.shape[1]))
    all_p_reduced = pca.fit_transform(all_p)
    kmeans = KMeans(n_clusters=n_candidates, random_state=42, n_init=10).fit(all_p_reduced)
    centers_reduced = kmeans.cluster_centers_
    p0 = pca.inverse_transform(centers_reduced)
    p0 = np.clip(p0, 0, 1)
    p0 = p0 / p0.sum(axis=1, keepdims=True)

    assigns = np.full(L, -1, dtype=int)
    for i, (_, log) in enumerate(content.iterrows()):
        if log['Agent Action'] == 1:
            w = np.array(log['Contract'])
            expected_rewards = p0 @ w
            assigns[i] = int(np.argmax(expected_rewards))

    c_ir = np.zeros(n_candidates)
    for a in range(n_candidates):
        idx = np.where(assigns == a)[0]
        if idx.size > 0:
            wages = np.array([content.iloc[i]['Contract'] for i in idx])
            c_ir[a] = np.min([p0[a] @ w for w in wages])
        else:
            c_ir[a] = 0.0

    rej_idx = [i for i, (_, log) in enumerate(content.iterrows()) if log['Agent Action'] == -1]
    if rej_idx:
        wages_rej = np.array([content.iloc[i]['Contract'] for i in rej_idx])
        rej_utils = np.array([p0 @ w for w in wages_rej])
        c_rej = np.max(rej_utils, axis=0)
    else:
        c_rej = np.zeros(n_candidates)

    c_final = np.maximum(c_ir, c_rej)
    c_final = np.clip(c_final, 0, None)

    agent_setting = np.hstack([p0, c_final[:, np.newaxis]])
    return agent_setting
```
