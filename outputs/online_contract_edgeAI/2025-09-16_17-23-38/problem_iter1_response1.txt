```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA


def agent_solver(v: np.ndarray, content: pd.DataFrame) -> np.ndarray:
    n_candidates = 12
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
        """Solve for agent outcome distribution p given wage vector w and utility u."""
        m = len(w)
        A_eq = [np.ones(m), v - w]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m
        res = linprog(np.zeros(m), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    # Step 1: Filter accepted contracts and solve mini LPs
    candidate_ps = []
    accepted_indices = []
    for i, (_, row) in enumerate(content.iterrows()):
        if row['Agent Action'] == 1:
            w_i = np.array(row['Contract'])
            u_i = row['Principal Utility']
            p_i = mini_lp_p(w_i, u_i)
            if p_i is not None:
                candidate_ps.append(p_i)
                accepted_indices.append(i)

    if not candidate_ps:
        raise ValueError("No valid accepted logs to infer agent strategies.")

    all_p = np.array(candidate_ps)

    # Step 2: Reduce dimensionality before clustering for numerical stability
    if all_p.shape[0] > 15:
        pca = PCA(n_components=min(6, all_p.shape[0], all_p.shape[1]))
        all_p_reduced = pca.fit_transform(all_p)
        kmeans = KMeans(n_clusters=n_candidates, random_state=42, n_init=15).fit(all_p_reduced)
        labels = kmeans.labels_
    else:
        kmeans = KMeans(n_clusters=min(n_candidates, all_p.shape[0]), random_state=42, n_init=10).fit(all_p)
        labels = kmeans.labels_
        n_candidates = len(np.unique(labels))

    # Step 3: Compute centroid for each cluster in original space
    p0_centroids = []
    for k in range(n_candidates):
        cluster_points = all_p[labels == k]
        centroid = cluster_points.mean(axis=0)
        p0_centroids.append(centroid)
    p0 = np.array(p0_centroids)

    # Normalize to ensure probabilities sum to 1
    p0 = p0 / p0.sum(axis=1, keepdims=True)

    # Step 4: Assign each accepted log to best-fitting action based on original p
    assigns = np.full(L, -1, dtype=int)
    for idx_in_accepted, original_idx in enumerate(accepted_indices):
        w = np.array(content.iloc[original_idx]['Contract'])
        assigns[original_idx] = int(np.argmax(p0 @ w))

    # Step 5: Compute IR-consistent cost for each action
    c_ir = np.zeros(n_candidates)
    for a in range(n_candidates):
        idx = np.where(assigns == a)[0]
        if idx.size > 0:
            wages = np.array([content.iloc[i]['Contract'] for i in idx])
            c_ir[a] = np.min(p0[a] @ wages.T)
        else:
            c_ir[a] = 0.0

    # Step 6: Ensure all actions are at least as costly as best rejection option per contract
    c_rej = np.zeros(n_candidates)
    for i, (_, row) in enumerate(content.iterrows()):
        if row['Agent Action'] == -1:
            w_rej = np.array(row['Contract'])
            utils = p0 @ w_rej
            best_rej_action = np.argmax(utils)
            c_rej[best_rej_action] = max(c_rej[best_rej_action], utils[best_rej_action])

    c_init = np.maximum(c_ir, c_rej)

    # Ensure non-negative costs
    c_init = np.maximum(c_init, 0.0)

    # Step 7: Format agent setting
    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    return agent_setting
```
