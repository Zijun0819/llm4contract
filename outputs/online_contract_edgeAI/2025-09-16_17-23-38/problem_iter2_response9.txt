```python
import numpy as np
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from scipy.optimize import linprog

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    n_candidates = 10
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
        """Solve for agent outcome distribution p given wage vector w and utility u."""
        m = len(w)
        A_eq = [np.ones(m), v - w]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m
        res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    candidate_ps = []
    accepted_utils = []
    
    for log in content:
        if log['Agent Action'] == 1:
            w_i = np.array(log['Contract'])
            u_i = log['Principal Utility']
            p_i = mini_lp_p(w_i, u_i)
            if p_i is not None:
                candidate_ps.append(p_i)
                accepted_utils.append(p_i @ (v - w_i))

    if not candidate_ps:
        raise ValueError("No valid accepted logs to infer agent strategies.")

    all_p = np.array(candidate_ps)
    
    if len(candidate_ps) >= n_candidates:
        pca = PCA(n_components=min(5, all_p.shape[1]))
        reduced_p = pca.fit_transform(all_p)
        kmeans = KMeans(n_clusters=n_candidates, random_state=42, n_init=15).fit(reduced_p)
        labels = kmeans.labels_
        
        p0 = []
        cluster_utils = []
        for i in range(n_candidates):
            cluster_points = all_p[labels == i]
            if len(cluster_points) > 0:
                cluster_mean = np.mean(cluster_points, axis=0)
                cluster_mean = np.maximum(cluster_mean, 0)
                cluster_mean /= np.sum(cluster_mean)
                p0.append(cluster_mean)
                
                cluster_utils.append(np.mean(np.array(accepted_utils)[labels == i]))
        p0 = np.array(p0)
        n_candidates = p0.shape[0]
    else:
        p0 = all_p
        n_candidates = p0.shape[0]
        cluster_utils = accepted_utils

    assigns = np.full(L, -1, dtype=int)
    for i, log in enumerate(content):
        if log['Agent Action'] == 1:
            w = np.array(log['Contract'])
            expected_utils = p0 @ (v - w)
            assigns[i] = int(np.argmax(expected_utils))

    c_ir = np.zeros(n_candidates)
    for a in range(n_candidates):
        idx = np.where(assigns == a)[0]
        if idx.size > 0:
            wages = np.array([content[i]['Contract'] for i in idx]).T
            c_ir[a] = p0[a] @ wages.min(axis=1)
        else:
            c_ir[a] = cluster_utils[a] if a < len(cluster_utils) else 0.0

    rej_idx = [i for i, log in enumerate(content) if log['Agent Action'] == -1]
    if rej_idx:
        wages_rej = np.array([content[i]['Contract'] for i in rej_idx]).T
        rej_utils = p0 @ wages_rej
        c_rej = rej_utils.max(axis=1)
    else:
        c_rej = np.full(n_candidates, -np.inf)

    c_init = np.maximum(c_ir, c_rej)
    c_init = np.maximum(c_init, 0)

    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    return agent_setting
```
