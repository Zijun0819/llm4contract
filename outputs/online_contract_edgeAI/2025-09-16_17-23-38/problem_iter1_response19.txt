```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

def agent_solver_v2(v: np.ndarray, content: pd.DataFrame) -> np.ndarray:
    n_candidates = 10
    m_outcomes = v.shape[0]
    L = len(content)
    
    def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
        """Solve for agent outcome distribution p given wage vector w and utility u."""
        m = len(w)
        A_eq = [np.ones(m), v - w]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m
        res = linprog(np.zeros(m), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    candidate_ps = []
    accepted_wages = []
    
    for _, log in content.iterrows():
        w_i = np.array(log['Contract'])
        if log['Agent Action'] == 1:
            u_i = log['Principal Utility']
            p_i = mini_lp_p(w_i, u_i)
            if p_i is not None:
                candidate_ps.append(p_i)
                accepted_wages.append(w_i)

    if not candidate_ps:
        raise ValueError("No valid accepted logs to infer agent strategies.")

    all_p = np.array(candidate_ps)
    
    pca = PCA(n_components=min(5, all_p.shape[1]))
    all_p_reduced = pca.fit_transform(all_p)
    
    optimal_k = n_candidates
    kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=15).fit(all_p_reduced)
    p_reduced_centers = kmeans.cluster_centers_
    
    p_centers = pca.inverse_transform(p_reduced_centers)
    
    p_centers = np.clip(p_centers, 0, 1)
    p_centers = p_centers / p_centers.sum(axis=1, keepdims=True)
    
    assigns = np.full(L, -1, dtype=int)
    for i, (_, log) in enumerate(content.iterrows()):
        if log['Agent Action'] == 1:
            w = np.array(log['Contract'])
            assigns[i] = int(np.argmax(p_centers @ w))

    c_ir = np.zeros(optimal_k)
    for a in range(optimal_k):
        idx = np.where(assigns == a)[0]
        if idx.size > 0:
            wages = np.array([content.iloc[i]['Contract'] for i in idx]).T
            utilities = p_centers[a] * (v - wages)
            c_ir[a] = np.max(np.sum(utilities, axis=0))
        else:
            c_ir[a] = 0.0

    c_rej = np.full(optimal_k, -np.inf)
    for i, (_, log) in enumerate(content.iterrows()):
        if log['Agent Action'] == -1:
            w = np.array(log['Contract'])
            utils = p_centers @ (v - w)
            c_rej = np.maximum(c_rej, utils)

    c_rej = np.where(c_rej == -np.inf, 0, c_rej)
    c_final = np.maximum(c_ir, c_rej)

    agent_setting = np.hstack([p_centers, c_final[:, np.newaxis]])
    return agent_setting
```
