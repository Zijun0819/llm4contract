```python
import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from scipy.optimize import linprog
from scipy.spatial.distance import cdist

def agent_solver(v: np.ndarray, content) -> np.ndarray:
    m_outcomes = len(v)
    
    if isinstance(content, pd.DataFrame):
        contracts = np.vstack(content['Contract'].values)
        principal_utils = content['Principal Utility'].values
        agent_actions = content['Agent Action'].values
    else:
        contracts = np.array([log['Contract'] for log in content])
        principal_utils = np.array([log['Principal Utility'] for log in content])
        agent_actions = np.array([log['Agent Action'] for log in content])

    candidate_ps = []
    accepted_indices = agent_actions == 1
    if not np.any(accepted_indices):
        raise ValueError("No accepted contracts to infer agent strategies.")

    accepted_contracts = contracts[accepted_indices]
    accepted_principal_utils = principal_utils[accepted_indices]

    for i in range(len(accepted_contracts)):
        w_i = accepted_contracts[i]
        u_i = accepted_principal_utils[i]
        
        A_eq = np.array([np.ones(m_outcomes), v - w_i])
        b_eq = np.array([1.0, u_i])
        bounds = [(0, 1)] * m_outcomes
        
        res = linprog(np.zeros(m_outcomes), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            candidate_ps.append(res.x)

    if not candidate_ps:
        raise ValueError("No valid LP solutions found for accepted contracts.")
    
    candidate_ps = np.array(candidate_ps)
    
    # PCA for dimensionality reduction
    if candidate_ps.shape[0] > 2:
        pca = PCA(n_components=min(3, candidate_ps.shape[1]))
        candidate_ps_pca = pca.fit_transform(candidate_ps)
    else:
        candidate_ps_pca = candidate_ps

    # Adaptive number of clusters using elbow method
    max_k = min(10, len(candidate_ps_pca))
    if max_k < 2:
        n_candidates = 2
    else:
        distortions = []
        K_range = range(1, max_k + 1)
        for k in K_range:
            kmeans = KMeans(n_clusters=k, random_state=42, n_init=20).fit(candidate_ps_pca)
            distortions.append(kmeans.inertia_)
        
        if len(distortions) > 2:
            diffs = np.diff(distortions)
            diffs2 = np.diff(diffs)
            if len(diffs2) > 0:
                elbow_idx = np.argmax(diffs2) + 1
                n_candidates = max(2, min(elbow_idx, max_k))
            else:
                n_candidates = min(5, max_k)
        else:
            n_candidates = min(5, max_k)

    kmeans = KMeans(n_clusters=n_candidates, random_state=42, n_init=20).fit(candidate_ps_pca)
    if candidate_ps.shape[0] > 2 and hasattr(pca, 'inverse_transform'):
        p0_pca = kmeans.cluster_centers_
        p0 = pca.inverse_transform(p0_pca)
    else:
        p0 = kmeans.cluster_centers_

    # Normalize probabilities to sum to 1
    p0 = np.clip(p0, 0, 1)
    row_sums = p0.sum(axis=1, keepdims=True)
    row_sums[row_sums == 0] = 1
    p0 = p0 / row_sums

    # Assign each accepted contract to the closest cluster center
    assignments = np.full(len(contracts), -1, dtype=int)
    accepted_ps = candidate_ps
    if len(accepted_ps) > 0 and len(p0) > 0:
        distances = cdist(accepted_ps, p0, 'euclidean')
        cluster_assignments = np.argmin(distances, axis=1)
        
        j = 0
        for i in range(len(contracts)):
            if agent_actions[i] == 1:
                assignments[i] = cluster_assignments[j]
                j += 1

    # Compute costs: IR and IC with slack variables
    c_final = np.zeros(n_candidates)
    slack = 1e-6

    for a in range(n_candidates):
        # IR: expected wage >= cost
        ir_constraints = []
        action_indices = np.where(assignments == a)[0]
        if len(action_indices) > 0:
            wages = contracts[action_indices]
            expected_wages = np.dot(wages, p0[a])
            ir_constraints.append(np.max(expected_wages))  

        # IC for rejections: if agent rejects, then for all actions, expected wage < cost
        ic_constraints = []
        rejected_indices = np.where(agent_actions == -1)[0]
        if len(rejected_indices) > 0:
            rej_wages = contracts[rejected_indices]
            expected_rej = np.dot(rej_wages, p0[a])
            ic_constraints.append(np.max(expected_rej))

        # Compute cost with constraints and slack
        c_val = -np.inf
        if ir_constraints:
            c_val = max(c_val, max(ir_constraints))
        if ic_constraints:
            c_val = max(c_val, max(ic_constraints))
        
        c_final[a] = max(0, c_val) + slack

        # Regularization: ensure strictly positive cost if action is taken
        if len(action_indices) > 0 and c_final[a] <= 0:
            avg_wage = np.mean(contracts[action_indices], axis=0)
            c_final[a] = np.dot(p0[a], avg_wage) + slack

    # Final regularization: ensure non-negative
    c_final = np.maximum(0, c_final)
    
    agent_setting = np.hstack([p0, c_final[:, np.newaxis]])
    return agent_setting
```
