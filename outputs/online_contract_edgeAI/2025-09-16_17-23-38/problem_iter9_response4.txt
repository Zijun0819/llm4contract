```python
import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from scipy.optimize import linprog
from scipy.spatial.distance import cdist

def agent_solver(v: np.ndarray, content) -> np.ndarray:
    m_outcomes = len(v)
    
    if isinstance(content, pd.DataFrame):
        contracts = np.vstack(content['Contract'].values)
        principal_utils = content['Principal Utility'].values
        agent_actions = content['Agent Action'].values
    else:
        contracts = np.array([log['Contract'] for log in content])
        principal_utils = np.array([log['Principal Utility'] for log in content])
        agent_actions = np.array([log['Agent Action'] for log in content])

    candidate_ps = []
    accepted_indices = agent_actions == 1
    if not np.any(accepted_indices):
        raise ValueError("No accepted contracts to infer agent strategies.")

    accepted_contracts = contracts[accepted_indices]
    accepted_principal_utils = principal_utils[accepted_indices]

    for i in range(len(accepted_contracts)):
        w_i = accepted_contracts[i]
        u_i = accepted_principal_utils[i]
        
        A_eq = np.array([np.ones(m_outcomes), v - w_i])
        b_eq = np.array([1.0, u_i])
        bounds = [(0, 1)] * m_outcomes
        
        res = linprog(np.zeros(m_outcomes), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            candidate_ps.append(res.x)

    if not candidate_ps:
        raise ValueError("No valid LP solutions found for accepted contracts.")
    
    candidate_ps = np.array(candidate_ps)
    
    # PCA for dimensionality reduction
    n_components = min(3, candidate_ps.shape[0], candidate_ps.shape[1])
    if n_components >= 2:
        pca = PCA(n_components=n_components)
        candidate_ps_pca = pca.fit_transform(candidate_ps)
    else:
        candidate_ps_pca = candidate_ps

    # Adaptive clustering
    n_candidates = min(10, len(candidate_ps_pca))
    if n_candidates < 1:
        n_candidates = 1
    kmeans = KMeans(n_clusters=n_candidates, n_init=20, random_state=42).fit(candidate_ps_pca)
    
    if n_components >= 2:
        p0_pca = kmeans.cluster_centers_
        p0 = pca.inverse_transform(p0_pca)
    else:
        p0 = kmeans.cluster_centers_

    # Normalize probabilities
    p0 = np.clip(p0, 0, 1)
    row_sums = p0.sum(axis=1, keepdims=True)
    row_sums[row_sums == 0] = 1
    p0 /= row_sums

    # Assignments for all contracts
    utilities_matrix = p0 @ contracts.T  # (n_candidates, n_contracts)
    assignments = np.argmax(utilities_matrix, axis=0)  # (n_contracts,)

    # Compute costs from IR constraints
    c_ir = np.full(n_candidates, -np.inf)
    for a in range(n_candidates):
        action_indices = np.where((assignments == a) & (agent_actions == 1))[0]
        if len(action_indices) > 0:
            wages = contracts[action_indices]  # (n, 12)
            wage_lower_bounds = np.min(wages, axis=0)  # (12,)
            c_ir[a] = np.dot(p0[a], wage_lower_bounds)

    # Compute costs from IC constraints for rejections
    c_rej = np.full(n_candidates, -np.inf)
    rejected_indices = agent_actions == -1
    if np.any(rejected_indices):
        rejected_wages = contracts[rejected_indices]  # (n_rej, 12)
        for a in range(n_candidates):
            expected_wages = p0[a] @ rejected_wages.T  # (n_rej,)
            if len(expected_wages) > 0:
                c_rej[a] = np.max(expected_wages)

    # Compute final costs with slack
    slack = 1e-6
    c_candidates = np.maximum(c_ir, c_rej) + slack

    # Ensure strictly positive costs for actions that are taken
    for a in range(n_candidates):
        action_indices = np.where(assignments == a)[0]
        if len(action_indices) > 0:
            if not np.isfinite(c_candidates[a]) or c_candidates[a] <= 0:
                avg_wage = np.mean(contracts[action_indices], axis=0)
                c_candidates[a] = np.dot(p0[a], avg_wage) + slack

    # Final non-negative enforcement
    c_candidates = np.maximum(0, c_candidates)

    agent_setting = np.hstack([p0, c_candidates[:, np.newaxis]])
    
    return agent_setting
```
