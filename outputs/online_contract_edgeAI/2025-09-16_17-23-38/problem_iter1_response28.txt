```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

def agent_solver_v2(v: np.ndarray, content: pd.DataFrame) -> np.ndarray:
    n_candidates = 12
    m_outcomes = v.shape[0]
    L = len(content)
    
    def infer_p(w: np.ndarray, u: float) -> np.ndarray | None:
        """Infer agent's outcome distribution p under contract w with principal utility u."""
        A_eq = np.vstack([np.ones(m_outcomes), v - w]).T
        b_eq = np.array([1.0, u])
        c = w
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=[A_eq[:, 0], A_eq[:, 1]], b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            return res.x
        return None

    accepted_ps = []
    for _, log in content.iterrows():
        if log['Agent Action'] == 1:
            w = np.array(log['Contract'])
            u = log['Principal Utility']
            p = infer_p(w, u)
            if p is not None:
                accepted_ps.append(p)

    if len(accepted_ps) == 0:
        raise ValueError("No accepted contracts to infer from.")
    
    accepted_ps = np.array(accepted_ps)
    
    # Use PCA for dimensionality reduction before clustering for better generalization
    if accepted_ps.shape[0] > 20:
        pca = PCA(n_components=min(6, accepted_ps.shape[0], accepted_ps.shape[1]))
        reduced_ps = pca.fit_transform(accepted_ps)
        kmeans = KMeans(n_clusters=n_candidates, n_init=15, random_state=42).fit(reduced_ps)
        labels = kmeans.labels_
    else:
        kmeans = KMeans(n_clusters=min(n_candidates, len(accepted_ps)), n_init=10, random_state=42).fit(accepted_ps)
        labels = kmeans.labels_
        n_candidates = len(np.unique(labels))

    p_centroids = np.array([accepted_ps[labels == i].mean(axis=0) for i in range(n_candidates)])
    p_centroids = p_centroids / p_centroids.sum(axis=1, keepdims=True)

    assigns = np.full(L, -1)
    c_a = np.zeros(n_candidates)
    for i, (_, log) in enumerate(content.iterrows()):
        if log['Agent Action'] == 1:
            w = np.array(log['Contract'])
            utilities = p_centroids @ w
            best_action = np.argmax(utilities)
            assigns[i] = best_action
            c_a[best_action] = max(c_a[best_action], p_centroids[best_action] @ w)

    c_r = np.zeros(n_candidates)
    for _, log in content.iterrows():
        if log['Agent Action'] == -1:
            w = np.array(log['Contract'])
            utilities = p_centroids @ w
            c_r = np.maximum(c_r, utilities)

    final_costs = np.maximum(c_a, c_r)
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
