```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA


def agent_solver(v: np.ndarray, content: pd.DataFrame) -> np.ndarray:
    n_candidates = 12
    m = v.shape[0]
    L = len(content)

    def infer_p(w: np.ndarray, util: float) -> np.ndarray | None:
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, util])
        c = w
        bounds = [(0, 1)] * m
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    candidate_ps = []
    accepted = []
    for idx, row in content.iterrows():
        if row['Agent Action'] == 1:
            p = infer_p(np.array(row['Contract']), row['Principal Utility'])
            if p is not None:
                candidate_ps.append(p)
                accepted.append(idx)

    if not candidate_ps:
        raise ValueError("No valid accepted contracts.")

    ps = np.array(candidate_ps)
    if ps.shape[0] < n_candidates:
        n_candidates = ps.shape[0]

    pca = PCA(n_components=min(n_candidates, ps.shape[1]))
    ps_reduced = pca.fit_transform(ps)
    kmeans = KMeans(n_clusters=n_candidates, n_init=10, random_state=42).fit(ps_reduced)
    labels = kmeans.labels_

    p_centroids_reduced = kmeans.cluster_centers_
    p_centroids = pca.inverse_transform(p_centroids_reduced)
    p_centroids = np.clip(p_centroids, 0, 1)
    p_centroids = p_centroids / p_centroids.sum(axis=1, keepdims=True)

    c = np.zeros(n_candidates)
    for a in range(n_candidates):
        idx_a = [accepted[i] for i in range(len(labels)) if labels[i] == a]
        if idx_a:
            wages = np.array([content.iloc[i]['Contract'] for i in idx_a])
            min_w = wages.min(axis=0)
            c[a] = p_centroids[a] @ min_w

    for idx, row in content.iterrows():
        if row['Agent Action'] == -1:
            wages = np.array(row['Contract'])
            utils = p_centroids @ wages
            if np.max(utils) >= 0:
                a_best = np.argmax(utils)
                c[a_best] = max(c[a_best], np.max(utils))

    agent_setting = np.hstack([p_centroids, c[:, np.newaxis]])
    return agent_setting
```
