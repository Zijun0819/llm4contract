[*] Running ...
[*] Dataset loaded: E:\Coding\pythonProject\llm4contract\problems\online_contract_edgeAI\dataset\train_01.pkl with 3 instances.
→ Best principal utility: 0.0006193891649213826
D:\Software\anaconda3\envs\llm4contract\lib\site-packages\sklearn\cluster\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(
D:\Software\anaconda3\envs\llm4contract\lib\site-packages\sklearn\cluster\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(
D:\Software\anaconda3\envs\llm4contract\lib\site-packages\sklearn\cluster\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(
D:\Software\anaconda3\envs\llm4contract\lib\site-packages\sklearn\cluster\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(
D:\Software\anaconda3\envs\llm4contract\lib\site-packages\sklearn\cluster\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(
D:\Software\anaconda3\envs\llm4contract\lib\site-packages\sklearn\cluster\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(
D:\Software\anaconda3\envs\llm4contract\lib\site-packages\sklearn\cluster\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(
D:\Software\anaconda3\envs\llm4contract\lib\site-packages\sklearn\cluster\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(
D:\Software\anaconda3\envs\llm4contract\lib\site-packages\sklearn\cluster\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(
D:\Software\anaconda3\envs\llm4contract\lib\site-packages\sklearn\cluster\_kmeans.py:1419: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(
The running time is：0.8158 seconds
The inferred contract is [[-2.64744253e-01  6.09700204e-01  6.69512678e-04 -2.20819871e-01
  -8.42076452e-03 -6.98205805e-02  1.38366594e-04]
 [-2.21300937e-01 -4.09186598e-01 -1.41067390e-01  8.46632335e-02
  -1.05880984e-01 -1.21562230e-01  2.39225245e-04]
 [ 6.00411375e-01  8.70531280e-02 -2.91214080e-02  3.20399652e-02
  -3.46430865e-02 -1.07261193e-01  2.84820371e-04]
 [-1.86113469e-01 -2.20667384e-01 -1.63688697e-01 -1.48577009e-01
   4.07305526e-01  1.97707499e-02  4.25570280e-04]
 [-1.82598847e-01  2.53790691e-01  9.09916868e-02  4.64730312e-01
   1.35821548e-01  5.88612634e-03  2.88982919e-04]
 [-1.81526681e-01 -5.11465196e-02 -7.91840986e-02 -1.57168016e-03
  -1.62751152e-01  3.72349674e-01  3.12514658e-04]
 [-1.54283563e-01 -2.63180680e-01  5.02702990e-01 -1.08118950e-01
  -1.81193292e-02 -3.28761575e-02  4.05560760e-04]
 [ 3.64942670e-01 -1.62511999e-01 -1.02029282e-01  1.80782777e-02
  -8.21682702e-02 -6.85105561e-02  4.57511532e-04]
 [ 5.71832387e-01  9.51701675e-02  4.95791719e-02 -7.30142115e-02
   5.21920339e-02  1.21935728e-01  2.64194023e-04]
 [-3.46618683e-01  6.09789903e-02 -1.28852485e-01 -4.74100680e-02
  -1.83335521e-01 -1.19911561e-01  4.78658491e-04]]
Traceback (most recent call last):
  File "E:\Coding\pythonProject\llm4contract\problems\online_contract_edgeAI\eval.py", line 162, in <module>
    obj, _ = evaluate_llm((_p, _c, _v, _contract_logs))
  File "E:\Coding\pythonProject\llm4contract\problems\online_contract_edgeAI\eval.py", line 107, in evaluate_llm
    _, inferred_contract = contract_oracle_solver(inferred_p, inferred_c, v)
  File "E:\Coding\pythonProject\llm4contract\problems\online_contract_edgeAI\eval.py", line 59, in contract_oracle_solver
    res = linprog(
  File "D:\Software\anaconda3\envs\llm4contract\lib\site-packages\scipy\optimize\_linprog.py", line 649, in linprog
    lp, solver_options = _parse_linprog(lp, options, meth)
  File "D:\Software\anaconda3\envs\llm4contract\lib\site-packages\scipy\optimize\_linprog_util.py", line 1026, in _parse_linprog
    lp = _clean_inputs(lp._replace(A_ub=A_ub, A_eq=A_eq))
  File "D:\Software\anaconda3\envs\llm4contract\lib\site-packages\scipy\optimize\_linprog_util.py", line 462, in _clean_inputs
    raise ValueError(
ValueError: Invalid input for linprog: unable to interpret bounds with this dimension tuple: (12, 2).
