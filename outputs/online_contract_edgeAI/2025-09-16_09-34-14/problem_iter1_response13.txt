```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans


def agent_solver_v2(v: np.ndarray, content: pd.DataFrame) -> np.ndarray:
    n_candidates = 7
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
        m = len(w)
        A_eq = [np.ones(m), v - w]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m
        res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    def infer_p(w: np.ndarray, u: float) -> np.ndarray:
        p = mini_lp_p(w, u)
        if p is None:
            return np.ones(m_outcomes) / m_outcomes
        else:
            return p

    def agent_utility(w: np.ndarray, p: np.ndarray, c: float) -> float:
        return np.dot(w, p) - c

    candidate_ps = []
    for index, log in content.iterrows():
        if log['Agent Action'] == 1:
            w_i = log['Contract']
            u_i = log['Principal Utility']
            p_i = infer_p(w_i, u_i)
            candidate_ps.append(p_i)

    if not candidate_ps:
        raise ValueError("No valid accepted logs to infer agent strategies.")

    all_p = np.array(candidate_ps)

    kmeans = KMeans(n_clusters=n_candidates, random_state=0, n_init=10).fit(all_p)
    p0 = kmeans.cluster_centers_

    assigns = np.full(L, -1, dtype=int)
    for i, log in content.iterrows():
        if log['Agent Action'] == 1:
            w = log['Contract']
            assigns[i] = int(np.argmax([np.dot(p, w) for p in p0]))

    c_ir = np.zeros(n_candidates)
    for a in range(n_candidates):
        idx = np.where(assigns == a)[0]
        if idx.size > 0:
            wages = np.array([content.iloc[i]['Contract'] for i in idx]).T
            c_ir[a] = np.min([np.dot(p0[a], w) for w in wages.T])
        else:
            c_ir[a] = 0.0

    rej_idx = [i for i, log in content.iterrows() if log['Agent Action'] == -1]
    c_rej = np.zeros(n_candidates)
    if rej_idx:
        wages_rej = np.array([content.iloc[i]['Contract'] for i in rej_idx]).T
        for a in range(n_candidates):
            utils = [agent_utility(w, p0[a], c_ir[a]) for w in wages_rej.T]
            c_rej[a] = np.max(utils)

    c = np.maximum(c_ir, c_rej)

    agent_setting = np.hstack([p0, c[:, np.newaxis]])
    return agent_setting
```
