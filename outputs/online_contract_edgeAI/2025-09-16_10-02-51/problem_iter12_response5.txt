```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    m_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        if u_p <= 1e-12:
            continue
        c = -np.array(w)
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(12, len(p_list))
    if n_candidates > 0:
        gmm = GaussianMixture(n_components=n_candidates, covariance_type='diag', random_state=42)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    cost_upper_bounds = np.full(n_actions, np.inf)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        max_util_rejected = -np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        for log in rejected_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            max_util_rejected = max(max_util_rejected, agent_util)
        cost_lower_bounds[a] = max(0, min_util - 1e-10) if min_util != np.inf else 0.0
        if max_util_rejected != -np.inf:
            cost_upper_bounds[a] = min(cost_upper_bounds[a], max_util_rejected + 1e-10)
    
    def objective(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            best_action = np.argmax(utils)
            if log['Agent Action'] == 1:
                if max_util < 0:
                    violation += 1e6 * (-max_util)
                for a in range(n_actions):
                    if a != best_action:
                        util_diff = np.dot(p_centroids[a], w) - costs[a] - max_util
                        if util_diff > 1e-12:
                            violation += 1e6 * util_diff
            else:
                if max_util >= 0:
                    violation += 1e6 * max_util
        return violation
    
    bounds = Bounds(cost_lower_bounds, cost_upper_bounds)
    res = minimize(objective, cost_lower_bounds, method='SLSQP', bounds=bounds, options={'maxiter': 10000, 'ftol': 1e-12})
    final_costs = res.x if res.success else cost_lower_bounds
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
