```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    
    if not accepted_logs:
        return np.hstack([np.ones((1, m_outcomes)) / m_outcomes, np.zeros((1, 1))])
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -np.array(w)
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = minimize(lambda p: np.dot(c, p), np.ones(m_outcomes)/m_outcomes, 
                      constraints=[{'type': 'eq', 'fun': lambda p: np.dot(np.ones(m_outcomes), p) - 1},
                                  {'type': 'eq', 'fun': lambda p: np.dot(v, p) - u_p}],
                      bounds=bounds, method='SLSQP')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_actions = min(12, len(p_list))
    if len(p_list) > n_actions:
        from sklearn.cluster import KMeans
        kmeans = KMeans(n_clusters=n_actions, random_state=42, n_init=10)
        labels = kmeans.fit_predict(p_array)
        p_centroids = np.array([p_array[labels == i].mean(axis=0) for i in range(n_actions)])
    else:
        p_centroids = p_array
    
    n_actions = len(p_centroids)
    cost_lb = np.zeros(n_actions)
    epsilon = 1e-6
    
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        cost_lb[a] = max(0, min_util - epsilon) if min_util != np.inf else 0.0
    
    def ic_ir_violation(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            best_util = np.max(agent_utils)
            if log['Agent Action'] == 1:
                if best_util < 0:
                    violation += -best_util
            else:
                if best_util >= 0:
                    violation += best_util
        return violation
    
    constraints = LinearConstraint(np.eye(n_actions), cost_lb, np.inf)
    res = minimize(ic_ir_violation, cost_lb, method='trust-constr', bounds=Bounds(cost_lb, np.inf), constraints=constraints, options={'maxiter': 1000})
    final_costs = res.x if res.success else cost_lb
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
