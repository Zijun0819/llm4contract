```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture

def agent_solver(v, content):
    v = np.asarray(v)
    n_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -np.array(w)
        A_eq = np.vstack([np.ones(n_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(n_outcomes) / n_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(10, max(1, len(p_list)))
    
    gmm = GaussianMixture(n_components=n_candidates, covariance_type='diag', random_state=42, n_init=3)
    gmm.fit(p_array)
    p_centroids = gmm.means_
    n_actions = p_centroids.shape[0]
    
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        cost_lower_bounds[a] = max(0, min_util) if min_util != np.inf else 0.0
    
    def objective(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_agent_util = np.max(agent_utils)
            if log['Agent Action'] == 1:
                if max_agent_util < 0:
                    violation += -max_agent_util
            else:
                if max_agent_util >= 0:
                    violation += max_agent_util
        return violation
    
    bounds = Bounds(cost_lower_bounds, np.full(n_actions, np.inf))
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lower_bounds}]
    res = minimize(objective, cost_lower_bounds, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 1000, 'ftol': 1e-8})
    final_costs = res.x
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
