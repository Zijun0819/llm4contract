```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds, LinearConstraint
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.asarray(v)
    n_outcomes = len(v)
    
    if not content:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.zeros((1, 1))])
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    inferred_probs = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_p = log['Principal Utility']
        if u_p <= 1e-12:
            continue
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0.0, 1.0)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            inferred_probs.append(res.x)
    
    if not inferred_probs:
        inferred_probs = [np.ones(n_outcomes) / n_outcomes]
    
    p_array = np.array(inferred_probs)
    n_components = min(10, len(inferred_probs))
    if n_components > 0:
        gmm = GaussianMixture(n_components=n_components, covariance_type='diag', n_init=10, max_iter=1000, random_state=42)
        gmm.fit(p_array)
        centroids = gmm.means_
    else:
        centroids = np.ones((1, n_outcomes)) / n_outcomes
    
    n_actions = centroids.shape[0]
    
    epsilon = 1e-10
    cost_lb = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = centroids[a]
        min_accepted_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util >= -epsilon:
                min_accepted_util = min(min_accepted_util, util)
        cost_lb[a] = max(0.0, min_accepted_util - epsilon) if min_accepted_util != np.inf else 0.0
    
    constraints_list = []
    for log in content:
        w = np.array(log['Contract'])
        agent_utils = np.array([np.dot(centroids[a], w) for a in range(n_actions)])
        best_action = np.argmax(agent_utils)
        for a in range(n_actions):
            if a != best_action:
                constraint_vec = np.zeros(n_actions)
                constraint_vec[best_action] = 1
                constraint_vec[a] = -1
                constraint_val = agent_utils[best_action] - agent_utils[a]
                constraints_list.append((constraint_vec, constraint_val))
    
    if constraints_list:
        A_ic = np.vstack([c[0] for c in constraints_list])
        b_ic = np.array([c[1] for c in constraints_list])
        ic_constraint = LinearConstraint(A_ic, lb=-np.inf, ub=b_ic)
    else:
        ic_constraint = LinearConstraint(np.eye(n_actions), lb=np.zeros(n_actions), ub=np.inf)
    
    def objective(costs):
        total_violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    total_violation += (epsilon - max_util) ** 2
            else:
                if max_util >= -epsilon:
                    total_violation += (max_util + epsilon) ** 2
        return total_violation
    
    bounds = Bounds(cost_lb, np.full(n_actions, np.inf))
    res = minimize(objective, cost_lb, method='trust-constr', bounds=bounds, constraints=ic_constraint, options={'maxiter': 10000, 'verbose': 0})
    final_costs = res.x if res.success else cost_lb
    
    return np.hstack([centroids, final_costs.reshape(-1, 1)])
```
