```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture
from sklearn.metrics import silhouette_score
from scipy.spatial.distance import cdist

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        return np.zeros((1, n_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(n_outcomes) / n_outcomes]
    
    p_array = np.array(p_list)
    
    if len(p_array) > 1:
        max_n = min(12, len(p_array))
        best_score = -np.inf
        best_gmm = None
        for n_components in range(1, max_n + 1):
            gmm = GaussianMixture(n_components=n_components, random_state=42)
            labels = gmm.fit_predict(p_array)
            if len(np.unique(labels)) > 1:
                score = silhouette_score(p_array, labels)
                if score > best_score:
                    best_score = score
                    best_gmm = gmm
            else:
                if best_gmm is None:
                    best_gmm = gmm
        if best_gmm is not None:
            p_centroids = best_gmm.means_
        else:
            p_centroids = np.mean(p_array, axis=0, keepdims=True)
    else:
        p_centroids = p_array
    
    p_centroids = np.clip(p_centroids, 0, 1)
    row_sums = p_centroids.sum(axis=1, keepdims=True)
    p_centroids = np.divide(p_centroids, row_sums, where=row_sums != 0)
    n_actions = len(p_centroids)
    
    epsilon = 1e-8
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        cost_lower_bounds[a] = max(0, min_util - epsilon) if min_util != np.inf else 0.0
    
    def objective(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_agent_util = np.max(agent_utils)
            if log['Agent Action'] == 1:
                if max_agent_util < -epsilon:
                    violation += (-max_agent_util) ** 2
            else:
                if max_agent_util >= epsilon:
                    violation += (max_agent_util) ** 2
        return violation
    
    bounds = Bounds(cost_lower_bounds, np.full(n_actions, np.inf))
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lower_bounds}]
    res = minimize(objective, cost_lower_bounds, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 10000, 'ftol': 1e-12})
    final_costs = res.x if res.success else cost_lower_bounds
    final_costs = np.maximum(final_costs, 0)
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
