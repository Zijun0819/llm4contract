```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    if not content:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = minimize(lambda p: np.dot(c, p), np.ones(m_outcomes)/m_outcomes, 
                       constraints=[{'type': 'eq', 'fun': lambda p: np.sum(p) - 1},
                                    {'type': 'eq', 'fun': lambda p: np.dot(v, p) - u_p}],
                       bounds=bounds, method='SLSQP')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(8, len(p_list))
    gmm = GaussianMixture(n_components=n_candidates, covariance_type='diag', random_state=42)
    gmm.fit(p_array)
    p_centroids = gmm.means_
    n_actions = len(p_centroids)
    
    cost_lb = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_agent_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_agent_util = min(min_agent_util, agent_util)
        cost_lb[a] = max(0, min_agent_util - 1e-8) if min_agent_util != np.inf else 0.0
    
        for log in rejected_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                cost_lb[a] = max(cost_lb[a], agent_util + 1e-8)
    
    initial_costs = cost_lb.copy()
    
    def constraint_violation(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            utils = [np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)]
            max_util = max(utils)
            best_action = np.argmax(utils)
            action_util = utils[best_action]
            
            if log['Agent Action'] == 1:
                if action_util < -1e-8:
                    violation += max(0, -action_util)
                for a in range(n_actions):
                    if a != best_action and utils[a] > action_util + 1e-8:
                        violation += max(0, utils[a] - action_util)
            else:
                if max_util >= -1e-8:
                    violation += max(0, max_util + 1e-8)
        return violation
    
    bounds = Bounds(cost_lb, np.full(n_actions, np.inf))
    res = minimize(constraint_violation, initial_costs, method='SLSQP', bounds=bounds, options={'maxiter': 1000})
    
    if res.success:
        final_costs = res.x
    else:
        final_costs = initial_costs
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
