```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds, LinearConstraint
from sklearn.mixture import GaussianMixture

def agent_solver(v, content):
    m_outcomes = len(v)
    epsilon = 1e-8
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        uniform_p = np.ones(m_outcomes) / m_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.zeros((1, 1))])
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0.0, 1.0)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(12, len(p_list))
    if n_candidates > 0:
        gmm = GaussianMixture(n_components=n_candidates, random_state=42, n_init=10, max_iter=1000, tol=1e-8)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    
    n_actions = len(p_centroids)
    cost_lb = np.zeros(n_actions)
    cost_ub = np.full(n_actions, np.inf)
    
    for a in range(n_actions):
        p_a = p_centroids[a]
        accepted_utils_a = [np.dot(p_a, np.array(log['Contract'])) for log in accepted_logs]
        rejected_utils_a = [np.dot(p_a, np.array(log['Contract'])) for log in rejected_logs]
        
        min_accepted = np.min(accepted_utils_a) if accepted_utils_a else np.inf
        max_rejected = np.max(rejected_utils_a) if rejected_utils_a else -np.inf
        
        if min_accepted != np.inf:
            cost_lb[a] = max(0.0, min_accepted)
        else:
            cost_lb[a] = 0.0
        
        if max_rejected != -np.inf:
            cost_ub[a] = max_rejected
    
    def constraint_violation(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            best_action = np.argmax(agent_utils)
            
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    violation += (max_util + epsilon) ** 2
                for a in range(n_actions):
                    if a != best_action and agent_utils[a] > agent_utils[best_action] + epsilon:
                        violation += (agent_utils[a] - agent_utils[best_action]) ** 2
            else:
                if max_util >= -epsilon:
                    violation += (max_util + epsilon) ** 2
        return violation
    
    initial_costs = np.clip((cost_lb + cost_ub) / 2, cost_lb, cost_ub)
    bounds = Bounds(cost_lb, cost_ub)
    
    res = minimize(constraint_violation, initial_costs, method='SLSQP', bounds=bounds, options={'maxiter': 10000, 'ftol': 1e-12})
    
    if res.success:
        final_costs = res.x
    else:
        final_costs = cost_lb
    
    final_costs = np.maximum(final_costs, 0.0)
    
    return np.hstack([p_centroids, final_costs.reshape(-1, 1)])
```
