```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint
from sklearn.mixture import GaussianMixture

def agent_solver(v, content):
    v = np.asarray(v)
    m_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    prob_list = []
    for i, contract in enumerate(accepted_contracts):
        w = np.array(contract)
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = minimize(lambda p: np.dot(c, p), 
                      x0=np.ones(m_outcomes)/m_outcomes, 
                      constraints=[{'type': 'eq', 'fun': lambda p: np.dot(np.ones(m_outcomes), p) - 1},
                                  {'type': 'eq', 'fun': lambda p: np.dot(v, p) - u_p}],
                      bounds=bounds,
                      method='SLSQP')
        if res.success:
            prob_list.append(res.x)
    
    if not prob_list:
        prob_list = [np.ones(m_outcomes) / m_outcomes]
    
    prob_array = np.array(prob_list)
    n_candidates = min(12, len(prob_list))
    if n_candidates > 0:
        gmm = GaussianMixture(n_components=n_candidates, random_state=42)
        gmm.fit(prob_array)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    epsilon = 1e-6
    for a_idx, p_a in enumerate(p_centroids):
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        cost_lower_bounds[a_idx] = max(0, min_util - epsilon) if min_util != np.inf else 0.0
    
    def constraint_violation(costs):
        total_violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p, w) - cost for p, cost in zip(p_centroids, costs)])
            best_util = np.max(agent_utils)
            if log['Agent Action'] == 1:
                if best_util < 0:
                    total_violation += -best_util
            else:
                if best_util >= 0:
                    total_violation += best_util
        return total_violation
    
    bounds = Bounds(cost_lower_bounds, np.full(n_actions, np.inf))
    constraints = [LinearConstraint(np.eye(n_actions), cost_lower_bounds, np.inf)]
    
    res = minimize(constraint_violation, cost_lower_bounds, method='trust-constr', 
                   bounds=bounds, constraints=constraints, options={'maxiter': 1000})
    
    final_costs = res.x if res.success else cost_lower_bounds
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
