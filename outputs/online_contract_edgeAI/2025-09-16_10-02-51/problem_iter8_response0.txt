```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture

def agent_solver(v, content):
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        return np.zeros((1, n_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -np.array(w)
        A_eq = np.vstack([np.ones(n_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(n_outcomes) / n_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(12, len(p_list))
    if n_candidates > 0:
        gmm = GaussianMixture(n_components=n_candidates, random_state=42, max_iter=1000, n_init=3)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, n_outcomes)) / n_outcomes
    
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        cost_lower_bounds[a] = max(0.0, min_util) if min_util != np.inf else 0.0
    
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            agent_util = np.dot(p_centroids[a], w)
            if agent_util >= cost_lower_bounds[a]:
                cost_lower_bounds[a] = agent_util + 1e-8
    
    def objective(costs):
        penalty = 0.0
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            if log['Agent Action'] == 1:
                if max_util < -1e-10:
                    penalty += (max_util - 0) ** 2
            else:
                if max_util > -1e-10:
                    penalty += (max_util - 0) ** 2
        return penalty
    
    bounds = Bounds(cost_lower_bounds, np.inf * np.ones(n_actions))
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lower_bounds}]
    res = minimize(objective, cost_lower_bounds, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 2000, 'ftol': 1e-12})
    final_costs = res.x if res.success else cost_lower_bounds
    
    return np.hstack([p_centroids, final_costs.reshape(-1, 1)])
```
