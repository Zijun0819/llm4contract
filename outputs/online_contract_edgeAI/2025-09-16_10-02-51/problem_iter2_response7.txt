```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        base_p = np.ones(len(v)) / len(v)
        return np.column_stack([base_p, 0.0])
    
    def infer_distribution(w, u_target):
        n = len(w)
        obj = w
        A_eq = [np.ones(n), v - w]
        b_eq = [1.0, u_target]
        bounds = [(0, 1) for _ in range(n)]
        res = linprog(obj, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None
    
    inferred_dists = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_target = log['Principal Utility']
        p = infer_distribution(w, u_target)
        if p is not None:
            inferred_dists.append(p)
    
    if not inferred_dists:
        base_p = np.ones(len(v)) / len(v)
        return np.column_stack([base_p, 0.0])
    
    X = np.array(inferred_dists)
    n_components = min(10, len(X))
    gm = GaussianMixture(n_components=n_components, random_state=42, n_init=5).fit(X)
    cluster_centers = gm.means_
    labels = gm.predict(X)
    
    costs = np.zeros(n_components)
    for i in range(n_components):
        cluster_indices = np.where(labels == i)[0]
        if len(cluster_indices) > 0:
            min_utility = np.inf
            for idx in cluster_indices:
                w = np.array(accepted_logs[idx]['Contract'])
                utility = np.dot(cluster_centers[i], w)
                if utility < min_utility:
                    min_utility = utility
            costs[i] = min_utility
        else:
            costs[i] = 0.0
    
    if rejected_logs:
        rej_wages = [np.array(log['Contract']) for log in rejected_logs]
        for i in range(n_components):
            max_rej_util = max(np.dot(cluster_centers[i], w) for w in rej_wages) if rej_wages else -np.inf
            if max_rej_util > costs[i]:
                costs[i] = max_rej_util
    
    costs = np.maximum(costs, 0)
    result = np.hstack([cluster_centers, costs.reshape(-1, 1)])
    return result
```
