```python
import numpy as np
from scipy.optimize import minimize, Bounds
from sklearn.mixture import GaussianMixture
from scipy.optimize import NonlinearConstraint

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = minimize(lambda p: np.dot(c, p), 
                      x0=np.ones(m_outcomes)/m_outcomes,
                      constraints=[{'type': 'eq', 'fun': lambda p: np.sum(p) - 1},
                                  {'type': 'eq', 'fun': lambda p: np.dot(v, p) - u_p}],
                      bounds=bounds,
                      method='trust-constr')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(12, len(p_list))
    if n_candidates > 0:
        gmm = GaussianMixture(n_components=n_candidates, random_state=42)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    epsilon = 1e-6
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_w = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_w = min(min_w, agent_util)
        cost_lower_bounds[a] = max(0, min_w - epsilon) if min_w != np.inf else 0.0
    
    def ic_constraint(costs):
        violations = []
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            best_action = np.argmax(utils)
            for a in range(n_actions):
                if a != best_action:
                    violation = utils[best_action] - utils[a]
                    violations.append(violation)
        return np.array(violations)
    
    def ir_constraint(costs):
        violations = []
        for log in accepted_logs:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            violations.append(max_util)
        return np.array(violations)
    
    def objective(costs):
        penalty = 0.0
        ic_violations = ic_constraint(costs)
        ir_violations = ir_constraint(costs)
        penalty += np.sum(np.maximum(0, -ic_violations)) * 1e6
        penalty += np.sum(np.maximum(0, -ir_violations)) * 1e6
        return penalty
    
    constraints = [
        NonlinearConstraint(ic_constraint, 0, np.inf),
        NonlinearConstraint(ir_constraint, 0, np.inf)
    ]
    
    bounds = Bounds(cost_lower_bounds, np.full(n_actions, np.inf))
    
    best_costs = None
    best_obj = np.inf
    for _ in range(10):
        x0 = cost_lower_bounds + np.random.uniform(0, 1e-3, n_actions)
        res = minimize(objective, x0, method='trust-constr', bounds=bounds, constraints=constraints, options={'maxiter': 1000})
        if res.success and res.fun < best_obj:
            best_obj = res.fun
            best_costs = res.x
    
    final_costs = best_costs if best_costs is not None else cost_lower_bounds
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
