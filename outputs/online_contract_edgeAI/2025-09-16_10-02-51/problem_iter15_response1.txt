```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint, NonlinearConstraint
from scipy.stats import wasserstein_distance
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        try:
            res = minimize(lambda p: np.dot(c, p), 
                          x0=np.ones(m_outcomes)/m_outcomes,
                          constraints=[{'type': 'eq', 'fun': lambda p: np.sum(p) - 1},
                                      {'type': 'eq', 'fun': lambda p: np.dot(v, p) - u_p}],
                          bounds=bounds,
                          method='trust-constr')
            if res.success:
                p_list.append(res.x)
        except:
            continue
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    if len(p_list) > 1:
        distances = np.zeros((len(p_list), len(p_list)))
        for i in range(len(p_list)):
            for j in range(i+1, len(p_list)):
                distances[i,j] = wasserstein_distance(np.arange(m_outcomes), np.arange(m_outcomes), p_list[i], p_list[j])
        threshold = np.percentile(distances[distances > 0], 50) if np.any(distances > 0) else 1.0
        
        clusters = []
        clustered = set()
        for i in range(len(p_list)):
            if i not in clustered:
                cluster = [i]
                clustered.add(i)
                for j in range(i+1, len(p_list)):
                    if j not in clustered and distances[i,j] <= threshold:
                        cluster.append(j)
                        clustered.add(j)
                clusters.append(cluster)
        
        p_centroids = []
        for cluster in clusters:
            if len(cluster) > 1:
                centroid = np.mean(p_array[cluster], axis=0)
            else:
                centroid = p_array[cluster[0]]
            p_centroids.append(centroid)
        p_centroids = np.array(p_centroids)
    else:
        p_centroids = p_array
    
    n_actions = len(p_centroids)
    if n_actions == 0:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
        n_actions = 1
    
    epsilon = 1e-8
    cost_lb = np.zeros(n_actions)
    for a in range(n_actions):
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_centroids[a], w)
            if util >= -epsilon:
                min_util = min(min_util, util)
        cost_lb[a] = max(0, min_util - epsilon) if min_util != np.inf else 0.0
    
    def ic_constraint(costs):
        violations = []
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            best_util = np.max(utils)
            best_action = np.argmax(utils)
            for a in range(n_actions):
                if a != best_action:
                    violation = (np.dot(p_centroids[a], w) - costs[a]) - best_util
                    violations.append(violation)
        return np.array(violations) + epsilon
    
    def ir_constraint(costs):
        violations = []
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            best_util = np.max(utils)
            if log['Agent Action'] == 1:
                violations.append(-best_util + epsilon)
            else:
                violations.append(best_util + epsilon)
        return np.array(violations)
    
    def objective(costs):
        penalty = 0.0
        penalty += 10.0 * np.sum(np.maximum(0, -ic_constraint(costs)))
        penalty += 10.0 * np.sum(np.maximum(0, -ir_constraint(costs)))
        penalty += 0.1 * np.sum(costs)
        return penalty
    
    constraints = [
        NonlinearConstraint(ic_constraint, -np.inf, np.inf),
        NonlinearConstraint(ir_constraint, -np.inf, np.inf)
    ]
    
    best_costs = None
    best_obj = np.inf
    for _ in range(5):
        x0 = cost_lb + np.random.uniform(0, 0.1, n_actions)
        res = minimize(objective, x0, method='trust-constr', bounds=Bounds(cost_lb, np.inf), 
                      constraints=constraints, options={'maxiter': 1000, 'verbose': 0})
        if res.success and res.fun < best_obj:
            best_obj = res.fun
            best_costs = res.x
    
    if best_costs is None:
        best_costs = cost_lb
    
    agent_setting = np.hstack([p_centroids, best_costs.reshape(-1, 1)])
    return agent_setting
```
