```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import BayesianGaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        p0 = np.ones((1, m_outcomes)) / m_outcomes
        c0 = np.zeros((1, 1))
        return np.hstack([p0, c0])
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
    
    p_candidates = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        A_eq = np.vstack([np.ones(m_outcomes), v - w])
        b_eq = np.array([1.0, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_candidates.append(res.x)
    
    if not p_candidates:
        p0 = np.ones((1, m_outcomes)) / m_outcomes
        c0 = np.zeros((1, 1))
        return np.hstack([p0, c0])
    
    p_array = np.array(p_candidates)
    n_components = min(12, len(p_candidates))
    gmm = BayesianGaussianMixture(n_components=n_components, random_state=42, max_iter=1000)
    gmm.fit(p_array)
    p_centroids = gmm.means_
    n_actions = len(p_centroids)
    
    cost_lb = np.zeros(n_actions)
    for a in range(n_actions):
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_centroids[a], w)
            if util >= -1e-8:
                min_util = min(min_util, util)
        cost_lb[a] = max(0, min_util) if min_util != np.inf else 0.0
    
    cost_ub = np.full(n_actions, np.inf)
    for a in range(n_actions):
        for log in rejected_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_centroids[a], w)
            if util < cost_ub[a]:
                cost_ub[a] = util
        if cost_ub[a] <= cost_lb[a]:
            cost_ub[a] = cost_lb[a] + 1e-6
    
    def constraint_violation(costs):
        total_violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            if log['Agent Action'] == 1:
                if max_util < -1e-8:
                    total_violation += (max_util ** 2)
                best_action = np.argmax(agent_utils)
                for a in range(n_actions):
                    if a != best_action and agent_utils[a] > agent_utils[best_action] + 1e-8:
                        total_violation += (agent_utils[a] - agent_utils[best_action]) ** 2
            else:
                if max_util >= -1e-8:
                    total_violation += (max_util ** 2)
        return total_violation
    
    bounds = Bounds(cost_lb, cost_ub)
    x0 = np.clip((cost_lb + np.minimum(cost_ub, cost_lb + 1.0)) / 2, cost_lb, cost_ub)
    res = minimize(constraint_violation, x0, method='L-BFGS-B', bounds=bounds, options={'maxiter': 1000, 'ftol': 1e-8})
    final_costs = res.x if res.success else x0
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])

    # Normalize probabilities to ensure they sum to 1 and are non-negative
    for i in range(n_actions):
        p_row = agent_setting[i, :m_outcomes]
        p_row = np.clip(p_row, 0, 1)
        p_row /= np.sum(p_row)
        agent_setting[i, :m_outcomes] = p_row
        agent_setting[i, -1] = max(0, agent_setting[i, -1])
    
    return agent_setting
```
