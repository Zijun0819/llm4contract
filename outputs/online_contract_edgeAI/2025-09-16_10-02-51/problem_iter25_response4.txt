```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint, NonlinearConstraint
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = minimize(lambda x: np.dot(c, x), 
                      x0=np.ones(m_outcomes)/m_outcomes,
                      constraints=[{'type': 'eq', 'fun': lambda x: np.dot(np.ones(m_outcomes), x) - 1},
                                  {'type': 'eq', 'fun': lambda x: np.dot(v, x) - u_p}],
                      bounds=bounds,
                      method='L-BFGS-B')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(len(p_list), 12)
    if n_candidates > 0:
        gmm = GaussianMixture(n_components=n_candidates, covariance_type='diag', max_iter=1000, random_state=42)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    
    n_actions = len(p_centroids)
    
    def get_cost_bounds(p_a):
        min_accept = np.inf
        max_reject = -np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_accept = min(min_accept, agent_util)
        for log in rejected_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util < 0:
                max_reject = max(max_reject, agent_util)
        lower = max(0, min_accept - 1e-6) if min_accept != np.inf else 0.0
        upper = max_reject + 1e-6 if max_reject != -np.inf else np.inf
        return lower, upper
    
    cost_lower_bounds = np.zeros(n_actions)
    cost_upper_bounds = np.inf * np.ones(n_actions)
    for a in range(n_actions):
        lower, upper = get_cost_bounds(p_centroids[a])
        cost_lower_bounds[a] = lower
        if upper != np.inf:
            cost_upper_bounds[a] = upper
    
    def objective(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            if log['Agent Action'] == 1:
                if max_util < -1e-8:
                    violation += (max_util ** 2)
            else:
                if max_util >= 1e-8:
                    violation += (max_util ** 2)
        return violation
    
    def ic_constraint(costs):
        constraints = []
        for a in range(n_actions):
            for b in range(n_actions):
                if a != b:
                    for log in content:
                        w = np.array(log['Contract'])
                        util_a = np.dot(p_centroids[a], w) - costs[a]
                        util_b = np.dot(p_centroids[b], w) - costs[b]
                        constraints.append(util_a - util_b)
        return np.array(constraints)
    
    bounds = Bounds(cost_lower_bounds, cost_upper_bounds)
    x0 = np.clip(cost_lower_bounds + 1e-6, cost_lower_bounds, cost_upper_bounds)
    
    constraints = []
    for a in range(n_actions):
        for b in range(n_actions):
            if a != b:
                for log in content:
                    w = np.array(log['Contract'])
                    def con(x, a=a, b=b, w=w):
                        return (np.dot(p_centroids[a], w) - x[a]) - (np.dot(p_centroids[b], w) - x[b])
                    constraints.append(NonlinearConstraint(con, 0, np.inf))
    
    res = minimize(objective, x0, method='L-BFGS-B', bounds=bounds, constraints=constraints, options={'maxiter': 10000})
    
    if res.success:
        final_costs = res.x
    else:
        final_costs = cost_lower_bounds
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
