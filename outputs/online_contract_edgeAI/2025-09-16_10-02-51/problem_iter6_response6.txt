```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import StandardScaler

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        return np.zeros((1, n_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    inferred_probs = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        if u_p <= 0:
            continue
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            inferred_probs.append(res.x)
    
    if not inferred_probs:
        inferred_probs = [np.ones(n_outcomes) / n_outcomes]
    
    prob_array = np.array(inferred_probs)
    scaler = StandardScaler()
    scaled_probs = scaler.fit_transform(prob_array)
    
    n_candidates = min(12, len(inferred_probs))
    if n_candidates > 0:
        gmm = GaussianMixture(n_components=n_candidates, random_state=42, max_iter=1000)
        gmm.fit(scaled_probs)
        centroids = scaler.inverse_transform(gmm.means_)
        n_actions = centroids.shape[0]
    else:
        centroids = np.ones((1, n_outcomes)) / n_outcomes
        n_actions = 1
    
    cost_lb = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = centroids[a]
        min_util = np.inf
        for w in accepted_contracts:
            agent_util = p_a @ w
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        cost_lb[a] = max(0, min_util) if min_util != np.inf else 0.0
    
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            p_a = centroids[a]
            agent_util = p_a @ w
            if agent_util >= cost_lb[a]:
                cost_lb[a] = agent_util + 1e-8
    
    def objective(costs):
        penalty = 0.0
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([centroids[a] @ w - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            best_action = np.argmax(utils)
            if log['Agent Action'] == 1:
                if max_util < 0:
                    penalty += 1e3 * (-max_util)
                for a in range(n_actions):
                    if a != best_action and utils[a] > max_util - 1e-6:
                        penalty += 1e2 * (max_util - utils[a])
            else:
                if max_util >= 0:
                    penalty += 1e3 * max_util
        return penalty
    
    bounds = Bounds(cost_lb, np.full(n_actions, np.inf))
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lb}]
    res = minimize(objective, cost_lb, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 2000, 'ftol': 1e-10})
    
    final_costs = res.x if res.success else cost_lb
    final_costs = np.maximum(final_costs, 0)
    
    return np.hstack([centroids, final_costs.reshape(-1, 1)])
```
