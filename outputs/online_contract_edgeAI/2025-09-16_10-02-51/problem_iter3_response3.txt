```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import BayesianGaussianMixture
from sklearn.preprocessing import StandardScaler

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    
    # Separate accepted and rejected logs
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.zeros((1, m_outcomes + 1))
    
    # Extract contracts and utilities
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    # Infer probability distributions using linear programming
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        return np.zeros((1, m_outcomes + 1))
    
    p_array = np.array(p_list)
    
    # Use Bayesian GMM for adaptive clustering
    scaler = StandardScaler()
    p_scaled = scaler.fit_transform(p_array)
    
    n_candidates = min(12, len(p_list))
    gmm = BayesianGaussianMixture(n_components=n_candidates, 
                                 random_state=42, 
                                 max_iter=1000)
    gmm.fit(p_scaled)
    p_centroids = scaler.inverse_transform(gmm.means_)
    n_actions = len(p_centroids)
    
    # Calculate cost lower bounds from accepted contracts
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_w = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            if np.dot(p_a, w) >= 0:
                min_w = min(min_w, np.dot(p_a, w))
        cost_lower_bounds[a] = min_w if min_w != np.inf else 0.0
    
    # Refine cost lower bounds using rejected contracts
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            p_a = p_centroids[a]
            util = np.dot(p_a, w) - cost_lower_bounds[a]
            if util >= 0:
                cost_lower_bounds[a] = np.dot(p_a, w) + 1e-8
    
    # Define IC/IR violation objective with regularization
    def objective(costs):
        violation = 0.0
        conflict_penalty = 0.0
        
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            
            if log['Agent Action'] == 1:
                if max_util < 0:
                    violation += -max_util * 10.0  # Penalize IR violations heavily
                
                # Add penalty for non-optimal action selection
                best_action_util = np.max(utils)
                for a in range(n_actions):
                    if utils[a] + 1e-6 < best_action_util:
                        conflict_penalty += (best_action_util - utils[a])
                        
            elif log['Agent Action'] == -1 and max_util >= 0:
                violation += max_util * 5.0  # Penalize false acceptance
        
        # Add regularization to prevent overfitting
        reg_term = 0.01 * np.sum(np.abs(costs - cost_lower_bounds))
        
        return violation + conflict_penalty + reg_term
    
    # Optimize costs with tighter constraints
    bounds = Bounds(cost_lower_bounds, cost_lower_bounds + 100.0)
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lower_bounds}]
    
    res = minimize(objective, cost_lower_bounds, method='SLSQP', 
                  bounds=bounds, constraints=constraints, 
                  options={'maxiter': 2000, 'ftol': 1e-8})
    
    final_costs = res.x if res.success else cost_lower_bounds
    
    # Validate and clean up the results
    for i in range(len(final_costs)):
        if not np.isfinite(final_costs[i]) or final_costs[i] < 0:
            final_costs[i] = max(0.0, cost_lower_bounds[i])
    
    # Return the agent setting matrix
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
