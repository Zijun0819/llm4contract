```python
import numpy as np
from scipy.optimize import minimize, Bounds
from sklearn.mixture import GaussianMixture
from scipy.optimize import linprog

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(5, len(p_list))
    if n_candidates > 0:
        gmm = GaussianMixture(n_components=n_candidates, covariance_type='diag', random_state=42)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_cost = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_cost = min(min_cost, agent_util)
        if min_cost == np.inf:
            min_cost = 0.0
        cost_lower_bounds[a] = max(0, min_cost)
    
    if rejected_logs:
        for a in range(n_actions):
            p_a = p_centroids[a]
            for log in rejected_logs:
                w = np.array(log['Contract'])
                agent_util = np.dot(p_a, w)
                if agent_util >= 0:
                    cost_lower_bounds[a] = max(cost_lower_bounds[a], agent_util + 1e-6)
    
    def objective(costs):
        penalty = 0.0
        penalty_weight = 1000.0
        for log in content:
            w = np.array(log['Contract'])
            utils = [np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)]
            max_util = max(utils)
            if log['Agent Action'] == 1:
                if max_util < -1e-8:
                    penalty += penalty_weight * (-max_util)
                chosen_util = max(utils)
                for a in range(n_actions):
                    if utils[a] > chosen_util + 1e-8:
                        penalty += penalty_weight * (utils[a] - chosen_util)
            else:
                if max_util >= -1e-8:
                    penalty += penalty_weight * (max_util + 1e-8)
        return penalty
    
    bounds = Bounds(cost_lower_bounds, np.full(n_actions, np.inf))
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lower_bounds}]
    x0 = cost_lower_bounds + 0.001
    res = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 1000, 'ftol': 1e-8})
    final_costs = res.x
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
