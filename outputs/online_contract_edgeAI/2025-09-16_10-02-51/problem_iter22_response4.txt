```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans
import warnings
warnings.filterwarnings('ignore')

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    
    if not content:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.zeros((1, 1))])
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    inferred_probs = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_p = log['Principal Utility']
        if u_p <= 1e-12:
            continue
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0.0, 1.0)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            inferred_probs.append(res.x)
    
    if not inferred_probs:
        inferred_probs = [np.ones(n_outcomes) / n_outcomes]
    
    prob_matrix = np.array(inferred_probs)
    n_samples = len(inferred_probs)
    n_components = min(max(1, int(np.sqrt(n_samples))), 12)
    
    if n_samples > 1:
        try:
            gmm = GaussianMixture(n_components=n_components, covariance_type='diag', random_state=42, n_init=10, max_iter=200)
            gmm.fit(prob_matrix)
            centroids = gmm.means_
        except:
            kmeans = KMeans(n_clusters=n_components, random_state=42, n_init=10)
            kmeans.fit(prob_matrix)
            centroids = kmeans.cluster_centers_
    else:
        centroids = prob_matrix.reshape(1, -1)
    
    centroids = np.clip(centroids, 0, 1)
    row_sums = np.sum(centroids, axis=1, keepdims=True)
    centroids = np.divide(centroids, row_sums, where=row_sums != 0, out=np.zeros_like(centroids))
    centroids = np.where(row_sums == 0, np.ones_like(centroids) / n_outcomes, centroids)
    n_actions = centroids.shape[0]
    
    epsilon = 1e-10
    cost_lb = np.zeros(n_actions)
    cost_ub = np.full(n_actions, np.inf)
    
    for a in range(n_actions):
        p_a = centroids[a]
        min_accept_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util >= -epsilon:
                min_accept_util = min(min_accept_util, util)
        
        max_reject_util = -np.inf
        for log in rejected_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util < -epsilon:
                max_reject_util = max(max_reject_util, util)
        
        if min_accept_util != np.inf:
            cost_lb[a] = max(0, min_accept_util - epsilon)
        
        if max_reject_util != -np.inf:
            cost_ub[a] = max(0, -max_reject_util + epsilon)
        
        if min_accept_util != np.inf and max_reject_util != -np.inf:
            if cost_lb[a] > cost_ub[a]:
                cost_lb[a] = cost_ub[a] = (cost_lb[a] + cost_ub[a]) / 2
    
    penalty_weight = 1e12
    
    def constraint_violation(costs):
        total_violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            best_action = np.argmax(utils)
            
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    total_violation += penalty_weight * (-max_util)
                for a in range(n_actions):
                    if a != best_action:
                        incentive_diff = utils[best_action] - utils[a]
                        if incentive_diff < epsilon:
                            total_violation += penalty_weight * (epsilon - incentive_diff)
            else:
                if max_util >= -epsilon:
                    total_violation += penalty_weight * (max_util + epsilon)
        return total_violation
    
    bounds = Bounds(cost_lb, cost_ub)
    initial_costs = np.zeros(n_actions)
    for a in range(n_actions):
        if cost_ub[a] < np.inf:
            initial_costs[a] = (cost_lb[a] + cost_ub[a]) / 2
        else:
            initial_costs[a] = cost_lb[a] + epsilon
    
    res = minimize(constraint_violation, initial_costs, method='SLSQP', bounds=bounds, options={'maxiter': 10000, 'ftol': 1e-12})
    final_costs = res.x if res.success else initial_costs
    
    return np.hstack([centroids, final_costs.reshape(-1, 1)])
```
