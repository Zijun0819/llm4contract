```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds, LinearConstraint
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        p0 = np.ones(n_outcomes) / n_outcomes
        return np.hstack([p0, [0.0]]).reshape(1, -1)
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_putils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    inferred_probs = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_putils[i]
        c = -np.array(w)
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1, u_p])
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * n_outcomes, method='highs')
        if res.success and np.all(res.x >= 0):
            inferred_probs.append(res.x)
    
    if not inferred_probs:
        p0 = np.ones(n_outcomes) / n_outcomes
        inferred_probs = [p0]
    
    prob_array = np.array(inferred_probs)
    n_candidates = min(12, len(inferred_probs))
    
    if n_candidates > 1:
        gmm = GaussianMixture(n_components=n_candidates, covariance_type='diag', max_iter=500, random_state=42)
        gmm.fit(prob_array)
        centroids = gmm.means_
        centroids = np.maximum(centroids, 0)
        centroids /= centroids.sum(axis=1, keepdims=True)
        n_actions = centroids.shape[0]
    else:
        centroids = np.mean(prob_array, axis=0, keepdims=True)
        n_actions = 1
    
    cost_lb = np.zeros(n_actions)
    epsilon = 1e-8
    for a_idx in range(n_actions):
        p_a = centroids[a_idx]
        min_util = np.inf
        for w in accepted_contracts:
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        cost_lb[a_idx] = max(0, min_util - epsilon) if min_util != np.inf else 0.0
    
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a_idx in range(n_actions):
            agent_util = np.dot(centroids[a_idx], w)
            if agent_util >= cost_lb[a_idx] - epsilon:
                cost_lb[a_idx] = agent_util + epsilon
    
    def objective(costs):
        penalty = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    penalty += 1e6 * (-max_util)
                else:
                    best_action = np.argmax(agent_utils)
                    for a in range(n_actions):
                        if a != best_action and agent_utils[a] > max_util - epsilon:
                            penalty += 1e4 * (agent_utils[a] - max_util + epsilon)
            else:
                if max_util >= -epsilon:
                    penalty += 1e6 * (max_util + epsilon)
        return penalty
    
    bounds = Bounds(cost_lb, np.full(n_actions, np.inf))
    constraints = [LinearConstraint(np.eye(n_actions), cost_lb, np.full(n_actions, np.inf))]
    res = minimize(objective, cost_lb, method='trust-constr', bounds=bounds, constraints=constraints, options={'maxiter': 1000, 'verbose': 0})
    
    final_costs = res.x if res.success else cost_lb
    final_costs = np.maximum(final_costs, 0)
    
    agent_setting = np.hstack([centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
