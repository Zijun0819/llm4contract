```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 12
    m_outcomes = v.shape[0]
    L = len(content)
    
    accepted_contracts = []
    accepted_utils = []
    for log in content:
        if log['Agent Action'] == 1:
            accepted_contracts.append(log['Contract'])
            accepted_utils.append(log['Principal Utility'])
    
    if not accepted_contracts:
        return np.zeros((1, m_outcomes+1))
    
    accepted_contracts = np.array(accepted_contracts)
    accepted_utils = np.array(accepted_utils)
    
    p_list = []
    for i in range(len(accepted_contracts)):
        w = accepted_contracts[i]
        u_p = accepted_utils[i]
        u_a = np.dot(w, v) - u_p
        
        c = w
        A_eq = [np.ones(m_outcomes), v - w]
        b_eq = [1.0, u_p]
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        return np.zeros((1, m_outcomes+1))
    
    p_array = np.array(p_list)
    
    gmm = GaussianMixture(n_components=min(n_candidates, len(p_list)), covariance_type='diag', random_state=0)
    gmm.fit(p_array)
    probs = gmm.predict_proba(p_array)
    labels = np.argmax(probs, axis=1)
    unique_labels = np.unique(labels)
    p_centroids = []
    for lbl in unique_labels:
        mask = labels == lbl
        if np.sum(mask) > 0:
            centroid = np.mean(p_array[mask], axis=0)
            p_centroids.append(centroid)
    p_centroids = np.array(p_centroids)
    
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        applicable_logs = []
        for i, log in enumerate(content):
            if log['Agent Action'] == 1:
                w = np.array(log['Contract'])
                pred_util = np.dot(p_a, w)
                if pred_util >= 0:
                    applicable_logs.append(w)
        if applicable_logs:
            min_wage = np.min(applicable_logs, axis=0)
            cost_lower_bounds[a] = np.dot(p_a, min_wage)
    
    def cost_objective(costs):
        total_violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            max_util = -np.inf
            for a in range(n_actions):
                util = np.dot(p_centroids[a], w) - costs[a]
                if util > max_util:
                    max_util = util
            if log['Agent Action'] == 1 and max_util < 0:
                total_violation += abs(max_util)
            elif log['Agent Action'] == -1 and max_util >= 0:
                total_violation += abs(max_util)
        return total_violation
    
    def cost_constraint(costs):
        return costs - cost_lower_bounds
    
    initial_costs = cost_lower_bounds.copy()
    bounds = Bounds(cost_lower_bounds, np.inf * np.ones(n_actions))
    constraints = {'type': 'ineq', 'fun': cost_constraint}
    res = minimize(cost_objective, initial_costs, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 1000})
    if res.success:
        final_costs = res.x
    else:
        final_costs = cost_lower_bounds
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
