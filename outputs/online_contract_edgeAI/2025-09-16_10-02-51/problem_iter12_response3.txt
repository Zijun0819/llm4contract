```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds, LinearConstraint
from sklearn.mixture import GaussianMixture

def agent_solver(v, content):
    m_outcomes = len(v)
    if not content:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        if u_p <= 0:
            continue
        c = -np.array(w)
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    else:
        p_array = np.array(p_list)
        n_candidates = min(5, len(p_list))
        if n_candidates == 1:
            p_centroids = np.mean(p_array, axis=0).reshape(1, -1)
        else:
            gmm = GaussianMixture(n_components=n_candidates, covariance_type='diag', random_state=42, n_init=10)
            gmm.fit(p_array)
            p_centroids = gmm.means_
    
    n_actions = len(p_centroids)
    cost_lower_bounds = np.zeros(n_actions)
    epsilon = 1e-8
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        if min_util != np.inf:
            cost_lower_bounds[a] = min_util - epsilon
        else:
            cost_lower_bounds[a] = 0.0
    
    def objective(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            utils = [np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)]
            max_util = max(utils)
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    violation += -max_util
                best_a = np.argmax(utils)
                for a in range(n_actions):
                    if a != best_a and utils[a] > utils[best_a] + epsilon:
                        violation += utils[a] - utils[best_a]
            else:
                if max_util >= -epsilon:
                    violation += max_util + epsilon
        return violation
    
    bounds = Bounds(cost_lower_bounds, np.inf * np.ones(n_actions))
    constraints = LinearConstraint(np.eye(n_actions), cost_lower_bounds, np.inf * np.ones(n_actions))
    res = minimize(objective, cost_lower_bounds, method='trust-constr', bounds=bounds, constraints=constraints, options={'maxiter': 10000, 'verbose': 0})
    final_costs = res.x if res.success else cost_lower_bounds
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
