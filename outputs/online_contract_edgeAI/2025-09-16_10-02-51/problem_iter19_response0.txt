```python
import numpy as np
from scipy.optimize import minimize, Bounds
from sklearn.mixture import GaussianMixture
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        res = minimize(lambda p: np.dot(c, p), 
                      x0=np.ones(m_outcomes)/m_outcomes, 
                      constraints=[{'type': 'eq', 'fun': lambda p: np.sum(p) - 1},
                                  {'type': 'eq', 'fun': lambda p: np.dot(v, p) - u_p}],
                      bounds=[(0, 1)] * m_outcomes,
                      method='SLSQP')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(5, len(p_list))
    if n_candidates > 0:
        gmm = GaussianMixture(n_components=n_candidates, covariance_type='diag', random_state=42)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    
    n_actions = len(p_centroids)
    
    cost_lbs = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_accept_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_accept_util = min(min_accept_util, agent_util)
        
        max_reject_util = -np.inf
        for log in rejected_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util < 0:
                max_reject_util = max(max_reject_util, agent_util)
        
        if min_accept_util != np.inf and max_reject_util != -np.inf:
            cost_lbs[a] = max(0, (min_accept_util + max_reject_util) / 2)
        elif min_accept_util != np.inf:
            cost_lbs[a] = max(0, min_accept_util - 1e-6)
        else:
            cost_lbs[a] = 0.0
    
    def constraint_violation(costs):
        total_violation = 0.0
        penalty_weight = 1000.0
        
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            best_util = np.max(agent_utils)
            best_action = np.argmax(agent_utils)
            
            if log['Agent Action'] == 1:
                if best_util < 0:
                    total_violation += penalty_weight * (-best_util)
                for a in range(n_actions):
                    if a != best_action and agent_utils[a] > agent_utils[best_action]:
                        total_violation += penalty_weight * (agent_utils[a] - agent_utils[best_action])
            else:
                if best_util >= 0:
                    total_violation += penalty_weight * best_util
        
        return total_violation
    
    initial_costs = cost_lbs + 1e-6
    bounds = Bounds(cost_lbs, np.full(n_actions, np.inf))
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lbs}]
    
    res = minimize(constraint_violation, initial_costs, method='SLSQP', 
                  bounds=bounds, constraints=constraints, 
                  options={'maxiter': 500, 'ftol': 1e-8})
    
    final_costs = res.x if res.success else cost_lbs
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
