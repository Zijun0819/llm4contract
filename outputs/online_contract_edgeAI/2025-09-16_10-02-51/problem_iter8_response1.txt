```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint
from sklearn.mixture import GaussianMixture
from scipy.optimize import linprog

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.asarray(v)
    m_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -np.array(w)
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        return np.zeros((1, m_outcomes + 1))
    
    p_array = np.array(p_list)
    n_candidates = min(12, len(p_list))
    gmm = GaussianMixture(n_components=n_candidates, random_state=42, n_init=3)
    gmm.fit(p_array)
    p_centroids = gmm.means_
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util >= 0:
                min_util = min(min_util, util)
        cost_lower_bounds[a] = min_util if min_util != np.inf else 0.0
    
    def objective(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            best_action = np.argmax(agent_utils)
            if log['Agent Action'] == 1:
                if max_util < -1e-8:
                    violation += (-max_util) ** 2
                else:
                    for a in range(n_actions):
                        if a != best_action and agent_utils[a] > max_util - 1e-8:
                            violation += (agent_utils[a] - max_util + 1e-8) ** 2
            else:
                if max_util >= -1e-8:
                    violation += (max_util + 1e-8) ** 2
        return violation
    
    bounds = Bounds(cost_lower_bounds, np.full(n_actions, np.inf))
    constraints = LinearConstraint(np.eye(n_actions), cost_lower_bounds, np.inf)
    x0 = cost_lower_bounds + 0.1
    res = minimize(objective, x0, method='trust-constr', bounds=bounds, constraints=constraints, options={'maxiter': 1000, 'verbose': 0})
    final_costs = res.x if res.success else cost_lower_bounds
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
