```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import BayesianGaussianMixture

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        return np.zeros((1, m_outcomes + 1))
    
    p_array = np.array(p_list)
    if len(p_list) <= 1:
        p_centroids = p_array.reshape(1, -1)
    else:
        max_components = min(12, len(p_list))
        gmm = BayesianGaussianMixture(n_components=max_components, random_state=42, max_iter=1000)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_w = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            if np.dot(p_a, w) >= 0:
                min_w = min(min_w, np.dot(p_a, w))
        cost_lower_bounds[a] = min_w if min_w != np.inf else 0.0
    
    cost_upper_bounds = np.full(n_actions, np.inf)
    for a in range(n_actions):
        p_a = p_centroids[a]
        for log in rejected_logs:
            w = np.array(log['Contract'])
            candidate_cost = np.dot(p_a, w)
            if candidate_cost < cost_upper_bounds[a]:
                cost_upper_bounds[a] = candidate_cost
    
    def objective(costs):
        violation = 0.0
        n_total = len(content)
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            if log['Agent Action'] == 1:
                if max_util < -1e-8:
                    violation += (-max_util) / n_total
            else:
                if max_util >= -1e-8:
                    violation += (max_util + 1e-8) / n_total
        return violation
    
    for i in range(n_actions):
        if cost_upper_bounds[i] < cost_lower_bounds[i]:
            cost_upper_bounds[i] = cost_lower_bounds[i] + 1e-6
    
    bounds = Bounds(cost_lower_bounds, cost_upper_bounds)
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lower_bounds}]
    x0 = (cost_lower_bounds + np.minimum(cost_upper_bounds, cost_lower_bounds + 1.0)) / 2
    
    res = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 1000, 'ftol': 1e-8})
    final_costs = res.x if res.success else x0
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
