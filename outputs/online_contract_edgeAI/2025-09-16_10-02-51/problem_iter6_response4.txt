```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.zeros((1, 1))])
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    inferred_probs = []
    for i in range(len(accepted_logs)):
        w = accepted_contracts[i]
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            inferred_probs.append(res.x)
    
    if not inferred_probs:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        min_util = np.min(accepted_contracts @ uniform_p) if len(accepted_contracts) > 0 else 0.0
        return np.hstack([uniform_p.reshape(1, -1), np.array([[min_util]])])
    
    prob_matrix = np.array(inferred_probs)
    n_candidates = min(12, len(inferred_probs))
    gmm = GaussianMixture(n_components=n_candidates, random_state=42, max_iter=1000)
    gmm.fit(prob_matrix)
    centroids = gmm.means_
    n_actions = centroids.shape[0]
    
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = p_a @ w
            if util >= 0:
                min_util = min(min_util, util)
        cost_lower_bounds[a] = min_util if min_util != np.inf else 0.0
    
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            p_a = centroids[a]
            util = p_a @ w
            if util >= cost_lower_bounds[a]:
                cost_lower_bounds[a] = util + 1e-8
    
    def objective(costs):
        penalty = 0.0
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([centroids[a] @ w - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            if log['Agent Action'] == 1:
                if max_util < 0:
                    penalty += 10.0 * (-max_util)
            else:
                if max_util >= 0:
                    penalty += 10.0 * max_util
        return penalty
    
    bounds = Bounds(cost_lower_bounds, np.full(n_actions, np.inf))
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lower_bounds}]
    res = minimize(objective, cost_lower_bounds, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 2000, 'ftol': 1e-8})
    
    final_costs = res.x if res.success else cost_lower_bounds
    final_costs = np.maximum(final_costs, 0)
    
    return np.hstack([centroids, final_costs.reshape(-1, 1)])
```
