```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint, NonlinearConstraint
from sklearn.mixture import GaussianMixture
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = minimize(lambda p: np.dot(c, p), x0=np.ones(m_outcomes)/m_outcomes, 
                      constraints=[{'type': 'eq', 'fun': lambda p: np.sum(p) - 1},
                                  {'type': 'eq', 'fun': lambda p: np.dot(v, p) - u_p}],
                      bounds=bounds, method='SLSQP')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(12, len(p_list))
    
    if n_candidates > 1:
        gmm = GaussianMixture(n_components=n_candidates, random_state=42, n_init=5)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    
    n_actions = len(p_centroids)
    
    def ic_constraint(costs):
        violations = []
        for i in range(n_actions):
            for j in range(n_actions):
                if i != j:
                    for log in accepted_logs:
                        w = np.array(log['Contract'])
                        util_i = np.dot(p_centroids[i], w) - costs[i]
                        util_j = np.dot(p_centroids[j], w) - costs[j]
                        violations.append(util_i - util_j)
        return np.array(violations)
    
    def ir_constraint(costs):
        violations = []
        for a in range(n_actions):
            for log in accepted_logs:
                w = np.array(log['Contract'])
                util = np.dot(p_centroids[a], w) - costs[a]
                violations.append(util)
        return np.array(violations)
    
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_centroids[a], w)
            if util >= 0:
                min_util = min(min_util, util)
        cost_lower_bounds[a] = max(0, min_util - 1e-6) if min_util != np.inf else 0.0
    
    def objective(costs):
        penalty = 0.0
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            if log['Agent Action'] == 1:
                if max_util < 0:
                    penalty += -max_util
            else:
                if max_util >= 0:
                    penalty += max_util
        return penalty
    
    bounds = Bounds(cost_lower_bounds, np.inf * np.ones(n_actions))
    constraints = [
        NonlinearConstraint(ir_constraint, 0, np.inf),
        NonlinearConstraint(ic_constraint, 0, np.inf)
    ]
    
    best_costs = None
    best_obj = np.inf
    n_init = 5
    for _ in range(n_init):
        x0 = cost_lower_bounds + np.random.uniform(0, 1e-3, n_actions)
        res = minimize(objective, x0, method='trust-constr', bounds=bounds, constraints=constraints, options={'maxiter': 1000})
        if res.success and res.fun < best_obj:
            best_obj = res.fun
            best_costs = res.x
    
    if best_costs is None:
        best_costs = cost_lower_bounds
    
    agent_setting = np.hstack([p_centroids, best_costs.reshape(-1, 1)])
    return agent_setting
```
