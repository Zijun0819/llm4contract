```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success and np.all(res.x >= 0) and np.isclose(np.sum(res.x), 1) and np.isclose(np.dot(v, res.x), u_p):
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(12, max(1, len(p_list)))
    if n_candidates > 1:
        gmm = GaussianMixture(n_components=n_candidates, random_state=42)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = p_array
    
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    epsilon = 1e-6
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        if min_util != np.inf:
            cost_lower_bounds[a] = min_util - epsilon
        else:
            cost_lower_bounds[a] = 0.0
    
    for a in range(n_actions):
        p_a = p_centroids[a]
        for log in rejected_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= cost_lower_bounds[a] - epsilon:
                cost_lower_bounds[a] = agent_util + epsilon
    
    def objective(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            best_action = np.argmax(utils)
            
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    violation += (-max_util)
                for a in range(n_actions):
                    if a != best_action and utils[a] > utils[best_action] + epsilon:
                        violation += (utils[a] - utils[best_action])
            else:
                if max_util >= -epsilon:
                    violation += (max_util + epsilon)
        return violation
    
    bounds = Bounds(cost_lower_bounds, np.full(n_actions, np.inf))
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lower_bounds}]
    res = minimize(objective, cost_lower_bounds, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 1000})
    final_costs = res.x if res.success else cost_lower_bounds
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
