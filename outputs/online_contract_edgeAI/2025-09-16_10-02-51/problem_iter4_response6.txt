```python
import numpy as np
from scipy.optimize import minimize, Bounds, linprog
from sklearn.cluster import KMeans

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        p0 = np.ones((1, m_outcomes)) / m_outcomes
        c0 = np.zeros((1, 1))
        return np.hstack([p0, c0])
    
    contracts_accepted = np.array([log['Contract'] for log in accepted_logs])
    principal_utils_accepted = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_candidates = []
    for i, w in enumerate(contracts_accepted):
        u_p = principal_utils_accepted[i]
        A_eq = np.vstack([np.ones(m_outcomes), v - w])
        b_eq = np.array([1.0, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_candidates.append(res.x)
    
    if not p_candidates:
        p0 = np.ones((1, m_outcomes)) / m_outcomes
        c0 = np.zeros((1, 1))
        return np.hstack([p0, c0])
    
    p_candidates = np.array(p_candidates)
    n_candidates = len(p_candidates)
    
    if n_candidates <= 5:
        n_clusters = n_candidates
    else:
        n_clusters = min(10, n_candidates)
    
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(p_candidates)
    p_centroids = kmeans.cluster_centers_
    n_actions = len(p_centroids)
    
    cost_lb = np.zeros(n_actions)
    for a in range(n_actions):
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_centroids[a], w)
            if util >= 0:
                min_util = min(min_util, util)
        cost_lb[a] = min_util if min_util != np.inf else 0.0
    
    def constraint_violation(costs):
        total_violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            if log['Agent Action'] == 1:
                if max_util < 0:
                    total_violation += (max_util ** 2)
                best_action = np.argmax(agent_utils)
                for a in range(n_actions):
                    if a != best_action and agent_utils[a] > agent_utils[best_action]:
                        total_violation += (agent_utils[a] - agent_utils[best_action]) ** 2
            else:
                if max_util >= 0:
                    total_violation += (max_util ** 2)
        return total_violation
    
    bounds = Bounds(cost_lb, np.full(n_actions, np.inf))
    res = minimize(constraint_violation, cost_lb, method='L-BFGS-B', bounds=bounds, options={'maxiter': 1000})
    final_costs = res.x
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
