```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    if not content:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    utility_weights = accepted_utils / (np.sum(accepted_utils) + 1e-10) if len(accepted_utils) > 0 else None
    
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = minimize(lambda p: np.dot(c, p), np.ones(m_outcomes)/m_outcomes, 
                      constraints=[{'type': 'eq', 'fun': lambda p: np.dot(np.ones(m_outcomes), p) - 1},
                                  {'type': 'eq', 'fun': lambda p: np.dot(v, p) - u_p}],
                      bounds=bounds, method='SLSQP')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    if utility_weights is not None and len(p_list) > 1:
        n_candidates = min(12, len(p_list))
        gmm = GaussianMixture(n_components=n_candidates, random_state=42)
        gmm.fit(p_array, sample_weight=utility_weights)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    
    n_actions = len(p_centroids)
    
    epsilon = 1e-10
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_w = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_w = min(min_w, agent_util)
        cost_lower_bounds[a] = max(0, min_w - epsilon) if min_w != np.inf else 0.0
    
    def objective(costs):
        violation = 0.0
        penalty_weight = 100.0
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            action_idx = np.argmax(utils)
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    violation += penalty_weight * (-max_util)**2
                for a in range(n_actions):
                    if a != action_idx and utils[a] + epsilon > max_util:
                        violation += penalty_weight * (utils[a] - max_util + epsilon)**2
            else:
                if max_util >= -epsilon:
                    violation += penalty_weight * (max_util + epsilon)**2
        return violation
    
    bounds = Bounds(cost_lower_bounds, np.full(n_actions, np.inf))
    constraints = [LinearConstraint(np.eye(n_actions), cost_lower_bounds, np.inf)]
    res = minimize(objective, cost_lower_bounds, method='SLSQP', bounds=bounds, constraints=constraints, 
                   options={'maxiter': 1000, 'ftol': 1e-12})
    final_costs = res.x if res.success else cost_lower_bounds
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
