```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds, LinearConstraint
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.asarray(v)
    n_outcomes = len(v)
    
    if not content:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.zeros((1, 1))])
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0.0, 1.0)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(n_outcomes) / n_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(12, len(p_list))
    if n_candidates > 0:
        gmm = GaussianMixture(n_components=n_candidates, random_state=42, n_init=10, max_iter=1000)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, n_outcomes)) / n_outcomes
    
    n_actions = len(p_centroids)
    
    cost_lb = np.zeros(n_actions)
    cost_ub = np.full(n_actions, np.inf)
    epsilon = 1e-8
    
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_accepted = np.inf
        max_rejected = -np.inf
        
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util >= -epsilon:
                min_accepted = min(min_accepted, util)
        
        for log in rejected_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util < -epsilon:
                max_rejected = max(max_rejected, util)
        
        if min_accepted != np.inf:
            cost_lb[a] = max(0.0, min_accepted - epsilon)
        else:
            cost_lb[a] = 0.0
        
        if max_rejected != -np.inf:
            cost_ub[a] = max(0.0, max_rejected + epsilon)
        else:
            cost_ub[a] = np.inf
    
    constraints = []
    for log in content:
        w = np.array(log['Contract'])
        agent_utils = [np.dot(p_centroids[a], w) for a in range(n_actions)]
        best_util = max(agent_utils) if n_actions > 0 else -np.inf
        best_action = np.argmax(agent_utils) if n_actions > 0 else -1
        
        if log['Agent Action'] == 1:
            for a in range(n_actions):
                if a != best_action:
                    constraint_coeff = np.zeros(n_actions)
                    constraint_coeff[a] = 1
                    constraint_coeff[best_action] = -1
                    constraints.append((constraint_coeff, agent_utils[a] - agent_utils[best_action]))
    
    if constraints:
        A_ic = np.vstack([c[0] for c in constraints])
        b_ic = np.array([c[1] for c in constraints])
        ic_constraint = LinearConstraint(A_ic, lb=-np.inf, ub=b_ic)
    else:
        ic_constraint = LinearConstraint(np.eye(n_actions), lb=np.zeros(n_actions), ub=np.inf)
    
    def objective(costs):
        total_violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils) if n_actions > 0 else -np.inf
            best_action = np.argmax(agent_utils) if n_actions > 0 else -1
            
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    total_violation += 1e9 * (-max_util)
                else:
                    for a in range(n_actions):
                        if a != best_action:
                            gap = agent_utils[a] - agent_utils[best_action]
                            if gap > epsilon:
                                total_violation += 1e9 * gap
            else:
                if max_util >= -epsilon:
                    total_violation += 1e9 * (max_util + epsilon)
        return total_violation
    
    bounds = Bounds(cost_lb, cost_ub)
    initial_guess = np.clip((cost_lb + cost_ub) / 2, cost_lb, cost_ub)
    
    res = minimize(objective, initial_guess, method='trust-constr', bounds=bounds, constraints=ic_constraint, options={'maxiter': 10000, 'verbose': 0})
    
    if res.success:
        final_costs = res.x
    else:
        final_costs = cost_lb
    
    final_costs = np.maximum(final_costs, 0.0)
    
    return np.hstack([p_centroids, final_costs.reshape(-1, 1)])
```
