```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    epsilon = 1e-12
    penalty_weight = 1e9
    
    if not content:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    p_list = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_p = log['Principal Utility']
        if u_p <= epsilon:
            continue
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0.0, 1.0)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_centroids = np.ones((1, n_outcomes)) / n_outcomes
    else:
        p_array = np.array(p_list)
        n_candidates = min(12, max(1, len(p_array) // 10))
        if n_candidates > 0:
            gmm = GaussianMixture(n_components=n_candidates, covariance_type='diag', random_state=42, n_init=5)
            gmm.fit(p_array)
            p_centroids = gmm.means_
            p_centroids = np.clip(p_centroids, 0.0, 1.0)
            p_centroids = p_centroids / np.sum(p_centroids, axis=1, keepdims=True)
        else:
            p_centroids = np.ones((1, n_outcomes)) / n_outcomes
    
    n_actions = p_centroids.shape[0]
    cost_lb = np.zeros(n_actions)
    cost_ub = np.full(n_actions, np.inf)
    
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_acc_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util >= 0.0:
                min_acc_util = min(min_acc_util, util)
        if min_acc_util < np.inf:
            cost_lb[a] = max(0.0, min_acc_util - epsilon)
        
        max_rej_util = -np.inf
        for log in rejected_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util < 0.0:
                max_rej_util = max(max_rej_util, util)
        if max_rej_util > -np.inf:
            cost_ub[a] = -max_rej_util + epsilon
    
    def objective(costs):
        total_penalty = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            best_action = np.argmax(agent_utils)
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    total_penalty += penalty_weight * (-max_util)
                for a in range(n_actions):
                    if a != best_action:
                        diff = agent_utils[best_action] - agent_utils[a]
                        if diff < -epsilon:
                            total_penalty += penalty_weight * (-diff)
            else:
                if max_util >= -epsilon:
                    total_penalty += penalty_weight * (max_util + epsilon)
        return total_penalty
    
    bounds = Bounds(cost_lb, cost_ub)
    res = minimize(objective, cost_lb, method='trust-constr', bounds=bounds, options={'maxiter': 10000, 'verbose': 0})
    final_costs = res.x if res.success else cost_lb
    
    return np.hstack([p_centroids, final_costs.reshape(-1, 1)])
```
