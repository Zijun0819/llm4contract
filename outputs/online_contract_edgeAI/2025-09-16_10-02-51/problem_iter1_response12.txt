```python
import numpy as np
from sklearn.cluster import KMeans
from scipy.optimize import linprog

def agent_solver(v, content):
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    if not accepted_logs:
        return np.zeros((1, 13))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    rejected_contracts = np.array(rejected_logs['Contract']) if rejected_logs else None
    
    m_outcomes = len(v)
    n_clusters = min(8, len(accepted_logs))
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(accepted_contracts)
    cluster_centers = kmeans.cluster_centers_
    labels = kmeans.labels_
    
    cost_estimates = np.zeros(n_clusters)
    for cluster_id in range(n_clusters):
        cluster_indices = np.where(labels == cluster_id)[0]
        if len(cluster_indices) > 0:
            wages = accepted_contracts[cluster_indices]
            average_utility = np.mean(accepted_utils[cluster_indices])
            res = linprog(-cluster_centers[cluster_id], A_eq=np.vstack([np.ones(m_outcomes), v]), b_eq=[1, average_utility], bounds=((0, 1), )*m_outcomes, method='highs')
            if res.success:
                p_estimate = res.x
                cost_estimates[cluster_id] = np.dot(p_estimate, cluster_centers[cluster_id])
            else:
                cost_estimates[cluster_id] = 0.0
        else:
            cost_estimates[cluster_id] = 0.0
    
    if rejected_contracts is not None:
        for contract in rejected_contracts:
            estimated_utilities = np.array([np.dot(agent_setting[i, :-1], contract) - agent_setting[i, -1] for i in range(n_clusters)])
            max_utility = np.max(estimated_utilities)
            if max_utility >= 0:
                for cluster_id in range(n_clusters):
                    if estimated_utilities[cluster_id] >= 0:
                        cost_estimates[cluster_id] = max(cost_estimates[cluster_id], np.dot(agent_setting[cluster_id, :-1], contract))
    
    p_estimates = np.array([cluster_centers[i] / np.sum(cluster_centers[i]) if np.sum(cluster_centers[i]) > 0 else np.ones(m_outcomes)/m_outcomes for i in range(n_clusters)])
    agent_setting = np.hstack([p_estimates, cost_estimates.reshape(-1, 1)])
    return agent_setting
```
