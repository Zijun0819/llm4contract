```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        base_p = v / v.sum() if v.sum() > 0 else np.ones(len(v)) / len(v)
        return np.column_stack([base_p, 0.0]).reshape(1, -1)
    
    def feasible_p(w, u_target):
        n_out = len(w)
        obj = w
        A_eq = np.vstack([np.ones(n_out), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = [(0, 1) for _ in range(n_out)]
        res = linprog(obj, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs-ds')
        return res.x if res.success else None
    
    inferred_ps = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        util_target = log['Principal Utility']
        p_opt = feasible_p(w, util_target)
        if p_opt is not None:
            inferred_ps.append(p_opt)
    
    if not inferred_ps:
        p0 = np.ones(len(v)) / len(v)
        c0 = 0.0
        return np.column_stack([p0, c0]).reshape(1, -1)
    
    X = np.vstack(inferred_ps)
    max_components = min(10, len(X)) if len(X) > 1 else 1
    gm = GaussianMixture(n_components=max_components, random_state=42, n_init=5).fit(X)
    clusters = gm.predict(X)
    unique_clusters = np.unique(clusters)
    cluster_centers = gm.means_
    
    wage_dict = {i: [] for i in unique_clusters}
    for idx, log in enumerate(accepted_logs):
        if inferred_ps[idx] is not None:
            w = np.array(log['Contract'])
            cluster_idx = clusters[idx]
            wage_dict[cluster_idx].append(w)
    
    c_vals = {}
    for cluster in unique_clusters:
        wages = wage_dict[cluster]
        if wages:
            utilities = [np.dot(cluster_centers[cluster], w) for w in wages]
            c_vals[cluster] = np.min(utilities)
        else:
            c_vals[cluster] = 0.0
    
    if rejected_logs:
        rej_wages = [np.array(log['Contract']) for log in rejected_logs]
        for i, cluster in enumerate(unique_clusters):
            rej_utils = [np.dot(cluster_centers[cluster], w) for w in rej_wages]
            max_rej_util = np.max(rej_utils) if rej_utils else -np.inf
            if max_rej_util > c_vals[cluster]:
                c_vals[cluster] = max_rej_util
    
    for cluster in unique_clusters:
        if c_vals[cluster] < 0:
            c_vals[cluster] = 0.0
    
    action_settings = []
    for cluster in unique_clusters:
        p_vec = cluster_centers[cluster]
        c_val = c_vals[cluster]
        action_settings.append(np.append(p_vec, c_val))
    
    return np.array(action_settings)
```
