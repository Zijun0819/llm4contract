```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint
from sklearn.mixture import GaussianMixture
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        res = minimize(lambda p: -np.dot(p, w), 
                      x0=np.ones(m_outcomes)/m_outcomes,
                      constraints=[{'type': 'eq', 'fun': lambda p: np.dot(p, v) - u_p},
                                  {'type': 'eq', 'fun': lambda p: np.sum(p) - 1}],
                      bounds=[(0, 1)] * m_outcomes,
                      method='SLSQP')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(12, len(p_list))
    
    if len(p_list) > 1:
        gmm = GaussianMixture(n_components=n_candidates, covariance_type='diag', random_state=42)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = p_array
    
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_accepted_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_accepted_util = min(min_accepted_util, agent_util)
        
        max_rejected_util = -np.inf
        for log in rejected_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util < 0:
                max_rejected_util = max(max_rejected_util, agent_util)
        
        lb = 0.0
        if min_accepted_util != np.inf:
            lb = max(lb, min_accepted_util)
        if max_rejected_util != -np.inf:
            lb = max(lb, max_rejected_util + 1e-8)
        
        cost_lower_bounds[a] = lb
    
    def constraint_violation(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            best_util = np.max(agent_utils)
            
            if log['Agent Action'] == 1:
                if best_util < -1e-8:
                    violation += max(0, -best_util)
                for a in range(n_actions):
                    if agent_utils[a] >= best_util - 1e-8 and costs[a] > np.dot(p_centroids[a], w):
                        violation += max(0, costs[a] - np.dot(p_centroids[a], w))
            else:
                if best_util >= -1e-8:
                    violation += max(0, best_util)
        
        return violation
    
    def objective(costs):
        return constraint_violation(costs) + 1e-6 * np.sum(costs**2)
    
    constraints = [LinearConstraint(np.eye(n_actions), cost_lower_bounds, np.inf)]
    res = minimize(objective, cost_lower_bounds, method='SLSQP', 
                  bounds=Bounds(cost_lower_bounds, np.inf),
                  constraints=constraints,
                  options={'maxiter': 1000, 'ftol': 1e-8})
    
    final_costs = res.x if res.success else cost_lower_bounds
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
