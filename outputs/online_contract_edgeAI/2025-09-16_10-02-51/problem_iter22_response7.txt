```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0.0, 1.0)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p = res.x
            if np.all(p >= 0) and np.isclose(np.sum(p), 1.0, atol=1e-12) and np.isclose(np.dot(v, p), u_p, atol=1e-12):
                p_list.append(p)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(12, max(1, len(p_list)))
    if n_candidates > 1:
        gmm = GaussianMixture(n_components=n_candidates, covariance_type='diag', random_state=42, n_init=10)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = p_array
    
    p_centroids = np.clip(p_centroids, 0.0, 1.0)
    p_centroids = p_centroids / np.sum(p_centroids, axis=1, keepdims=True)
    n_actions = len(p_centroids)
    
    epsilon = 1e-12
    cost_lower_bounds = np.zeros(n_actions)
    cost_upper_bounds = np.full(n_actions, np.inf)
    
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= -epsilon:
                min_util = min(min_util, agent_util)
        if min_util != np.inf:
            cost_lower_bounds[a] = max(0.0, min_util - epsilon)
        
        max_util = -np.inf
        for log in rejected_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util < epsilon:
                max_util = max(max_util, agent_util)
        if max_util != -np.inf:
            cost_upper_bounds[a] = max(0.0, -max_util + epsilon)
    
    def objective(costs):
        violation = 0.0
        penalty = 1e6
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            best_action = np.argmax(utils)
            
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    violation += penalty * (-max_util)
                for a in range(n_actions):
                    if a != best_action:
                        incentive_diff = utils[best_action] - utils[a]
                        if incentive_diff < epsilon:
                            violation += penalty * (epsilon - incentive_diff)
            else:
                if max_util >= -epsilon:
                    violation += penalty * (max_util + epsilon)
        return violation
    
    bounds = Bounds(cost_lower_bounds, cost_upper_bounds)
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lower_bounds},
                   {'type': 'ineq', 'fun': lambda x: cost_upper_bounds - x}]
    res = minimize(objective, cost_lower_bounds, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 10000, 'ftol': 1e-12})
    final_costs = res.x if res.success else cost_lower_bounds
    final_costs = np.clip(final_costs, 0.0, None)
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
