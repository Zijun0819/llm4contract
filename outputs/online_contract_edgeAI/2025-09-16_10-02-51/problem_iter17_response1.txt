```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint, NonlinearConstraint
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans
from scipy.spatial.distance import cdist

def agent_solver(v, content):
    m_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = minimize(lambda p: np.dot(c, p), x0=np.ones(m_outcomes)/m_outcomes, 
                      constraints=[{'type': 'eq', 'fun': lambda p: np.sum(p) - 1},
                                  {'type': 'eq', 'fun': lambda p: np.dot(v, p) - u_p}],
                      bounds=bounds, method='SLSQP')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    if len(p_list) > 1:
        distortions = []
        max_clusters = min(10, len(p_list))
        for k in range(1, max_clusters + 1):
            kmeans = KMeans(n_clusters=k, random_state=42, n_init=10).fit(p_array)
            distortions.append(kmeans.inertia_)
        if len(distortions) > 1:
            elbow = np.argmin(np.diff(distortions)) + 1
            n_components = min(elbow + 1, max_clusters)
        else:
            n_components = 1
        gmm = GaussianMixture(n_components=n_components, random_state=42, n_init=10)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = p_array
    
    n_actions = len(p_centroids)
    
    cost_lb = np.zeros(n_actions)
    cost_ub = np.full(n_actions, np.inf)
    epsilon = 1e-8
    
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_accept_util = np.inf
        max_reject_util = -np.inf
        
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util >= 0:
                min_accept_util = min(min_accept_util, util)
        
        for log in rejected_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util < 0:
                max_reject_util = max(max_reject_util, util)
        
        if min_accept_util != np.inf:
            cost_lb[a] = max(0, min_accept_util - epsilon)
        if max_reject_util != -np.inf:
            cost_ub[a] = max_reject_util + epsilon
    
    def ic_constraint(costs):
        violations = []
        for a in range(n_actions):
            for b in range(n_actions):
                if a != b:
                    for log in content:
                        w = np.array(log['Contract'])
                        util_a = np.dot(p_centroids[a], w) - costs[a]
                        util_b = np.dot(p_centroids[b], w) - costs[b]
                        violations.append(util_a - util_b)
        return np.array(violations)
    
    def ir_constraint(costs):
        violations = []
        for a in range(n_actions):
            for log in accepted_logs:
                w = np.array(log['Contract'])
                util = np.dot(p_centroids[a], w) - costs[a]
                if log['Agent Action'] == 1:
                    violations.append(util)
                else:
                    violations.append(-util)
        return np.array(violations)
    
    def objective(costs):
        penalty = 1e6
        ic_viol = np.sum(np.minimum(0, ic_constraint(costs))**2)
        ir_viol = np.sum(np.minimum(0, ir_constraint(costs))**2)
        return ic_viol + ir_viol
    
    x0 = (cost_lb + np.minimum(cost_ub, cost_lb + 1.0)) / 2
    
    constraints = [
        NonlinearConstraint(ic_constraint, 0, np.inf),
        NonlinearConstraint(ir_constraint, 0, np.inf)
    ]
    
    bounds = Bounds(cost_lb, cost_ub)
    
    best_result = None
    best_obj = np.inf
    
    for _ in range(5):
        init = np.random.uniform(cost_lb, np.minimum(cost_ub, cost_lb + 1.0))
        res = minimize(objective, init, method='trust-constr', bounds=bounds,
                      constraints=constraints, options={'maxiter': 1000, 'verbose': 0})
        if res.success and res.fun < best_obj:
            best_result = res
            best_obj = res.fun
    
    if best_result is None:
        final_costs = x0
    else:
        final_costs = best_result.x
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
