```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    
    if not content:
        uniform_p = np.ones(m_outcomes) / m_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.zeros((1, 1))])
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0.0, 1.0)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(12, len(p_list))
    if n_candidates > 0:
        gmm = GaussianMixture(n_components=n_candidates, random_state=42, n_init=10, max_iter=1000)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    
    n_actions = len(p_centroids)
    
    cost_lb = np.zeros(n_actions)
    cost_ub = np.full(n_actions, np.inf)
    epsilon = 1e-10
    
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_accepted = np.inf
        max_rejected = -np.inf
        
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util >= 0:
                min_accepted = min(min_accepted, util)
        
        for log in rejected_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util < 0:
                max_rejected = max(max_rejected, util)
        
        if min_accepted != np.inf and max_rejected != -np.inf:
            cost_lb[a] = max(0.0, min_accepted - epsilon)
            cost_ub[a] = max_rejected + epsilon
            if cost_lb[a] > cost_ub[a]:
                cost_ub[a] = cost_lb[a]
        elif min_accepted != np.inf:
            cost_lb[a] = max(0.0, min_accepted - epsilon)
        elif max_rejected != -np.inf:
            cost_lb[a] = 0.0
            cost_ub[a] = max_rejected + epsilon
        else:
            cost_lb[a] = 0.0
    
    def objective(costs):
        total_violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            best_action = np.argmax(agent_utils)
            
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    total_violation += 1e12 * (-max_util)
                else:
                    for a in range(n_actions):
                        if a != best_action:
                            violation = max(0, agent_utils[a] - agent_utils[best_action])
                            total_violation += 1e12 * violation
            else:
                if max_util >= -epsilon:
                    total_violation += 1e12 * (max_util + epsilon)
        
        return total_violation
    
    bounds = Bounds(cost_lb, cost_ub)
    initial_guess = np.clip(0.5 * (cost_lb + cost_ub), cost_lb, cost_ub)
    
    res = minimize(objective, initial_guess, method='trust-constr', bounds=bounds, options={'maxiter': 10000, 'verbose': 0})
    if not res.success:
        res = minimize(objective, initial_guess, method='SLSQP', bounds=bounds, options={'maxiter': 10000})
    
    final_costs = res.x if res.success else cost_lb
    final_costs = np.maximum(final_costs, 0.0)
    
    return np.hstack([p_centroids, final_costs.reshape(-1, 1)])
```
