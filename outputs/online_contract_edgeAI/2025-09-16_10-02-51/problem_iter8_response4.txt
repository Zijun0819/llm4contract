```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture

def agent_solver(v, content):
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        p0 = np.ones(n_outcomes) / n_outcomes
        return np.hstack([p0, [0.0]]).reshape(1, -1)
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    rejected_contracts = np.array([log['Contract'] for log in rejected_logs]) if rejected_logs else np.array([]).reshape(0, n_outcomes)
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0, 1)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(n_outcomes) / n_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(10, max(1, len(p_list)))
    gmm = GaussianMixture(n_components=n_candidates, random_state=42, covariance_type='diag', max_iter=1000, n_init=3)
    gmm.fit(p_array)
    p_centroids = gmm.means_
    n_actions = len(p_centroids)
    
    epsilon = 1e-8
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for w in accepted_contracts:
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        cost_lower_bounds[a] = max(0, min_util - epsilon) if min_util != np.inf else 0.0
    
    rejected_utils = rejected_contracts @ p_centroids.T if rejected_contracts.size > 0 else np.array([])
    for a in range(n_actions):
        if rejected_contracts.size > 0:
            max_rej_util = np.max(rejected_utils[:, a])
            if max_rej_util + epsilon > cost_lower_bounds[a]:
                cost_lower_bounds[a] = max_rej_util + epsilon
    
    def objective(costs):
        penalty = 0.0
        penalty_weight = 1000.0
        for log in content:
            w = np.array(log['Contract'])
            utils = [np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)]
            max_util = np.max(utils)
            best_action = np.argmax(utils)
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    penalty += penalty_weight * (-max_util)
                for a in range(n_actions):
                    if a != best_action and utils[a] > utils[best_action] + epsilon:
                        penalty += penalty_weight * (utils[a] - utils[best_action])
            else:
                if max_util >= -epsilon:
                    penalty += penalty_weight * (max_util + epsilon)
        return penalty
    
    bounds = Bounds(cost_lower_bounds, np.full(n_actions, np.inf))
    res = minimize(objective, cost_lower_bounds, method='SLSQP', bounds=bounds, options={'maxiter': 1000, 'ftol': 1e-10})
    final_costs = res.x if res.success else cost_lower_bounds
    
    final_costs = np.maximum(final_costs, 0)
    p_centroids = np.clip(p_centroids, 0, 1)
    row_sums = p_centroids.sum(axis=1, keepdims=True)
    row_sums[row_sums == 0] = 1.0
    p_centroids /= row_sums
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
