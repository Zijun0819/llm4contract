```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds, LinearConstraint
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans

def agent_solver(v, content):
    v = np.asarray(v)
    m_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -np.array(w)
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success and np.all(res.x >= 0) and np.isclose(np.sum(res.x), 1.0):
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_samples = len(p_list)
    n_candidates = min(max(1, n_samples // 10), 10) if n_samples > 0 else 1
    
    if n_candidates > 0 and n_samples >= n_candidates:
        gmm = GaussianMixture(n_components=n_candidates, random_state=42, covariance_type='diag', max_iter=500)
        gmm.fit(p_array)
        p_centroids = gmm.means_
    else:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    
    n_actions = len(p_centroids)
    cost_lower_bounds = np.zeros(n_actions)
    epsilon = 1e-8
    
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        cost_lower_bounds[a] = max(0, min_util - epsilon) if min_util != np.inf else 0.0
    
    def objective(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            action_idx = np.argmax(utils)
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    violation += (-max_util) * 100
                elif utils[action_idx] < np.dot(p_centroids[action_idx], w) - costs[action_idx]:
                    violation += 1.0
            else:
                if max_util > epsilon:
                    violation += max_util * 100
        return violation
    
    bounds = Bounds(cost_lower_bounds, np.full(n_actions, np.inf))
    constraints = LinearConstraint(np.eye(n_actions), lb=cost_lower_bounds, ub=np.inf)
    
    initial_guess = cost_lower_bounds + epsilon
    res = minimize(objective, initial_guess, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 2000, 'ftol': 1e-10})
    
    final_costs = res.x if res.success else cost_lower_bounds
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    
    return agent_setting
```
