```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans

def agent_solver(v: np.ndarray, content: pd.DataFrame) -> np.ndarray:
    n_actions = 5
    n_outcomes = len(v)
    contracts = np.array([log['Contract'] for log in content.to_dict('records')])
    utilities = np.array([log['Principal Utility'] for log in content.to_dict('records')])
    actions = np.array([log['Agent Action'] for log in content.to_dict('records')])
    accepted = actions == 1
    rejected = actions == -1
    
    def solve_p(w, u):
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u])
        res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)]*n_outcomes, method='highs')
        return res.x if res.success else None

    candidate_ps = []
    for i in np.where(accepted)[0]:
        p = solve_p(contracts[i], utilities[i])
        if p is not None:
            candidate_ps.append(p)
    
    if not candidate_ps:
        kmeans = KMeans(n_clusters=n_actions, random_state=0, n_init=10).fit(contracts[accepted])
        p_centers = kmeans.cluster_centers_
        p0 = p_centers / p_centers.sum(axis=1, keepdims=True)
    else:
        candidate_ps = np.array(candidate_ps)
        kmeans = KMeans(n_clusters=n_actions, random_state=0, n_init=10).fit(candidate_ps)
        p0 = kmeans.cluster_centers_
        p0 = p0 / p0.sum(axis=1, keepdims=True)
    
    costs = np.zeros(n_actions)
    if np.any(accepted):
        for a in range(n_actions):
            mask_accepted = accepted & (np.argmax(p0 @ contracts.T, axis=0) == a)
            if np.any(mask_accepted):
                costs[a] = np.min(p0[a] @ contracts[mask_accepted].T)
    if np.any(rejected):
        for a in range(n_actions):
            rej_util = p0[a] @ contracts[rejected].T
            costs[a] = max(costs[a], np.max(rej_util) if rej_util.size > 0 else costs[a])
    return np.hstack([p0, costs.reshape(-1, 1)])
```
