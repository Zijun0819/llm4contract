```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from scipy.spatial.distance import cdist

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = v.shape[0]
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    n_accepted = len(accepted_logs)
    
    if n_accepted == 0:
        raise ValueError("No accepted contracts in logs")
    
    contracts = np.array([log['Contract'] for log in accepted_logs])
    principal_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    def infer_p(w, u_target):
        res = linprog(w, A_eq=[np.ones(n_outcomes), v - w], 
                      b_eq=[1, u_target], bounds=[(0, 1)] * n_outcomes, method='highs')
        return res.x if res.success else None
    
    ps = []
    for i in range(n_accepted):
        if principal_utils[i] <= 0:
            continue
        p_i = infer_p(contracts[i], principal_utils[i])
        if p_i is not None:
            ps.append(p_i)
    
    ps = np.array(ps)
    
    if ps.size == 0:
        default_p = np.ones(n_outcomes) / n_outcomes
        default_cost = np.mean([np.min(w) for w in contracts])
        return np.hstack([default_p.reshape(1, -1), [[default_cost]]])
    
    max_clusters = min(20, len(ps) // 2)
    if max_clusters < 1:
        max_clusters = 1
    
    best_score = -np.inf
    best_labels = None
    best_p0 = None
    
    for n_clusters in range(1, max_clusters + 1):
        if len(ps) < n_clusters:
            break
        gmm = GaussianMixture(n_components=n_clusters, random_state=0)
        labels = gmm.fit_predict(ps)
        centers = gmm.means_
        within_cluster_var = np.sum([np.sum(cdist(ps[labels == i], [centers[i]])) 
                                    for i in range(n_clusters)])
        score = -within_cluster_var / n_clusters
        if score > best_score:
            best_score = score
            best_labels = labels
            best_p0 = centers
    
    n_actions = len(best_p0)
    
    assignment = np.full(n_accepted, -1)
    for i in range(n_accepted):
        utilities = best_p0 @ contracts[i]
        assignment[i] = np.argmax(utilities)
    
    worst_payoff = np.zeros(n_actions)
    for a in range(n_actions):
        mask = assignment == a
        if np.any(mask):
            min_wages = np.min(contracts[mask], axis=0)
            worst_payoff[a] = best_p0[a] @ min_wages
    
    rej_logs = [log for log in content if log['Agent Action'] == -1]
    if rej_logs:
        rej_contracts = np.array([log['Contract'] for log in rej_logs])
        rej_utils = best_p0 @ rej_contracts.T
        rej_threshold = np.max(rej_utils, axis=1)
        costs = np.maximum(worst_payoff, rej_threshold)
    else:
        costs = worst_payoff
    
    agent_settings = np.hstack([best_p0, costs.reshape(-1, 1)])
    return agent_settings
```
