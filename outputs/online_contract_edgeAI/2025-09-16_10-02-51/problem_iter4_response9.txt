```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import BayesianGaussianMixture
from sklearn.cluster import KMeans
import warnings
warnings.filterwarnings('ignore')

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        if not rejected_logs:
            return np.zeros((1, m_outcomes + 1))
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    max_components = min(10, len(p_list))
    if max_components == 1:
        p_centroids = np.mean(p_array, axis=0, keepdims=True)
    else:
        bgmm = BayesianGaussianMixture(n_components=max_components, random_state=42, max_iter=100)
        bgmm.fit(p_array)
        p_centroids = bgmm.means_
        if len(p_centroids) < max_components:
            kmeans = KMeans(n_clusters=max_components, random_state=42)
            kmeans.fit(p_array)
            p_centroids = kmeans.cluster_centers_
    
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util >= 0:
                min_util = min(min_util, util)
        cost_lower_bounds[a] = 0.0 if min_util == np.inf else min_util
    
    cost_upper_bounds = np.full(n_actions, np.inf)
    for a in range(n_actions):
        p_a = p_centroids[a]
        for log in rejected_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util >= 0:
                cost_upper_bounds[a] = util if cost_upper_bounds[a] == np.inf else min(cost_upper_bounds[a], util)
    
    def objective(costs):
        total_violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            best_action = np.argmax(agent_utils)
            best_util = agent_utils[best_action]
            if log['Agent Action'] == 1:
                if max_util < 0:
                    total_violation += -max_util
                for a in range(n_actions):
                    if a != best_action and agent_utils[a] > best_util:
                        total_violation += agent_utils[a] - best_util
            else:
                if max_util >= 0:
                    total_violation += max_util
        return total_violation
    
    bounds = Bounds(cost_lower_bounds, np.where(np.isfinite(cost_upper_bounds), cost_upper_bounds, 1e6))
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lower_bounds}]
    initial_costs = np.clip(cost_lower_bounds + 1e-6, cost_lower_bounds, np.where(np.isfinite(cost_upper_bounds), cost_upper_bounds, cost_lower_bounds + 1))
    res = minimize(objective, initial_costs, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 1000, 'ftol': 1e-8})
    final_costs = res.x if res.success else initial_costs
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
