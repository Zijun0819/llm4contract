```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler
import cvxpy as cp

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    n_outcomes = len(v)
    
    def infer_p_strategy(w, u_target):
        p = cp.Variable(n_outcomes)
        objective = cp.Minimize(cp.sum_squares(p))
        constraints = [
            p >= 0,
            cp.sum(p) == 1,
            w @ p == u_target + np.random.normal(0, 1e-6)
        ]
        prob = cp.Problem(objective, constraints)
        prob.solve(solver=cp.ECOS)
        return p.value if prob.status == 'optimal' else None

    candidate_ps = []
    for log in accepted_logs:
        w_vec = np.array(log['Contract'])
        u_val = log['Principal Utility']
        p_candidate = infer_p_strategy(w_vec, u_val)
        if p_candidate is not None:
            candidate_ps.append(p_candidate)
    
    if not candidate_ps:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    X = np.array(candidate_ps)
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    clustering = DBSCAN(eps=0.5, min_samples=2).fit(X_scaled)
    labels = clustering.labels_
    n_clusters = len(set(labels)) - (1 if -1 in labels else 0)
    unique_labels = set(labels) - {-1}
    cluster_centers = np.array([X[labels == label].mean(axis=0) for label in unique_labels])
    if n_clusters == 0:
        cluster_centers = X.mean(axis=0, keepdims=True)
        n_clusters = 1
    
    def optimize_costs(p_actions, accepted, rejected):
        n_actions = len(p_actions)
        c = cp.Variable(n_actions)
        constraints = []
        for log in accepted:
            w = np.array(log['Contract'])
            utilities = [p @ w - c_i for p, c_i in zip(p_actions, c)]
            best_util = cp.max(cp.hstack(utilities))
            constraints.append(best_util >= 0)
        for log in rejected:
            w = np.array(log['Contract'])
            utilities = [p @ w - c_i for p, c_i in zip(p_actions, c)]
            best_util = cp.max(cp.hstack(utilities))
            constraints.append(best_util < 0)
        for i in range(n_actions):
            constraints.append(c[i] >= 0)
        objective = cp.Minimize(cp.sum(c))
        prob = cp.Problem(objective, constraints)
        prob.solve(solver=cp.ECOS)
        return c.value if prob.status == 'optimal' else np.zeros(n_actions)
    
    costs = optimize_costs(cluster_centers, accepted_logs, rejected_logs)
    agent_setting = np.hstack([cluster_centers, costs.reshape(-1, 1)])
    return agent_setting
```
