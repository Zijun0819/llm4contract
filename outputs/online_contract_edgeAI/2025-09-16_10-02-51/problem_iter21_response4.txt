```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from scipy.spatial.distance import cdist
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans
import warnings
warnings.filterwarnings('ignore')

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    
    if len(p_list) <= 1:
        n_candidates = 1
    else:
        n_candidates = min(12, len(p_list))
    
    if len(p_list) > 1:
        try:
            gmm = GaussianMixture(n_components=n_candidates, random_state=42, n_init=10)
            gmm.fit(p_array)
            p_centroids = gmm.means_
        except:
            kmeans = KMeans(n_clusters=n_candidates, random_state=42, n_init=10)
            kmeans.fit(p_array)
            p_centroids = kmeans.cluster_centers_
    else:
        p_centroids = p_array.reshape(1, -1)
    
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    cost_upper_bounds = np.full(n_actions, np.inf)
    
    epsilon = 1e-8
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_w_accept = np.inf
        max_w_reject = -np.inf
        
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0 - epsilon:
                min_w_accept = min(min_w_accept, agent_util)
        
        for log in rejected_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util < 0 + epsilon:
                max_w_reject = max(max_w_reject, agent_util)
        
        if min_w_accept != np.inf and max_w_reject != -np.inf:
            cost_lower_bounds[a] = max(0, max_w_reject + epsilon, min_w_accept - 2*epsilon)
        elif min_w_accept != np.inf:
            cost_lower_bounds[a] = max(0, min_w_accept - epsilon)
        else:
            cost_lower_bounds[a] = 0.0
        
        if max_w_reject != -np.inf:
            cost_upper_bounds[a] = max_w_reject - epsilon
    
    def objective(costs):
        violation = 0.0
        penalty_weight = 100.0
        
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            best_action = np.argmax(utils)
            best_util = utils[best_action]
            
            if log['Agent Action'] == 1:
                if best_util < -epsilon:
                    violation += penalty_weight * (-best_util)
                for a in range(n_actions):
                    if a != best_action and utils[a] > best_util + epsilon:
                        violation += penalty_weight * (utils[a] - best_util)
            else:
                if best_util >= -epsilon:
                    violation += penalty_weight * (best_util + epsilon)
        
        return violation
    
    bounds = Bounds(cost_lower_bounds, cost_upper_bounds)
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lower_bounds}]
    
    x0 = cost_lower_bounds.copy()
    for a in range(n_actions):
        if cost_upper_bounds[a] < np.inf:
            x0[a] = (cost_lower_bounds[a] + cost_upper_bounds[a]) / 2
    
    res = minimize(objective, x0, method='SLSQP', bounds=bounds, constraints=constraints, 
                  options={'maxiter': 1000, 'ftol': 1e-10, 'eps': 1e-10})
    
    final_costs = res.x if res.success else x0
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
