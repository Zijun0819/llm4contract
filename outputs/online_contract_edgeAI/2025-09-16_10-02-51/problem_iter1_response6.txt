```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize, LinearConstraint, Bounds
from sklearn.cluster import KMeans, DBSCAN
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    def mini_lp_p(w, u):
        m = len(w)
        A_eq = np.vstack((np.ones(m), v - w))
        b_eq = np.array([1, u])
        bounds = Bounds(0, 1)
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    if not accepted_logs:
        return np.zeros((1, 13))
    candidate_ps = []
    for log in accepted_logs:
        w_i = log['Contract']
        u_i = log['Principal Utility']
        p_i = mini_lp_p(w_i, u_i)
        if p_i is not None and np.all(p_i >= 0) and np.sum(p_i) > 0.99:
            candidate_ps.append(p_i)
    if not candidate_ps:
        return np.zeros((1, 13))
    all_p = np.array(candidate_ps)
    silhouette_scores = []
    max_clusters = min(10, len(all_p) - 1)
    for n in range(2, max_clusters + 1):
        kmeans = KMeans(n_clusters=n, random_state=0, n_init=10).fit(all_p)
        labels = kmeans.labels_
        if len(np.unique(labels)) > 1:
            score = silhouette_score(all_p, labels)
            silhouette_scores.append((n, score))
    if silhouette_scores:
        best_n = max(silhouette_scores, key=lambda x: x[1])[0]
    else:
        best_n = 1
    kmeans = KMeans(n_clusters=best_n, random_state=0, n_init=10).fit(all_p)
    p0 = kmeans.cluster_centers_
    assigns = np.full(len(content), -1)
    for i, log in enumerate(content):
        if log['Agent Action'] == 1:
            w = log['Contract']
            util = p0 @ w
            assigns[i] = np.argmax(util)
    c_ir = np.zeros(best_n)
    action_occurence = np.zeros(best_n)
    for a in range(best_n):
        indices = np.where(assigns == a)[0]
        if indices.size > 0:
            wages = np.array([content[i]['Contract'] for i in indices])
            min_income = np.min(wages, axis=0)
            c_ir[a] = p0[a] @ min_income
            action_occurence[a] = len(indices)
    rej_idx = [i for i, log in enumerate(content) if log['Agent Action'] == -1]
    if rej_idx:
        wages_rej = np.array([content[i]['Contract'] for i in rej_idx])
        reject_util = np.max(p0 @ wages_rej.T, axis=1)
        c_ir = np.maximum(c_ir, reject_util)
    action_mask = action_occurence > 0
    if np.sum(action_mask) == 0:
        return np.zeros((1, 13))
    valid_p = p0[action_mask]
    valid_c = c_ir[action_mask]
    agent_setting = np.hstack([valid_p, valid_c[:, np.newaxis]])
    return agent_setting
```
