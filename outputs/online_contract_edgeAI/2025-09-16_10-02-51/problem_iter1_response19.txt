```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from scipy.spatial.distance import cdist

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 10
    m_outcomes = v.shape[0]
    L = len(content)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        p0 = np.ones((1, m_outcomes)) / m_outcomes
        c0 = np.zeros(1)
        return np.hstack([p0, c0[:, np.newaxis]])
    
    def solve_p(w, u):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m
        res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None
    
    candidate_ps = []
    candidate_ws = []
    for log in accepted_logs:
        w_i = log['Contract']
        u_i = log['Principal Utility']
        p_i = solve_p(w_i, u_i)
        if p_i is not None:
            candidate_ps.append(p_i)
            candidate_ws.append(w_i)
    
    if not candidate_ps:
        p0 = np.ones((1, m_outcomes)) / m_outcomes
        c0 = np.zeros(1)
        return np.hstack([p0, c0[:, np.newaxis]])
    
    all_p = np.array(candidate_ps)
    
    cluster_models = [KMeans(n_clusters=n, random_state=0, n_init=10) for n in range(2, 2*n_candidates)]
    sil_scores = []
    for model in cluster_models:
        try:
            labels = model.fit_predict(all_p)
            if len(np.unique(labels)) > 1:
                centroids = model.cluster_centers_
                dists = cdist(all_p, centroids)
                sil_score = np.mean((np.min(dists, axis=1) - dists[np.arange(len(all_p)), labels]) / np.min(dists, axis=1))
                sil_scores.append(sil_score)
            else:
                sil_scores.append(-1)
        except:
            sil_scores.append(-1)
    
    best_n = np.argmax(sil_scores) + 2
    best_model = cluster_models[best_n-2]
    if best_n > len(all_p):
        best_n = min(len(all_p), n_candidates)
        kmeans = KMeans(n_clusters=best_n, random_state=0, n_init=10).fit(all_p)
        p0 = kmeans.cluster_centers_
    else:
        p0 = best_model.cluster_centers_
    
    n_actions = p0.shape[0]
    
    assignments = np.full(len(accepted_logs), -1)
    for i, p_vec in enumerate(all_p):
        utilities = p_vec @ np.array(candidate_ws)
        best_action = np.argmax(utilities)
        assignments[i] = best_action
    
    max_costs = np.zeros(n_actions)
    for a in range(n_actions):
        mask = assignments == a
        if np.any(mask):
            group_ws = np.array([candidate_ws[i] for i in np.where(mask)[0]]).T
            support_utils = p0[a] @ group_ws
            max_costs[a] = np.max(support_utils)
        else:
            max_costs[a] = 0.0
    
    if rejected_logs:
        rej_wages = np.array([log['Contract'] for log in rejected_logs]).T
        rej_utils = p0 @ rej_wages
        rej_constraints = np.max(rej_utils, axis=1)
        max_costs = np.maximum(max_costs, rej_constraints)
    
    final_costs = max_costs
    
    agent_setting = np.hstack([p0, final_costs[:, np.newaxis]])
    
    return agent_setting
```
