```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    if not content:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.zeros((1, 1))])
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    inferred_probs = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        if u_p <= 1e-12:
            continue
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0.0, 1.0)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            inferred_probs.append(res.x)
    
    if not inferred_probs:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        inferred_probs = [uniform_p]
    
    prob_matrix = np.array(inferred_probs)
    
    n_components = min(12, len(inferred_probs), 3)
    if n_components > 0:
        gmm = GaussianMixture(n_components=n_components, covariance_type='full', random_state=42, n_init=10, max_iter=1000)
        gmm.fit(prob_matrix)
        centroids = gmm.means_
    else:
        centroids = np.ones((1, n_outcomes)) / n_outcomes
    
    centroids = np.clip(centroids, 0, 1)
    row_sums = centroids.sum(axis=1, keepdims=True)
    centroids = np.divide(centroids, row_sums, where=row_sums != 0, out=np.zeros_like(centroids))
    n_actions = centroids.shape[0]
    
    epsilon = 1e-10
    cost_lb = np.zeros(n_actions)
    cost_ub = np.full(n_actions, np.inf)
    
    for a in range(n_actions):
        p_a = centroids[a]
        min_accept_util = np.inf
        for log in accepted_logs:
            w_vec = np.array(log['Contract'])
            agent_util = np.dot(p_a, w_vec)
            if agent_util >= 0:
                min_accept_util = min(min_accept_util, agent_util)
        if min_accept_util != np.inf:
            cost_lb[a] = max(0, min_accept_util - epsilon)
        
        max_reject_util = -np.inf
        for log in rejected_logs:
            w_vec = np.array(log['Contract'])
            agent_util = np.dot(p_a, w_vec)
            if agent_util < 0:
                max_reject_util = max(max_reject_util, agent_util)
        if max_reject_util != -np.inf:
            cost_ub[a] = -max_reject_util + epsilon
        else:
            cost_ub[a] = cost_lb[a] + 1.0 if cost_lb[a] > 0 else 1.0
    
    def constraint_penalty(costs):
        penalty = 0.0
        penalty_scale = 1e8
        for log in content:
            w_vec = np.array(log['Contract'])
            agent_utils = np.array([np.dot(centroids[i], w_vec) - costs[i] for i in range(n_actions)])
            max_util = np.max(agent_utils)
            best_action = np.argmax(agent_utils)
            
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    penalty += penalty_scale * (-max_util - epsilon)
                for i in range(n_actions):
                    if i != best_action and agent_utils[i] > agent_utils[best_action] - epsilon:
                        penalty += penalty_scale * (agent_utils[i] - agent_utils[best_action] + epsilon)
            else:
                if max_util >= -epsilon:
                    penalty += penalty_scale * (max_util + epsilon)
        return penalty
    
    bounds = Bounds(cost_lb, cost_ub)
    initial_costs = np.clip((cost_lb + cost_ub) / 2, cost_lb, cost_ub)
    
    res = minimize(constraint_penalty, initial_costs, method='L-BFGS-B', bounds=bounds, options={'maxiter': 10000, 'ftol': 1e-12})
    
    if res.success:
        final_costs = res.x
    else:
        final_costs = cost_lb
    
    final_costs = np.maximum(final_costs, 0.0)
    
    return np.hstack([centroids, final_costs.reshape(-1, 1)])
```
