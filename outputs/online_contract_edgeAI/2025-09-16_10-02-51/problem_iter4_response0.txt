```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import BayesianGaussianMixture
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        return np.zeros((1, m_outcomes + 1))
    
    p_array = np.array(p_list)
    scaler = StandardScaler()
    p_scaled = scaler.fit_transform(p_array)
    
    max_n_components = min(12, len(p_list))
    gmm = BayesianGaussianMixture(n_components=max_n_components, random_state=42, max_iter=1000)
    gmm.fit(p_scaled)
    p_centroids = scaler.inverse_transform(gmm.means_)
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util >= 0:
                min_util = min(min_util, util)
        cost_lower_bounds[a] = min_util if min_util != np.inf else 0.0
    
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            p_a = p_centroids[a]
            util = np.dot(p_a, w) - cost_lower_bounds[a]
            if util >= 0:
                cost_lower_bounds[a] = np.dot(p_a, w) + 1e-8
    
    def objective(costs):
        total_violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            best_action = np.argmax(agent_utils)
            if log['Agent Action'] == 1:
                if max_util < 0:
                    total_violation += 100.0 * (-max_util)
                for a in range(n_actions):
                    if a != best_action and agent_utils[a] > agent_utils[best_action] - 1e-8:
                        total_violation += 10.0 * (agent_utils[a] - agent_utils[best_action] + 1e-8)
            else:
                if max_util >= 0:
                    total_violation += 50.0 * max_util
        reg = 0.01 * np.sum(np.abs(costs - cost_lower_bounds))
        return total_violation + reg
    
    bounds = Bounds(cost_lower_bounds, np.inf)
    constraints = [{'type': 'ineq', 'fun': lambda x: x - cost_lower_bounds}]
    res = minimize(objective, cost_lower_bounds, method='SLSQP', bounds=bounds, constraints=constraints, options={'maxiter': 2000, 'ftol': 1e-8})
    final_costs = res.x
    
    for i in range(n_actions):
        if final_costs[i] < cost_lower_bounds[i] or not np.isfinite(final_costs[i]):
            final_costs[i] = cost_lower_bounds[i]
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
