```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    n_outcomes = len(v)
    if not content:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.zeros((1, 1))])
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    inferred_probs = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_p = log['Principal Utility']
        if u_p <= 0:
            continue
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0.0, 1.0)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            inferred_probs.append(res.x)
    
    if not inferred_probs:
        inferred_probs = [np.ones(n_outcomes) / n_outcomes]
    
    prob_matrix = np.array(inferred_probs)
    n_samples = len(inferred_probs)
    n_candidates = min(max(1, n_samples // 10), 12)
    if n_candidates > 0:
        gmm = GaussianMixture(n_components=n_candidates, covariance_type='diag', n_init=10, max_iter=1000, random_state=42)
        gmm.fit(prob_matrix)
        centroids = gmm.means_
    else:
        centroids = np.ones((1, n_outcomes)) / n_outcomes
    centroids = np.clip(centroids, 0, 1)
    centroids = centroids / np.sum(centroids, axis=1, keepdims=True)
    n_actions = centroids.shape[0]
    
    epsilon = 1e-10
    cost_lower_bounds = np.zeros(n_actions)
    for a in range(n_actions):
        p_a = centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        cost_lower_bounds[a] = max(0.0, min_util - epsilon) if min_util != np.inf else 0.0
    
    for a in range(n_actions):
        p_a = centroids[a]
        for log in rejected_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= cost_lower_bounds[a] - epsilon:
                cost_lower_bounds[a] = max(cost_lower_bounds[a], agent_util + epsilon)
    
    def objective(costs):
        penalty = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            best_action = np.argmax(agent_utils)
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    penalty += 1e9 * (-max_util)
                else:
                    for a in range(n_actions):
                        if a != best_action:
                            gap = agent_utils[best_action] - agent_utils[a]
                            if gap < -epsilon:
                                penalty += 1e9 * (-gap)
            else:
                if max_util >= -epsilon:
                    penalty += 1e9 * (max_util + epsilon)
        return penalty
    
    bounds = Bounds(cost_lower_bounds, np.full(n_actions, np.inf))
    constraints = LinearConstraint(np.eye(n_actions), lb=cost_lower_bounds, ub=np.inf)
    initial_guess = cost_lower_bounds + 1e-10
    res = minimize(objective, initial_guess, method='trust-constr', bounds=bounds, constraints=constraints, options={'maxiter': 1000, 'verbose': 0})
    final_costs = res.x if res.success else cost_lower_bounds
    final_costs = np.maximum(final_costs, 0.0)
    
    return np.hstack([centroids, final_costs.reshape(-1, 1)])
```
