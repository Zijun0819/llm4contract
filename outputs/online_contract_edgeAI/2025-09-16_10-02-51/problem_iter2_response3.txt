```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    if not accepted_logs:
        return np.hstack([np.ones((1, m_outcomes)) / m_outcomes, np.zeros((1, 1))])
    
    def infer_distribution(w: np.ndarray, u: float) -> np.ndarray:
        A_eq = np.vstack([np.ones(m_outcomes), v - w])
        b_eq = np.array([1.0, u])
        res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m_outcomes, method='highs')
        if res.success:
            p = np.maximum(res.x, 0)
            if np.sum(p) > 0:
                p /= np.sum(p)
            else:
                p = np.ones(m_outcomes) / m_outcomes
            return p
        else:
            return np.ones(m_outcomes) / m_outcomes
    
    candidate_ps = []
    for log in accepted_logs:
        w_i = np.array(log['Contract'])
        u_i = log['Principal Utility']
        p_i = infer_distribution(w_i, u_i)
        candidate_ps.append(p_i)
    candidate_ps = np.array(candidate_ps)
    
    num_accepted = len(accepted_logs)
    if num_accepted == 1:
        n_clusters = 1
        p_centers = candidate_ps.reshape(1, -1)
    else:
        n_clusters = min(max(2, int(np.sqrt(num_accepted))), 15)
        try:
            gm = GaussianMixture(n_components=n_clusters, random_state=0, n_init=5)
            labels = gm.fit_predict(candidate_ps)
            p_centers = gm.means_
        except:
            kmeans = KMeans(n_clusters=n_clusters, random_state=0, n_init=10)
            labels = kmeans.fit_predict(candidate_ps)
            p_centers = kmeans.cluster_centers_
    
    w_rej = np.array([log['Contract'] for log in rejected_logs]) if rejected_logs else np.empty((0, m_outcomes))
    
    costs = np.zeros(n_clusters)
    for a in range(n_clusters):
        cluster_indices = np.where(labels == a)[0] if num_accepted > 1 else [0]
        if cluster_indices.size > 0:
            w_cluster = np.array([accepted_logs[i]['Contract'] for i in cluster_indices])
            utilities = p_centers[a] @ w_cluster.T
            cost_accept = np.min(utilities) if utilities.size > 0 else 0.0
        else:
            cost_accept = 0.0
        
        if w_rej.size > 0:
            rej_utilities = p_centers[a] @ w_rej.T
            cost_reject = np.max(rej_utilities) if rej_utilities.size > 0 else -np.inf
        else:
            cost_reject = -np.inf
        
        costs[a] = max(cost_accept, cost_reject, 0.0)
    
    unique_mask = np.ones(n_clusters, dtype=bool)
    for i in range(n_clusters):
        if unique_mask[i]:
            for j in range(i+1, n_clusters):
                if np.allclose(p_centers[i], p_centers[j], atol=1e-6):
                    unique_mask[j] = False
                    costs[i] = max(costs[i], costs[j])
    p_centers = p_centers[unique_mask]
    costs = costs[unique_mask]
    
    for i in range(len(p_centers)):
        p_centers[i] = np.maximum(p_centers[i], 0)
        if np.sum(p_centers[i]) > 0:
            p_centers[i] /= np.sum(p_centers[i])
        else:
            p_centers[i] = np.ones(m_outcomes) / m_outcomes
    
    return np.hstack([p_centers, costs.reshape(-1, 1)])
```
