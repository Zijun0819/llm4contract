```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances_argmin_min

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 10
    m_outcomes = len(v)
    L = len(content)
    
    accepted_w = []
    accepted_p_utilities = []
    accepted_u = []
    rejected_w = []
    
    for i, log in enumerate(content):
        w_i = np.array(log['Contract'])
        if log['Agent Action'] == 1:
            accepted_w.append(w_i)
            accepted_p_utilities.append(log['Principal Utility'])
            accepted_u.append(w_i @ v - log['Principal Utility'])
        else:
            rejected_w.append(w_i)
    
    accepted_w = np.array(accepted_w)
    accepted_u = np.array(accepted_u)
    rejected_w = np.array(rejected_w) if rejected_w else np.empty((0, m_outcomes))
    
    def solve_p(w, u_target):
        c = w
        A = np.vstack([np.ones(m_outcomes), v - w])
        b = np.array([1, u_target])
        result = linprog(c, A_eq=A, b_eq=b, bounds=[(0, 1)]*m_outcomes, method='highs')
        if result.success:
            return result.x
        return None
    
    candidate_ps = []
    for i in range(len(accepted_w)):
        p_i = solve_p(accepted_w[i], accepted_u[i])
        if p_i is not None:
            candidate_ps.append(p_i)
    
    if not candidate_ps:
        candidate_ps = [np.full(m_outcomes, 1/m_outcomes)]
    
    candidate_ps = np.array(candidate_ps)
    if len(candidate_ps) > n_candidates:
        kmeans = KMeans(n_clusters=n_candidates, random_state=0, n_init=10).fit(candidate_ps)
        p_centers = kmeans.cluster_centers_
    else:
        p_centers = candidate_ps
        n_candidates = len(candidate_ps)
    
    def compute_cost_for_action(a):
        indices = []
        for i, log in enumerate(content):
            if log['Agent Action'] == 1:
                w_i = np.array(log['Contract'])
                eu = p_centers[a] @ w_i
                best_eu = max(p_centers @ w_i)
                if np.isclose(eu, best_eu, atol=1e-6):
                    indices.append(i)
        if indices:
            min_w = min((np.array(content[i]['Contract']) for i in indices), key=lambda w: p_centers[a] @ w)
            return p_centers[a] @ min_w
        return 0.0
    
    c_ir = np.array([compute_cost_for_action(a) for a in range(n_candidates)])
    
    if len(rejected_w) > 0:
        rej_utils = p_centers @ rejected_w.T
        rej_max = rej_utils.max(axis=0)
        c_rej = np.max(rej_max) if len(rej_max) > 0 else 0.0
        c_ir = np.maximum(c_ir, c_rej)
    
    agent_setting = np.hstack([p_centers, c_ir.reshape(-1, 1)])
    return agent_setting
```
