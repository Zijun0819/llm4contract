```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.asarray(v)
    m_outcomes = len(v)
    epsilon = 1e-8
    
    if not content:
        uniform_p = np.ones(m_outcomes) / m_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.zeros((1, 1))])
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0.0, 1.0)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_list.append(res.x)
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    n_candidates = min(12, max(1, len(p_list)))
    gmm = GaussianMixture(n_components=n_candidates, random_state=42, n_init=20, max_iter=1000, tol=1e-6)
    gmm.fit(p_array)
    p_centroids = gmm.means_
    n_actions = len(p_centroids)
    
    cost_lb = np.zeros(n_actions)
    cost_ub = np.full(n_actions, np.inf)
    
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_accepted = np.inf
        max_rejected = -np.inf
        
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util >= -epsilon:
                min_accepted = min(min_accepted, util)
        
        for log in rejected_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util < -epsilon:
                max_rejected = max(max_rejected, util)
        
        if min_accepted != np.inf:
            cost_lb[a] = max(0.0, min_accepted - epsilon)
        else:
            cost_lb[a] = 0.0
        
        if max_rejected != -np.inf:
            cost_ub[a] = max_rejected + epsilon
    
    constraints = []
    for log in content:
        w = np.array(log['Contract'])
        agent_utils = np.array([np.dot(p_centroids[a], w) for a in range(n_actions)])
        if log['Agent Action'] == 1:
            best_action = np.argmax(agent_utils)
            for a in range(n_actions):
                if a != best_action:
                    constraints.append({
                        'type': 'ineq',
                        'fun': lambda c, a1=best_action, a2=a, u=agent_utils: 
                               (u[a1] - c[a1]) - (u[a2] - c[a2]) - epsilon
                    })
        else:
            for a in range(n_actions):
                constraints.append({
                    'type': 'ineq',
                    'fun': lambda c, a_idx=a, u=agent_utils: 
                           - (u[a_idx] - c[a_idx]) + epsilon
                })
    
    def objective(costs):
        violation = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            if log['Agent Action'] == 1:
                violation += max(0, -max_util)
            else:
                violation += max(0, max_util)
        return violation
    
    initial_guess = np.clip(cost_lb, 0, None)
    bounds = Bounds(cost_lb, cost_ub)
    
    res = minimize(objective, initial_guess, method='trust-constr', bounds=bounds, 
                   constraints=constraints, options={'maxiter': 10000, 'verbose': 0, 'gtol': 1e-10})
    
    if res.success:
        final_costs = np.maximum(res.x, 0.0)
    else:
        final_costs = np.maximum(initial_guess, 0.0)
    
    return np.hstack([p_centroids, final_costs.reshape(-1, 1)])
```
