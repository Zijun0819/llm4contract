```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint, NonlinearConstraint
from sklearn.mixture import GaussianMixture
from scipy.stats import gmean

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        return np.zeros((1, m_outcomes + 1))
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    p_list = []
    for i, w in enumerate(accepted_contracts):
        u_p = accepted_utils[i]
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1)] * m_outcomes
        try:
            res = minimize(lambda p: np.dot(c, p), 
                          x0=np.ones(m_outcomes)/m_outcomes,
                          constraints=[{'type': 'eq', 'fun': lambda p: np.dot(np.ones(m_outcomes), p) - 1},
                                       {'type': 'eq', 'fun': lambda p: np.dot(v, p) - u_p}],
                          bounds=bounds,
                          method='SLSQP')
            if res.success:
                p_list.append(res.x)
        except:
            continue
    
    if not p_list:
        p_list = [np.ones(m_outcomes) / m_outcomes]
    
    p_array = np.array(p_list)
    if len(p_list) > 1:
        n_candidates = min(12, len(p_list))
        gmm = GaussianMixture(n_components=n_candidates, random_state=42, covariance_type='diag')
        gmm.fit(p_array)
        p_centroids = gmm.means_
        weights = gmm.weights_
        p_centroids = p_centroids[weights > 0.01]
    else:
        p_centroids = p_array
    
    if len(p_centroids) == 0:
        p_centroids = np.ones((1, m_outcomes)) / m_outcomes
    
    n_actions = len(p_centroids)
    
    cost_lower_bounds = np.zeros(n_actions)
    epsilon = 1e-8
    for a in range(n_actions):
        p_a = p_centroids[a]
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            agent_util = np.dot(p_a, w)
            if agent_util >= 0:
                min_util = min(min_util, agent_util)
        cost_lower_bounds[a] = max(0, min_util - epsilon) if min_util != np.inf else 0.0
    
    def objective(costs):
        penalty = 0.0
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p_centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(agent_utils)
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    penalty += 1000 * (-max_util)**2
                for a in range(n_actions):
                    util_diff = max_util - (np.dot(p_centroids[a], w) - costs[a])
                    if util_diff > epsilon:
                        penalty += 10 * util_diff**2
            else:
                if max_util >= -epsilon:
                    penalty += 1000 * max_util**2
        penalty += 0.1 * np.sum(costs**2)
        return penalty
    
    constraints = []
    for a in range(n_actions):
        constraints.append({'type': 'ineq', 'fun': lambda x, idx=a: x[idx] - cost_lower_bounds[idx]})
    
    try:
        res = minimize(objective, cost_lower_bounds, method='SLSQP', 
                      constraints=constraints, options={'maxiter': 1000, 'ftol': 1e-8})
        final_costs = res.x
    except:
        final_costs = cost_lower_bounds
    
    agent_setting = np.hstack([p_centroids, final_costs.reshape(-1, 1)])
    return agent_setting
```
