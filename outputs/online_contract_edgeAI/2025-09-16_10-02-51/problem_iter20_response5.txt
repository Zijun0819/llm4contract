```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    if not content:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.zeros((1, 1))])
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    inferred_probs = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_p = log['Principal Utility']
        if u_p <= 1e-12:
            continue
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v])
        b_eq = np.array([1.0, u_p])
        bounds = [(0.0, 1.0)] * n_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            inferred_probs.append(res.x)
    
    if not inferred_probs:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        inferred_probs = [uniform_p]
    
    prob_matrix = np.array(inferred_probs)
    n_components = min(8, len(inferred_probs))
    if n_components > 0:
        gmm = GaussianMixture(n_components=n_components, covariance_type='diag', random_state=42, n_init=10, max_iter=200)
        gmm.fit(prob_matrix)
        centroids = gmm.means_
    else:
        centroids = np.ones((1, n_outcomes)) / n_outcomes
    
    centroids = np.clip(centroids, 0, 1)
    row_sums = centroids.sum(axis=1, keepdims=True)
    centroids = np.divide(centroids, row_sums, where=row_sums != 0, out=np.zeros_like(centroids))
    n_actions = centroids.shape[0]
    
    cost_lb = np.zeros(n_actions)
    cost_ub = np.full(n_actions, np.inf)
    epsilon = 1e-10
    
    for a in range(n_actions):
        p_a = centroids[a]
        min_accepted = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util >= 0:
                min_accepted = min(min_accepted, util)
        if min_accepted != np.inf:
            cost_lb[a] = max(0, min_accepted - epsilon)
        
        max_rejected = -np.inf
        for log in rejected_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_a, w)
            if util < 0:
                max_rejected = max(max_rejected, util)
        if max_rejected != -np.inf:
            cost_ub[a] = max(0, -max_rejected + epsilon)
        else:
            cost_ub[a] = cost_lb[a] if cost_lb[a] > 0 else 1.0
    
    def constraint_violation(costs):
        penalty = 0.0
        penalty_weight = 1e6
        for log in content:
            w = np.array(log['Contract'])
            utils = np.array([np.dot(centroids[a], w) - costs[a] for a in range(n_actions)])
            max_util = np.max(utils)
            best_action = np.argmax(utils)
            if log['Agent Action'] == 1:
                if max_util < -epsilon:
                    penalty += penalty_weight * (-max_util)
                for a in range(n_actions):
                    if a != best_action and utils[a] + epsilon > utils[best_action]:
                        penalty += penalty_weight * (utils[a] - utils[best_action] + epsilon)
            else:
                if max_util >= -epsilon:
                    penalty += penalty_weight * (max_util + epsilon)
        return penalty
    
    bounds = Bounds(cost_lb, cost_ub)
    initial_costs = np.clip(cost_lb + epsilon, cost_lb, cost_ub)
    res = minimize(constraint_violation, initial_costs, method='SLSQP', bounds=bounds, options={'maxiter': 5000, 'ftol': 1e-12})
    final_costs = res.x if res.success else cost_lb
    
    return np.hstack([centroids, final_costs.reshape(-1, 1)])
```
