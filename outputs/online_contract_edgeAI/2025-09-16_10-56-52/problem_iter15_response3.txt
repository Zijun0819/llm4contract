```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint, NonlinearConstraint
from sklearn.mixture import GaussianMixture
import warnings

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    warnings.filterwarnings('ignore')
    n_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    def extract_density_centers(logs):
        contracts = np.array([log['Contract'] for log in logs])
        if len(contracts) == 0:
            return np.array([])
        weights = np.ones(len(contracts))
        gmm = GaussianMixture(n_components=min(10, len(contracts)), covariance_type='diag', random_state=42)
        gmm.fit(contracts, sample_weight=weights)
        return gmm.means_
    
    accepted_centers = extract_density_centers(accepted_logs)
    rejected_centers = extract_density_centers(rejected_logs)
    
    if len(accepted_centers) == 0 and len(rejected_centers) == 0:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    candidate_centers = []
    if len(accepted_centers) > 0:
        candidate_centers.extend(accepted_centers)
    if len(rejected_centers) > 0:
        candidate_centers.extend(rejected_centers)
    
    p0 = np.array(candidate_centers)
    n_actions = len(p0)
    
    utility_thresholds = np.full(n_actions, np.inf)
    for log in accepted_logs:
        w = np.array(log['Contract'])
        dists = np.array([np.linalg.norm(p - w) for p in p0])
        a_label = np.argmin(dists)
        u = np.dot(p0[a_label], w)
        if u < utility_thresholds[a_label]:
            utility_thresholds[a_label] = u
    
    rej_thresholds = np.full(n_actions, -np.inf)
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u = np.dot(p0[a], w)
            if u > rej_thresholds[a]:
                rej_thresholds[a] = u
    
    costs_init = np.maximum(utility_thresholds, rej_thresholds + 1e-10)
    costs_init = np.clip(costs_init, 0, None)
    
    def objective(params):
        p_flat = params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c = params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
        penalty = 0.0
        ir_ic_weight = 10000.0
        
        for log in content:
            w = np.array(log['Contract'])
            u_vals = np.array([np.dot(p, w) - cost_val for p, cost_val in zip(p_flat, c)])
            max_u = np.max(u_vals)
            
            if log['Agent Action'] == 1:
                if max_u < 0:
                    penalty += ir_ic_weight * (max_u ** 2)
                best_a = np.argmax(u_vals)
                principal_util = np.dot(p_flat[best_a], v - w)
                penalty += (principal_util - log['Principal Utility']) ** 2
            else:
                if max_u >= 0:
                    penalty += ir_ic_weight * (max_u ** 2)
        
        for i in range(n_actions):
            p_sum = np.sum(p_flat[i])
            if not np.isclose(p_sum, 1.0, atol=1e-10):
                penalty += ir_ic_weight * (p_sum - 1.0) ** 2
            penalty += ir_ic_weight * np.sum(np.clip(-p_flat[i], 0, None) ** 2)
        
        return penalty
    
    constraints = []
    for i in range(n_actions):
        def con_eq(x, idx=i):
            p_slice = x[idx*n_outcomes:(idx+1)*n_outcomes]
            return np.sum(p_slice) - 1.0
        constraints.append(NonlinearConstraint(con_eq, 0.0, 0.0))
    
    bounds = Bounds([0]*n_actions*n_outcomes + [0]*n_actions, [1]*n_actions*n_outcomes + [np.inf]*n_actions)
    initial_params = np.concatenate([p0.flatten(), costs_init])
    
    for tol in [1e-6, 1e-8, 1e-10]:
        res = minimize(
            objective,
            initial_params,
            method='SLSQP',
            bounds=bounds,
            constraints=constraints,
            options={'maxiter': 50000, 'ftol': tol, 'disp': False}
        )
        if res.success:
            break
        initial_params = res.x
    
    optimized_params = res.x
    p_opt = optimized_params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
    c_opt = optimized_params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
    
    valid_indices = []
    for i in range(n_actions):
        if np.all(p_opt[i] >= -1e-10) and np.isclose(np.sum(p_opt[i]), 1.0, atol=1e-10) and c_opt[i] >= -1e-10:
            valid_indices.append(i)
    
    if not valid_indices:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    p_opt = p_opt[valid_indices]
    c_opt = c_opt[valid_indices]
    
    return np.hstack([p_opt, c_opt.reshape(-1, 1)])
```
