```python
import numpy as np
from scipy.optimize import linprog, minimize
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if len(accepted_logs) == 0:
        raise ValueError("No accepted contracts in logs")
    
    n_candidates = min(15, max(3, len(accepted_logs) // 10))
    
    def solve_p(w, u_target):
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = [(0, 1) for _ in range(m_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    candidate_ps = []
    for log in accepted_logs:
        p = solve_p(np.array(log['Contract']), log['Principal Utility'])
        if p is not None:
            candidate_ps.append(p)
    
    if not candidate_ps:
        candidate_ps = [np.ones(m_outcomes) / m_outcomes]
    
    X = np.array(candidate_ps)
    if len(X) > n_candidates:
        gmm = GaussianMixture(n_components=n_candidates, random_state=0, n_init=5)
        gmm.fit(X)
        p0 = gmm.means_
    else:
        p0 = X
    
    n_candidates = len(p0)
    
    utility_thresholds = np.zeros(n_candidates)
    for a in range(n_candidates):
        utils = []
        for log in accepted_logs:
            w = np.array(log['Contract'])
            u = np.dot(p0[a], w)
            utils.append(u)
        if utils:
            utility_thresholds[a] = min(utils)
    
    rej_thresholds = np.full(n_candidates, -np.inf)
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_candidates):
            u = np.dot(p0[a], w)
            if u > rej_thresholds[a]:
                rej_thresholds[a] = u
    
    costs = np.maximum(utility_thresholds, rej_thresholds)
    costs = np.where(np.isfinite(costs), costs, 0.0)
    
    def objective(params):
        p_flat = params[:n_candidates * m_outcomes].reshape(n_candidates, m_outcomes)
        c = params[n_candidates * m_outcomes:]
        penalty = 0.0
        for log in content:
            w = np.array(log['Contract'])
            u_vals = [np.dot(p, w) - cost for p, cost in zip(p_flat, c)]
            max_u = max(u_vals)
            if log['Agent Action'] == 1:
                if max_u < 0:
                    penalty += max_u ** 2
                best_a = np.argmax(u_vals)
                util_diff = np.dot(p_flat[best_a], v - w) - log['Principal Utility']
                penalty += util_diff ** 2
            else:
                if max_u >= 0:
                    penalty += max_u ** 2
        return penalty
    
    def constraint_sum(params, idx):
        start = idx * m_outcomes
        end = start + m_outcomes
        return np.sum(params[start:end]) - 1
    
    constraints = [{'type': 'eq', 'fun': lambda x, i=i: constraint_sum(x, i)} for i in range(n_candidates)]
    bounds = [(0, 1)] * (n_candidates * m_outcomes) + [(0, None)] * n_candidates
    initial_params = np.concatenate([p0.flatten(), costs])
    
    res = minimize(objective, initial_params, method='SLSQP', bounds=bounds, constraints=constraints, tol=1e-6)
    
    if res.success:
        optimized_params = res.x
        p_opt = optimized_params[:n_candidates * m_outcomes].reshape(n_candidates, m_outcomes)
        c_opt = optimized_params[n_candidates * m_outcomes:]
    else:
        p_opt, c_opt = p0, costs
    
    return np.hstack([p_opt, c_opt.reshape(-1, 1)])
```
