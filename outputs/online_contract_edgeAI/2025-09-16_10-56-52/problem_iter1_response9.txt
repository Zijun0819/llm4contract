```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.preprocessing import normalize

def agent_solver(v, content):
    np.random.seed(0)
    n_actions_max = 20
    m = v.size
    L = len(content)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    n_accepted = len(accepted_logs)
    n_clusters = min(n_actions_max, max(3, n_accepted // 10))
    
    contracts = np.array([log['Contract'] for log in accepted_logs])
    utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    inferred_ps = []
    for w, u in zip(contracts, utils):
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u])
        res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        if res.success:
            inferred_ps.append(res.x)
    
    if not inferred_ps:
        return np.hstack([np.ones((1, m)) / m, np.zeros((1, 1))])
    
    data = np.array(inferred_ps)
    kmeans = KMeans(n_clusters=n_clusters, random_state=0, n_init=10).fit(data)
    p_centers = kmeans.cluster_centers_
    p_centers = normalize(p_centers, norm='l1', axis=1)
    
    assignments = np.zeros(L, dtype=int)
    for idx, log in enumerate(content):
        if log['Agent Action'] == 1:
            w_vec = np.array(log['Contract'])
            utilities = p_centers @ w_vec
            assignments[idx] = np.argmax(utilities)
    
    rej_logs = [log for log in content if log['Agent Action'] == -1]
    if rej_logs:
        rej_contracts = np.array([log['Contract'] for log in rej_logs]).T
        rej_utils = p_centers @ rej_contracts
        
        max_rej_utils = np.max(rej_utils, axis=1)
        zero_mask = max_rej_utils <= 0
        max_rej_utils[zero_mask] = 0
    else:
        max_rej_utils = np.zeros(p_centers.shape[0])
    
    costs = np.zeros(p_centers.shape[0])
    for a in range(p_centers.shape[0]):
        mask = assignments == a
        if np.any(mask):
            contracts_assigned = np.array([log['Contract'] for log, flag in zip(content, mask) if flag]).T
            u_min = np.min(p_centers[a] @ contracts_assigned)
            costs[a] = max(u_min, max_rej_utils[a])
        else:
            costs[a] = max_rej_utils[a]
    
    agent_setting = np.hstack([p_centers, costs.reshape(-1, 1)])
    return agent_setting
```
