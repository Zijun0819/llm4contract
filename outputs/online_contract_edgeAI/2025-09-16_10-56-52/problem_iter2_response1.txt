```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    n_actions = 8
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.zeros((1, m_outcomes + 1))
    
    def infer_p_distribution(w, u_p):
        c = w
        A_eq = np.vstack([np.ones(m_outcomes), v - w])
        b_eq = np.array([1, u_p])
        bounds = [(0, 1) for _ in range(m_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            return res.x
        return None
    
    inferred_probs = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_p = log['Principal Utility']
        p = infer_p_distribution(w, u_p)
        if p is not None:
            inferred_probs.append(p)
    
    if not inferred_probs:
        return np.zeros((1, m_outcomes + 1))
    
    inferred_probs = np.array(inferred_probs)
    kmeans = KMeans(n_clusters=n_actions, random_state=42, n_init=20).fit(inferred_probs)
    cluster_centers = kmeans.cluster_centers_
    
    action_assignments = kmeans.predict(inferred_probs)
    
    costs = np.zeros(n_actions)
    for a in range(n_actions):
        indices = np.where(action_assignments == a)[0]
        if indices.size > 0:
            min_payments = []
            for idx in indices:
                w = np.array(accepted_logs[idx]['Contract'])
                min_payments.append(np.dot(cluster_centers[a], w))
            costs[a] = np.min(min_payments) if min_payments else 0.0
        else:
            costs[a] = 0.0
    
    if rejected_logs:
        reject_contracts = np.array([log['Contract'] for log in rejected_logs])
        agent_utils = cluster_centers @ reject_contracts.T
        max_reject_utils = np.max(agent_utils, axis=1)
        costs = np.maximum(costs, max_reject_utils)
    
    costs = np.clip(costs, 0, None)
    
    agent_setting = np.hstack([cluster_centers, costs.reshape(-1, 1)])
    return agent_setting
```
