```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans

def agent_solver(v, content):
    num_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        default_p = np.ones(num_outcomes) / num_outcomes
        default_c = 0.0
        return np.hstack([default_p.reshape(1, -1), np.array([[default_c]])])
    
    def infer_potential_actions():
        candidate_ps = []
        for log in accepted_logs:
            w = np.array(log['Contract'])
            u = log['Principal Utility']
            try:
                A_eq = np.vstack([np.ones(num_outcomes), v - w])
                b_eq = np.array([1.0, u])
                res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * num_outcomes, method='highs-ds')
                if res.success:
                    p = res.x
                    if np.all(p >= -1e-8) and abs(np.sum(p) - 1) < 1e-8:
                        candidate_ps.append(np.clip(p, 0, 1))
            except:
                continue
        return np.array(candidate_ps) if candidate_ps else np.ones((1, num_outcomes)) / num_outcomes
    
    candidate_ps = infer_potential_actions()
    
    if len(candidate_ps) > 1:
        n_components = min(10, len(candidate_ps))
        gmm = GaussianMixture(n_components=n_components, random_state=42, n_init=10, max_iter=200).fit(candidate_ps)
        action_centers = gmm.means_
    else:
        action_centers = candidate_ps
    
    n_actions = action_centers.shape[0]
    costs = np.zeros(n_actions)
    
    for i in range(n_actions):
        p_i = action_centers[i]
        min_acceptable_wage = float('inf')
        for log in accepted_logs:
            w = np.array(log['Contract'])
            if np.dot(p_i, w) >= 0:
                min_acceptable_wage = min(min_acceptable_wage, np.dot(p_i, w))
        costs[i] = min_acceptable_wage if min_acceptable_wage != float('inf') else 0.0
    
    if rejected_logs:
        for log in rejected_logs:
            w_rej = np.array(log['Contract'])
            for i in range(n_actions):
                if np.dot(action_centers[i], w_rej) >= costs[i]:
                    costs[i] = np.dot(action_centers[i], w_rej) + 1e-8
    
    agent_setting = np.hstack([action_centers, costs.reshape(-1, 1)])
    return agent_setting
```
