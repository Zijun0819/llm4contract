```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
from sklearn.neighbors import KernelDensity

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        default_p = np.ones(n_outcomes) / n_outcomes
        default_c = 0.0
        return np.hstack([default_p.reshape(1, -1), np.array([[default_c]])])
    
    candidate_ps = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u = log['Principal Utility']
        try:
            A_eq = np.vstack([np.ones(n_outcomes), v - w])
            b_eq = np.array([1.0, u])
            res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * n_outcomes, method='highs-ds')
            if res.success:
                p = res.x
                if np.all(p >= -1e-10) and abs(np.sum(p) - 1) < 1e-10:
                    candidate_ps.append(np.clip(p, 0, 1))
        except:
            continue
            
    if not candidate_ps:
        default_p = np.ones(n_outcomes) / n_outcomes
        default_c = 0.0
        return np.hstack([default_p.reshape(1, -1), np.array([[default_c]])])
        
    candidate_ps = np.array(candidate_ps)
    
    max_clusters = min(10, len(candidate_ps))
    bic_scores = []
    for n in range(1, max_clusters + 1):
        gmm = GaussianMixture(n_components=n, random_state=42, n_init=10, max_iter=200)
        gmm.fit(candidate_ps)
        bic_scores.append(gmm.bic(candidate_ps))
    optimal_n = np.argmin(bic_scores) + 1
    
    gmm = GaussianMixture(n_components=optimal_n, random_state=42, n_init=10, max_iter=200)
    gmm.fit(candidate_ps)
    action_centers = gmm.means_
    weights = gmm.weights_
    
    weighted_centers = action_centers * weights[:, np.newaxis]
    weighted_centers /= weighted_centers.sum(axis=1, keepdims=True)
    n_actions = weighted_centers.shape[0]
    
    costs = np.zeros(n_actions)
    for i in range(n_actions):
        p_i = weighted_centers[i]
        min_accepted = float('inf')
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_i, w)
            if util >= 0:
                min_accepted = min(min_accepted, util)
        
        max_other = -float('inf')
        for j in range(n_actions):
            if j != i:
                for log in accepted_logs:
                    w = np.array(log['Contract'])
                    util = np.dot(p_i, w)
                    max_other = max(max_other, util)
        
        max_rejected = -float('inf')
        for log in rejected_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_i, w)
            max_rejected = max(max_rejected, util)
        
        cost_lb = max(0, min_accepted, max_other, max_rejected)
        if cost_lb == float('inf'):
            costs[i] = 0.0
        else:
            costs[i] = cost_lb + 1e-8
    
    agent_setting = np.hstack([weighted_centers, costs.reshape(-1, 1)])
    return agent_setting
```
