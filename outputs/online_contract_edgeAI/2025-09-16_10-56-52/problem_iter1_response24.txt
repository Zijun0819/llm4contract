```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans
import warnings

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    warnings.filterwarnings('ignore')
    m_outcomes = v.shape[0]
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    def mini_lp_p(w, u):
        res = linprog(w, A_eq=[np.ones(m_outcomes), v - w], b_eq=[1.0, u], bounds=[(0,1)]*m_outcomes, method='highs')
        return res.x if res.success else None
        
    candidate_ps = []
    for log in accepted_logs:
        p_i = mini_lp_p(log['Contract'], log['Principal Utility'])
        if p_i is not None:
            candidate_ps.append(p_i)
            
    if not candidate_ps:
        candidate_ps = [np.full(m_outcomes, 1/m_outcomes)]
        
    X = np.array(candidate_ps)
    optimal_k = min(len(accepted_logs), 10)
    if optimal_k < 2:
        optimal_k = 1
    kmeans = KMeans(n_clusters=optimal_k, random_state=0, n_init=1).fit(X)
    p_centers = kmeans.cluster_centers_
    n_actions = optimal_k
    
    assignments = {}
    for i, log in enumerate(accepted_logs):
        w = log['Contract']
        best_util = -np.inf
        best_a = 0
        for a in range(n_actions):
            util = p_centers[a] @ w
            if util > best_util:
                best_util = util
                best_a = a
        assignments[i] = best_a
        
    c_min = np.zeros(n_actions)
    for a in range(n_actions):
        assigned_logs = [accepted_logs[i] for i in assignments if assignments[i] == a]
        if assigned_logs:
            min_util = min([p_centers[a] @ log['Contract'] for log in assigned_logs])
            c_min[a] = min_util
        else:
            c_min[a] = 0.0
            
    if rejected_logs:
        rej_utils = np.array([[p_centers[a] @ log['Contract'] for a in range(n_actions)] for log in rejected_logs])
        max_rej_util = rej_utils.max(axis=1)
        for a in range(n_actions):
            if np.any(rej_utils[:, a] - c_min[a] >= -1e-6):
                c_min[a] = max(c_min[a], max_rej_util.max())
                
    agent_setting = np.hstack([p_centers, c_min.reshape(-1, 1)])
    def check_consistency(agent_setting):
        p_set, c_set = agent_setting[:, :-1], agent_setting[:, -1]
        for log in content:
            w = log['Contract']
            utils = p_set @ w - c_set
            max_util = utils.max()
            action = 1 if max_util >= -1e-6 else -1
            if action != log['Agent Action']:
                return False
        return True
        
    if not check_consistency(agent_setting):
        for a in range(n_actions):
            if c_min[a] < 0:
                c_min[a] = 0.0
        agent_setting = np.hstack([p_centers, c_min.reshape(-1, 1)])
        
    return agent_setting
```
