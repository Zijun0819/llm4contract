```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
import pandas as pd

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    logs = pd.DataFrame(content)
    accepted = logs[logs['Agent Action'] == 1]
    rejected = logs[logs['Agent Action'] == -1]
    
    def solve_lp(w, u_p):
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_p])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            return res.x
        return None
    
    candidate_p = []
    for idx, row in accepted.iterrows():
        w_arr = np.array(row['Contract'])
        u_p = row['Principal Utility']
        p_sol = solve_lp(w_arr, u_p)
        if p_sol is not None:
            candidate_p.append(p_sol)
    
    if not candidate_p:
        return np.zeros((1, n_outcomes + 1))
    
    X = np.array(candidate_p)
    n_components_range = range(1, min(10, len(X) + 1))
    best_bic = np.inf
    best_gmm = None
    for n_components in n_components_range:
        gmm = GaussianMixture(n_components=n_components, random_state=0, covariance_type='diag')
        gmm.fit(X)
        bic = gmm.bic(X)
        if bic < best_bic:
            best_bic = bic
            best_gmm = gmm
    
    action_centers = best_gmm.means_
    n_actions = action_centers.shape[0]
    
    rejected_contracts = [np.array(row['Contract']) for _, row in rejected.iterrows()]
    accepted_contracts = [np.array(row['Contract']) for _, row in accepted.iterrows()]
    
    costs = np.zeros(n_actions)
    for a in range(n_actions):
        p = action_centers[a]
        if accepted_contracts:
            accepted_utils = np.array([p @ w for w in accepted_contracts])
            min_accepted_util = np.min(accepted_utils)
        else:
            min_accepted_util = 0.0
        
        if rejected_contracts:
            rejected_utils = np.array([p @ w for w in rejected_contracts])
            max_rejected_util = np.max(rejected_utils)
        else:
            max_rejected_util = -np.inf
        
        costs[a] = max(min_accepted_util, max_rejected_util, 0.0)
    
    agent_setting = np.hstack([action_centers, costs.reshape(-1, 1)])
    return agent_setting
```
