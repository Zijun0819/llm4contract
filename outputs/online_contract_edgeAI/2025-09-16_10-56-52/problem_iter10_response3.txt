```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.mixture import GaussianMixture
import warnings

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    warnings.filterwarnings('ignore')
    
    n_outcomes = len(v)
    df = pd.DataFrame(content)
    accepted = df[df['Agent Action'] == 1]
    rejected = df[df['Agent Action'] == -1]
    
    if len(accepted) == 0:
        return np.hstack([np.ones((1, n_outcomes)) / n_outcomes, np.zeros((1, 1))])
    
    def solve_feasible_distribution(w, principal_util_obs):
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, principal_util_obs])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs', tol=1e-12)
        return res.x if res.success else None
    
    candidate_distributions = []
    for _, row in accepted.iterrows():
        p_candidate = solve_feasible_distribution(np.array(row['Contract']), row['Principal Utility'])
        if p_candidate is not None and np.allclose(np.sum(p_candidate), 1.0, atol=1e-10):
            candidate_distributions.append(p_candidate)
    
    if not candidate_distributions:
        candidate_distributions = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_distributions)
    n_candidates = len(X)
    
    if n_candidates > 1:
        bics = []
        models = []
        max_components = min(15, n_candidates - 1)
        for n_comp in range(1, max_components + 1):
            gmm = GaussianMixture(n_components=n_comp, random_state=42, n_init=20, max_iter=500, tol=1e-8)
            gmm.fit(X)
            bics.append(gmm.bic(X))
            models.append(gmm)
        best_idx = np.argmin(bics)
        best_gmm = models[best_idx]
        p0 = best_gmm.means_
        labels = best_gmm.predict(X)
    else:
        p0 = X
        labels = [0]
    
    n_actions = len(p0)
    accepted_contracts = [np.array(w) for w in accepted['Contract']]
    rejected_contracts = [np.array(w) for w in rejected['Contract']]
    
    min_accept_utils = np.full(n_actions, np.inf)
    for idx, w in enumerate(accepted_contracts):
        if idx < len(labels):
            a = labels[idx]
        else:
            dists = np.linalg.norm(p0 - w, axis=1)
            a = np.argmin(dists)
        u = np.dot(p0[a], w)
        if u < min_accept_utils[a]:
            min_accept_utils[a] = u
    
    max_reject_utils = np.full(n_actions, -np.inf)
    for w in rejected_contracts:
        for a in range(n_actions):
            u = np.dot(p0[a], w)
            if u > max_reject_utils[a]:
                max_reject_utils[a] = u
    
    cost_initial = np.zeros(n_actions)
    for a in range(n_actions):
        if np.isfinite(min_accept_utils[a]) and np.isfinite(max_reject_utils[a]):
            cost_initial[a] = max(min_accept_utils[a], max_reject_utils[a] + 1e-10)
        elif np.isfinite(min_accept_utils[a]):
            cost_initial[a] = min_accept_utils[a]
        else:
            cost_initial[a] = 0.0
    
    def objective(params):
        p_flat = params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c = params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
        penalty = 0.0
        
        for _, row in df.iterrows():
            w = np.array(row['Contract'])
            agent_utils = np.array([np.dot(p, w) - cost_val for p, cost_val in zip(p_flat, c)])
            max_agent_util = np.max(agent_utils)
            best_action = np.argmax(agent_utils)
            
            if row['Agent Action'] == 1:
                if max_agent_util < 0:
                    penalty += (max_agent_util) ** 2
                principal_util = np.dot(p_flat[best_action], v - w)
                penalty += (row['Principal Utility'] - principal_util) ** 2
            else:
                if max_agent_util >= 0:
                    penalty += (max_agent_util) ** 2
        
        for p in p_flat:
            penalty += 1e-12 * np.sum(np.maximum(0, -p)) + 1e-12 * np.sum(np.maximum(0, p - 1))
            penalty += 1e-12 * (np.sum(p) - 1.0) ** 2
        for cost_val in c:
            penalty += 1e-12 * np.maximum(0, -cost_val)
        
        return penalty
    
    constraints = []
    for i in range(n_actions):
        constraints.append({'type': 'eq', 'fun': lambda x, idx=i: np.sum(x[idx*n_outcomes:(idx+1)*n_outcomes]) - 1.0})
    
    bounds = [(0, 1)] * (n_actions * n_outcomes) + [(0, None)] * n_actions
    initial_params = np.concatenate([p0.flatten(), cost_initial])
    
    res = minimize(objective, initial_params, method='SLSQP', bounds=bounds, constraints=constraints, tol=1e-12, options={'maxiter': 2000, 'ftol': 1e-12})
    
    if res.success:
        optimized_params = res.x
        p_opt = optimized_params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c_opt = optimized_params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
    else:
        p_opt, c_opt = p0, cost_initial
    
    for i in range(n_actions):
        p_opt[i] = np.clip(p_opt[i], 0, 1)
        p_opt[i] /= np.sum(p_opt[i])
        c_opt[i] = max(0, c_opt[i])
    
    return np.hstack([p_opt, c_opt.reshape(-1, 1)])
```
