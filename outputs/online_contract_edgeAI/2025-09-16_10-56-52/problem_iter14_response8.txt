```python
import numpy as np
from scipy.optimize import linprog, minimize
from sklearn.mixture import GaussianMixture
import warnings

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    warnings.filterwarnings('ignore')
    n_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        default_p = np.ones(n_outcomes) / n_outcomes
        default_c = 0.0
        return np.hstack([default_p.reshape(1, -1), np.array([[default_c]])])
    
    candidate_ps = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_target = log['Principal Utility']
        try:
            A_eq = np.vstack([np.ones(n_outcomes), v - w])
            b_eq = np.array([1.0, u_target])
            res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * n_outcomes, method='highs', tol=1e-10)
            if res.success:
                p = res.x
                if np.all(p >= -1e-10) and abs(np.sum(p) - 1.0) < 1e-10:
                    candidate_ps.append(p)
        except:
            continue
            
    if not candidate_ps:
        candidate_ps = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_ps)
    max_clusters = min(10, len(X))
    if max_clusters == 0:
        default_p = np.ones(n_outcomes) / n_outcomes
        default_c = 0.0
        return np.hstack([default_p.reshape(1, -1), np.array([[default_c]])])
    
    bics = []
    for n in range(1, max_clusters + 1):
        gmm = GaussianMixture(n_components=n, random_state=42, n_init=5, max_iter=100, tol=1e-6)
        gmm.fit(X)
        bics.append(gmm.bic(X))
    best_n = np.argmin(bics) + 1
    
    gmm = GaussianMixture(n_components=best_n, random_state=42, n_init=5, max_iter=100, tol=1e-6)
    gmm.fit(X)
    p0 = gmm.means_
    p0 = np.clip(p0, 0, 1)
    p0 = p0 / p0.sum(axis=1, keepdims=True)
    n_actions = p0.shape[0]
    
    lower_bounds = np.full(n_actions, -np.inf)
    upper_bounds = np.full(n_actions, np.inf)
    
    for log in accepted_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u = np.dot(p0[a], w)
            if u > lower_bounds[a]:
                lower_bounds[a] = u
    lower_bounds = np.maximum(lower_bounds, 0)
    
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u = np.dot(p0[a], w)
            if u < upper_bounds[a] and u >= 0:
                upper_bounds[a] = u
    upper_bounds = np.where(upper_bounds == np.inf, lower_bounds - 1e-8, upper_bounds)
    
    cost_init = np.zeros(n_actions)
    for a in range(n_actions):
        if lower_bounds[a] > -np.inf and upper_bounds[a] < np.inf:
            cost_init[a] = (lower_bounds[a] + upper_bounds[a]) / 2
        elif lower_bounds[a] > -np.inf:
            cost_init[a] = lower_bounds[a]
        else:
            cost_init[a] = 0.0
    cost_init = np.clip(cost_init, 0, None)
    
    def objective(params):
        p_flat = params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c = params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
        penalty = 0.0
        ir_ic_weight = 1000.0
        
        for log in content:
            w = np.array(log['Contract'])
            u_vals = np.array([np.dot(p, w) - cost_val for p, cost_val in zip(p_flat, c)])
            max_u = np.max(u_vals)
            best_a = np.argmax(u_vals)
            
            if log['Agent Action'] == 1:
                if max_u < 0:
                    penalty += ir_ic_weight * (-max_u)
                principal_util = np.dot(p_flat[best_a], v - w)
                penalty += (principal_util - log['Principal Utility']) ** 2
            else:
                if max_u >= 0:
                    penalty += ir_ic_weight * max_u
        
        for i in range(n_actions):
            p_sum = np.sum(p_flat[i])
            penalty += ir_ic_weight * (p_sum - 1.0) ** 2
            penalty += ir_ic_weight * np.sum(np.clip(-p_flat[i], 0, None))
            penalty += ir_ic_weight * np.clip(-c[i], 0, None)
        
        return penalty
    
    constraints = []
    for i in range(n_actions):
        constraints.append({'type': 'eq', 'fun': lambda x, idx=i: np.sum(x[idx*n_outcomes:(idx+1)*n_outcomes]) - 1.0})
    
    bounds = [(0, 1)] * (n_actions * n_outcomes) + [(0, None)] * n_actions
    x0 = np.concatenate([p0.flatten(), cost_init])
    
    res = minimize(
        objective,
        x0,
        method='SLSQP',
        bounds=bounds,
        constraints=constraints,
        tol=1e-10,
        options={'maxiter': 1000, 'ftol': 1e-10, 'disp': False}
    )
    
    if res.success:
        optimized_params = res.x
        p_opt = optimized_params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c_opt = optimized_params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
    else:
        p_opt, c_opt = p0, cost_init
    
    valid_rows = []
    for i in range(n_actions):
        if np.all(p_opt[i] >= 0) and abs(np.sum(p_opt[i]) - 1.0) < 1e-10 and c_opt[i] >= 0:
            valid_rows.append(np.hstack([p_opt[i], c_opt[i]]))
    
    if not valid_rows:
        default_p = np.ones(n_outcomes) / n_outcomes
        default_c = 0.0
        return np.hstack([default_p.reshape(1, -1), np.array([[default_c]])])
    
    return np.array(valid_rows)
```
