```python
import numpy as np
from scipy.optimize import linprog

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    num_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    def infer_action_from_log(log):
        w = np.array(log['Contract'])
        u = log['Principal Utility']
        A_eq = [np.ones(num_outcomes), v - w]
        b_eq = [1, u]
        bounds = [(0, 1)] * num_outcomes
        res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p = res.x
            c = np.dot(p, w)
            return p, c
        return None, None
    
    candidate_actions = []
    for log in accepted_logs:
        p, c = infer_action_from_log(log)
        if p is not None:
            candidate_actions.append((p, c))
    
    if not candidate_actions:
        p_default = np.ones(num_outcomes) / num_outcomes
        c_default = 0.0
        candidate_actions.append((p_default, c_default))
    
    unique_actions = []
    for p, c in candidate_actions:
        is_duplicate = False
        for existing_p, _ in unique_actions:
            if np.allclose(p, existing_p, atol=1e-5):
                is_duplicate = True
                break
        if not is_duplicate:
            unique_actions.append((p, c))
    
    p_matrix = np.array([p for p, _ in unique_actions])
    c_vec = np.array([c for _, c in unique_actions])
    num_actions = len(unique_actions)
    
    for log in rejected_logs:
        w_rej = np.array(log['Contract'])
        utilities = p_matrix @ w_rej - c_vec
        max_util = np.max(utilities)
        if max_util >= 0:
            violating_indices = np.where(utilities >= 0)[0]
            for idx in violating_indices:
                c_vec[idx] = max(c_vec[idx], max_util + 1e-8)
    
    for log in accepted_logs:
        w_acc = np.array(log['Contract'])
        utilities = p_matrix @ w_acc - c_vec
        best_idx = np.argmax(utilities)
        if utilities[best_idx] < 0:
            c_vec[best_idx] = min(c_vec[best_idx], p_matrix[best_idx] @ w_acc)
    
    agent_setting = np.hstack([p_matrix, c_vec.reshape(-1, 1)])
    return agent_setting
```
