```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize, Bounds
from sklearn.cluster import KMeans
import cvxpy as cp

def agent_solver(v, content):
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    m_outcomes = len(v)
    n_candidates = min(len(accepted_logs) + 1, 10) if accepted_logs else 1

    def consistent_p_existence(w, u):
        try:
            p = cp.Variable(m_outcomes)
            constraints = [p >= 0, cp.sum(p) == 1, p @ (v - w) == u]
            prob = cp.Problem(cp.Minimize(0), constraints)
            prob.solve()
            return p.value if prob.status == 'optimal' else None
        except:
            return None

    candidate_ps = []
    for log in accepted_logs:
        w_i = np.array(log['Contract'])
        u_i = log['Principal Utility']
        p_i = consistent_p_existence(w_i, u_i)
        if p_i is not None:
            candidate_ps.append(p_i)
    if not candidate_ps:
        candidate_ps = [np.ones(m_outcomes) / m_outcomes]

    if len(candidate_ps) > 1:
        kmeans = KMeans(n_clusters=n_candidates, random_state=0, n_init=10).fit(candidate_ps)
        p_set = kmeans.cluster_centers_
    else:
        p_set = np.array([candidate_ps[0]] * n_candidates)

    L = len(content)
    assignments = np.full(L, -1, dtype=int)
    for i, log in enumerate(content):
        if log['Agent Action'] == 1:
            w = np.array(log['Contract'])
            utilities = p_set @ w
            assignments[i] = np.argmax(utilities)

    grouped_wages = {}
    for i, log in enumerate(content):
        if log['Agent Action'] == 1:
            a = assignments[i]
            if a not in grouped_wages:
                grouped_wages[a] = []
            grouped_wages[a].append(log['Contract'])
    c_ir = np.zeros(n_candidates)
    for a in range(n_candidates):
        if a in grouped_wages:
            w_list = [np.array(wag) for wag in grouped_wages[a]]
            c_ir[a] = np.min([p_set[a] @ w for w in w_list])
        else:
            c_ir[a] = 0.0

    if rejected_logs:
        rej_wages = [np.array(log['Contract']) for log in rejected_logs]
        rej_utils = np.max([p_set @ w for w in rej_wages], axis=0)
        c_rej = rej_utils
    else:
        c_rej = np.zeros(n_candidates)

    c_final = np.maximum(c_ir, c_rej)

    agent_matrix = np.hstack((p_set, c_final.reshape(-1, 1)))
    return agent_matrix
```
