```python
import numpy as np
from scipy.optimize import minimize, linprog
from scipy.stats import gaussian_kde
from sklearn.mixture import GaussianMixture
import warnings

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    warnings.filterwarnings('ignore')
    
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if len(accepted_logs) == 0:
        raise ValueError("No accepted contracts in logs")
    
    def solve_p(w, u_target):
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = [(0, 1) for _ in range(m_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    candidate_ps = []
    utility_targets = []
    for log in accepted_logs:
        p = solve_p(np.array(log['Contract']), log['Principal Utility'])
        if p is not None:
            candidate_ps.append(p)
            utility_targets.append(log['Principal Utility'])
    
    if not candidate_ps:
        candidate_ps = [np.ones(m_outcomes) / m_outcomes]
        utility_targets = [0.0]
    
    X = np.array(candidate_ps)
    weights = np.array(utility_targets) + 1e-6
    weights /= weights.sum()
    
    if len(X) > 1:
        n_candidates = min(20, max(3, len(X) // 3))
        kde = gaussian_kde(X.T, weights=weights)
        sampled_points = kde.resample(size=1000).T
        bics = []
        gmm_models = []
        for n in range(1, min(11, n_candidates)):
            gmm = GaussianMixture(n_components=n, random_state=0, n_init=10, max_iter=200)
            gmm.fit(sampled_points)
            bics.append(gmm.bic(sampled_points))
            gmm_models.append(gmm)
        best_n = np.argmin(bics) + 1
        best_gmm = gmm_models[best_n-1]
        p0 = best_gmm.means_
        n_actions = best_n
    else:
        p0 = X
        n_actions = len(p0)
    
    utility_thresholds = np.full(n_actions, np.inf)
    rej_thresholds = np.full(n_actions, -np.inf)
    
    for log in accepted_logs:
        w = np.array(log['Contract'])
        dists = np.array([np.linalg.norm(p - w) for p in p0])
        a_label = np.argmin(dists)
        u = np.dot(p0[a_label], w)
        if u < utility_thresholds[a_label]:
            utility_thresholds[a_label] = u
    
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u = np.dot(p0[a], w)
            if u > rej_thresholds[a]:
                rej_thresholds[a] = u
    
    costs_init = np.maximum(utility_thresholds, rej_thresholds)
    costs_init = np.where(np.isfinite(costs_init), costs_init, 0.0)
    
    def objective(params):
        p_flat = params[:n_actions * m_outcomes].reshape(n_actions, m_outcomes)
        c = params[n_actions * m_outcomes: n_actions * m_outcomes + n_actions]
        penalty = 0.0
        
        for log in content:
            w = np.array(log['Contract'])
            u_vals = np.array([np.dot(p, w) - cost_val for p, cost_val in zip(p_flat, c)])
            max_u = np.max(u_vals)
            
            if log['Agent Action'] == 1:
                if max_u < 0:
                    penalty += (max_u) ** 2
                best_a = np.argmax(u_vals)
                principal_util = np.dot(p_flat[best_a], v - w)
                penalty += (principal_util - log['Principal Utility']) ** 2
            else:
                if max_u >= 0:
                    penalty += (max_u) ** 2
        
        for i in range(n_actions):
            for j in range(n_actions):
                if i != j:
                    ic_diff = np.dot(p_flat[i], v) - c[i] - (np.dot(p_flat[j], v) - c[j])
                    penalty += max(0, ic_diff) ** 2
        
        return penalty
    
    constraints = []
    for i in range(n_actions):
        constraints.append({'type': 'eq', 'fun': lambda x, idx=i: np.sum(x[idx*m_outcomes:(idx+1)*m_outcomes]) - 1})
    
    bounds = [(0, 1)] * (n_actions * m_outcomes) + [(0, None)] * n_actions
    initial_params = np.concatenate([p0.flatten(), costs_init])
    
    res = minimize(objective, initial_params, method='SLSQP', bounds=bounds, constraints=constraints, tol=1e-6, options={'maxiter': 1000})
    
    if res.success:
        optimized_params = res.x
        p_opt = optimized_params[:n_actions * m_outcomes].reshape(n_actions, m_outcomes)
        c_opt = optimized_params[n_actions * m_outcomes: n_actions * m_outcomes + n_actions]
    else:
        p_opt, c_opt = p0, costs_init
    
    return np.hstack([p_opt, c_opt.reshape(-1, 1)])
```
