```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint
from scipy.stats import multivariate_normal
import warnings
warnings.filterwarnings('ignore')

def agent_solver(v, content):
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    def solve_p(w, u_target):
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = Bounds(0, 1)
        res = minimize(lambda p: np.dot(c, p), 
                      x0=np.ones(n_outcomes)/n_outcomes, 
                      constraints=[{'type': 'eq', 'fun': lambda p: np.sum(p) - 1},
                                  {'type': 'eq', 'fun': lambda p: np.dot(v - w, p) - u_target}],
                      bounds=bounds,
                      method='SLSQP',
                      options={'ftol': 1e-10, 'maxiter': 1000})
        return res.x if res.success and np.all(res.x >= -1e-8) and np.isclose(np.sum(res.x), 1.0, atol=1e-8) else None

    candidate_ps = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_target = log['Principal Utility']
        p = solve_p(w, u_target)
        if p is not None:
            candidate_ps.append(p)
    
    if not candidate_ps:
        candidate_ps = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_ps)
    max_components = min(20, len(X))
    if len(X) > 1:
        bics = []
        gmm_models = []
        for n in range(1, max_components + 1):
            try:
                weights = np.ones(len(X))
                if rejected_logs:
                    rej_weights = [1.0 / (1 + np.min([np.linalg.norm(np.array(log['Contract']) - x) for x in X])) for log in rejected_logs]
                    avg_rej_weight = np.mean(rej_weights) if rej_weights else 1.0
                    weights = np.array([avg_rej_weight] * len(X))
                gmm = GaussianMixture(n_components=n, covariance_type='diag', random_state=42, n_init=10, max_iter=500, tol=1e-8)
                gmm.fit(X, sample_weight=weights)
                bics.append(gmm.bic(X))
                gmm_models.append(gmm)
            except:
                continue
        if bics:
            best_idx = np.argmin(bics)
            best_gmm = gmm_models[best_idx]
            p0 = best_gmm.means_
            n_actions = len(p0)
        else:
            p0 = np.mean(X, axis=0, keepdims=True)
            n_actions = 1
    else:
        p0 = X
        n_actions = len(p0)
    
    utility_thresholds = np.full(n_actions, np.inf)
    for log in accepted_logs:
        w = np.array(log['Contract'])
        dists = np.array([np.linalg.norm(p - w) for p in p0])
        a_label = np.argmin(dists)
        u = np.dot(p0[a_label], w)
        if u < utility_thresholds[a_label]:
            utility_thresholds[a_label] = u
    
    rej_thresholds = np.full(n_actions, -np.inf)
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u = np.dot(p0[a], w)
            if u > rej_thresholds[a]:
                rej_thresholds[a] = u
    
    costs_init = np.maximum(utility_thresholds, rej_thresholds + 1e-10)
    costs_init = np.clip(costs_init, 0, None)
    
    def objective(params):
        p_flat = params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c = params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
        penalty = 0.0
        ir_ic_tol = 1e-8
        
        for log in content:
            w = np.array(log['Contract'])
            u_vals = np.array([np.dot(p, w) - cost for p, cost in zip(p_flat, c)])
            max_u = np.max(u_vals)
            
            if log['Agent Action'] == 1:
                if max_u < -ir_ic_tol:
                    penalty += 1e6 * (max_u ** 2)
                best_a = np.argmax(u_vals)
                principal_util = np.dot(p_flat[best_a], v - w)
                if not np.isclose(principal_util, log['Principal Utility'], atol=ir_ic_tol):
                    penalty += 1e4 * (principal_util - log['Principal Utility']) ** 2
            else:
                if max_u >= ir_ic_tol:
                    penalty += 1e6 * (max_u ** 2)
        
        for i in range(n_actions):
            p_sum = np.sum(p_flat[i])
            if not np.isclose(p_sum, 1.0, atol=ir_ic_tol):
                penalty += 1e4 * (p_sum - 1.0) ** 2
            if np.any(p_flat[i] < -ir_ic_tol):
                penalty += 1e4 * np.sum(np.clip(-p_flat[i], 0, None) ** 2)
        
        return penalty
    
    constraints = []
    for i in range(n_actions):
        constraints.append(LinearConstraint(np.eye(n_actions * n_outcomes + n_actions), 
                                          lb=np.concatenate([np.zeros(n_actions * n_outcomes), np.zeros(n_actions)]),
                                          ub=np.concatenate([np.ones(n_actions * n_outcomes), np.full(n_actions, np.inf)]))
        constraints.append(LinearConstraint(np.concatenate([np.ones(n_outcomes), np.zeros(n_actions)]).reshape(1, -1), 
                                          lb=1.0, ub=1.0))
    
    initial_params = np.concatenate([p0.flatten(), costs_init])
    bounds = Bounds(np.zeros(n_actions * n_outcomes + n_actions), 
                   np.concatenate([np.ones(n_actions * n_outcomes), np.full(n_actions, np.inf)]))
    
    res = minimize(objective, 
                  initial_params, 
                  method='SLSQP', 
                  bounds=bounds, 
                  constraints=constraints, 
                  tol=1e-10, 
                  options={'maxiter': 20000, 'ftol': 1e-10, 'disp': False})
    
    if res.success:
        optimized_params = res.x
        p_opt = optimized_params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c_opt = optimized_params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
    else:
        p_opt, c_opt = p0, costs_init
    
    valid_actions = []
    for i in range(n_actions):
        if np.all(p_opt[i] >= -1e-8) and np.isclose(np.sum(p_opt[i]), 1.0, atol=1e-8) and c_opt[i] >= -1e-8:
            valid_actions.append(i)
    
    if not valid_actions:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    p_final = p_opt[valid_actions]
    c_final = c_opt[valid_actions]
    
    return np.hstack([p_final, c_final.reshape(-1, 1)])
```
