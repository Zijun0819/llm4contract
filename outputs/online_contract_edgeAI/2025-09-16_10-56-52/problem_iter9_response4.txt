```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint
from sklearn.mixture import GaussianMixture
from scipy.stats import gaussian_kde
import warnings
warnings.filterwarnings('ignore')

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if len(accepted_logs) == 0:
        raise ValueError("No accepted contracts in logs")
    
    def estimate_cost_bounds(logs, action_type):
        if not logs:
            return []
        w_array = np.array([log['Contract'] for log in logs])
        cost_estimates = []
        for w in w_array:
            try:
                c_low = np.max([0, np.min(w)])
                c_high = np.max(w)
                cost_estimates.append((c_low, c_high))
            except:
                continue
        return cost_estimates
    
    accepted_bounds = estimate_cost_bounds(accepted_logs, 'accepted')
    rejected_bounds = estimate_cost_bounds(rejected_logs, 'rejected')
    
    candidate_ps = []
    utility_targets = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_target = log['Principal Utility']
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = [(0, 1) for _ in range(m_outcomes)]
        try:
            from scipy.optimize import linprog
            res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
            if res.success:
                candidate_ps.append(res.x)
                utility_targets.append(u_target)
        except:
            continue
    
    if not candidate_ps:
        candidate_ps = [np.ones(m_outcomes) / m_outcomes]
        utility_targets = [0.0]
    
    X = np.array(candidate_ps)
    if len(X) > 1:
        kde = gaussian_kde(X.T)
        density = kde(X.T)
        weights = density / np.sum(density)
        n_components_range = range(1, min(11, len(X)))
        bics = []
        gmm_models = []
        for n in n_components_range:
            gmm = GaussianMixture(n_components=n, random_state=0, n_init=10, max_iter=200)
            gmm.fit(X, sample_weight=weights)
            bics.append(gmm.bic(X))
            gmm_models.append(gmm)
        best_n = np.argmin(bics) + 1
        best_gmm = gmm_models[best_n-1]
        p0 = best_gmm.means_
        n_actions = best_n
    else:
        p0 = X
        n_actions = len(X)
    
    utility_thresholds = np.full(n_actions, np.inf)
    for log in accepted_logs:
        w = np.array(log['Contract'])
        dists = np.array([np.linalg.norm(p - w) for p in p0])
        a_label = np.argmin(dists)
        u = np.dot(p0[a_label], w)
        if u < utility_thresholds[a_label]:
            utility_thresholds[a_label] = u
    
    rej_thresholds = np.full(n_actions, -np.inf)
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u = np.dot(p0[a], w)
            if u > rej_thresholds[a]:
                rej_thresholds[a] = u
    
    costs_init = np.zeros(n_actions)
    for a in range(n_actions):
        if np.isfinite(utility_thresholds[a]) and np.isfinite(rej_thresholds[a]):
            costs_init[a] = (utility_thresholds[a] + rej_thresholds[a]) / 2
        elif np.isfinite(utility_thresholds[a]):
            costs_init[a] = utility_thresholds[a]
        elif np.isfinite(rej_thresholds[a]):
            costs_init[a] = rej_thresholds[a] + 1e-6
        else:
            costs_init[a] = 0.0
    
    def objective(params):
        p_flat = params[:n_actions * m_outcomes].reshape(n_actions, m_outcomes)
        c = params[n_actions * m_outcomes: n_actions * m_outcomes + n_actions]
        penalty = 0.0
        weight_accept = 1.0
        weight_reject = 1.0
        
        for log in content:
            w = np.array(log['Contract'])
            u_vals = np.array([np.dot(p, w) - cost_val for p, cost_val in zip(p_flat, c)])
            max_u = np.max(u_vals)
            
            if log['Agent Action'] == 1:
                if max_u < 0:
                    penalty += weight_accept * (max_u - 0) ** 2
                best_a = np.argmax(u_vals)
                principal_util = np.dot(p_flat[best_a], v - w)
                penalty += weight_accept * (principal_util - log['Principal Utility']) ** 2
            else:
                if max_u >= 0:
                    penalty += weight_reject * (max_u - 0) ** 2
        
        for i in range(n_actions):
            for j in range(n_actions):
                if i != j:
                    ic_penalty = np.dot(p_flat[i], v) - c[i] - (np.dot(p_flat[j], v) - c[j])
                    if ic_penalty < 0:
                        penalty += 10.0 * ic_penalty ** 2
        
        return penalty
    
    constraints = []
    for i in range(n_actions):
        constraints.append(LinearConstraint(
            np.eye(1, n_actions * m_outcomes + n_actions, i * m_outcomes).reshape(-1),
            lb=1.0, ub=1.0
        ))
    
    bounds = Bounds([0] * (n_actions * m_outcomes) + [0] * n_actions, 
                    [1] * (n_actions * m_outcomes) + [np.inf] * n_actions)
    
    initial_params = np.concatenate([p0.flatten(), costs_init])
    
    res = minimize(objective, initial_params, method='SLSQP', bounds=bounds, constraints=constraints, 
                   tol=1e-8, options={'maxiter': 2000, 'ftol': 1e-8})
    
    if res.success:
        optimized_params = res.x
        p_opt = optimized_params[:n_actions * m_outcomes].reshape(n_actions, m_outcomes)
        c_opt = optimized_params[n_actions * m_outcomes: n_actions * m_outcomes + n_actions]
    else:
        p_opt, c_opt = p0, costs_init
    
    result = np.hstack([p_opt, c_opt.reshape(-1, 1)])
    
    for i in range(n_actions):
        if not np.allclose(np.sum(result[i, :m_outcomes]), 1.0, atol=1e-6):
            result[i, :m_outcomes] /= np.sum(result[i, :m_outcomes])
    
    return result
```
