```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    if not content or v.size != 12:
        return np.zeros((1, 13))
    
    accepted_contracts = []
    accepted_utils = []
    rejected_contracts = []
    for log in content:
        if log['Agent Action'] == 1:
            accepted_contracts.append(log['Contract'])
            accepted_utils.append(log['Principal Utility'])
        else:
            rejected_contracts.append(log['Contract'])
    
    if not accepted_contracts:
        return np.zeros((1, 13))
    
    accepted_contracts = np.array(accepted_contracts)
    accepted_utils = np.array(accepted_utils)
    rejected_contracts = np.array(rejected_contracts) if rejected_contracts else None
    
    prob_matrix = []
    for w, u in zip(accepted_contracts, accepted_utils):
        def objective(p):
            return w @ p
        
        constraints = [
            LinearConstraint([np.ones(12), v - w], [1, u], [1, u]),
            LinearConstraint(np.eye(12), np.zeros(12), np.ones(12))
        ]
        bounds = Bounds(0, 1)
        result = minimize(objective, np.ones(12)/12, bounds=bounds, constraints=constraints)
        if result.success:
            prob_matrix.append(result.x)
    
    if not prob_matrix:
        return np.zeros((1, 13))
    
    prob_matrix = np.array(prob_matrix)
    scaler = StandardScaler()
    scaled_probs = scaler.fit_transform(prob_matrix) if len(prob_matrix) > 1 else prob_matrix
    
    clustering = DBSCAN(eps=1.0, min_samples=3).fit(scaled_probs)
    unique_labels = np.unique(clustering.labels_)
    n_clusters = len(unique_labels) - (1 if -1 in unique_labels else 0)
    
    if n_clusters == 0:
        p0 = [np.mean(prob_matrix, axis=0)]
        n_clusters = 1
    else:
        p0 = []
        for label in range(n_clusters):
            indices = np.where(clustering.labels_ == label)[0]
            p0.append(np.mean(prob_matrix[indices], axis=0))
        p0 = np.array(p0)
    
    c_min = np.zeros(n_clusters)
    for a, p_a in enumerate(p0):
        if rejected_contracts is not None:
            rej_utils = p_a @ rejected_contracts.T
            max_rej = np.max(rej_utils) if rej_utils.size > 0 else 0
        else:
            max_rej = 0
        
        acc_idx = [i for i, log in enumerate(content) if log['Agent Action'] == 1 and np.argmax([p @ log['Contract'] for p in p0]) == a]
        if acc_idx:
            acc_wages = np.array([content[i]['Contract'] for i in acc_idx])
            min_utility = np.min(p_a @ acc_wages.T)
            c_min[a] = min_utility
        
        c_min[a] = max(c_min[a], max_rej)
    
    agent_setting = np.hstack([p0, c_min.reshape(-1, 1)])
    return agent_setting
```
