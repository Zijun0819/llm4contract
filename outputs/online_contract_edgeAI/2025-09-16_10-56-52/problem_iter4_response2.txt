```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
import pandas as pd

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    logs = pd.DataFrame(content)
    accepted = logs[logs['Agent Action'] == 1]
    rejected = logs[logs['Agent Action'] == -1]
    
    def solve_p(w, u_threshold):
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_threshold])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            return res.x
        return None
    
    candidate_p = []
    for idx, row in accepted.iterrows():
        w = np.array(row['Contract'])
        u_actual = row['Principal Utility']
        p_sol = solve_p(w, u_actual)
        if p_sol is not None:
            candidate_p.append(p_sol)
    
    if not candidate_p:
        candidate_p = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_p)
    n_components_range = range(1, min(10, len(X) + 1))
    best_bic = np.inf
    best_gmm = None
    for n_components in n_components_range:
        try:
            gmm = GaussianMixture(n_components=n_components, random_state=0, n_init=3)
            gmm.fit(X)
            bic = gmm.bic(X)
            if bic < best_bic:
                best_bic = bic
                best_gmm = gmm
        except:
            continue
    
    if best_gmm is None:
        best_gmm = GaussianMixture(n_components=1, random_state=0)
        best_gmm.fit(X)
    
    action_centers = best_gmm.means_
    n_actions = action_centers.shape[0]
    
    contracts_accepted = [np.array(row['Contract']) for _, row in accepted.iterrows()]
    contracts_rejected = [np.array(row['Contract']) for _, row in rejected.iterrows()]
    
    def compute_ir_cost(action_idx):
        p = action_centers[action_idx]
        utilities = np.array([p @ w for w in contracts_accepted])
        valid_utilities = utilities[utilities >= 0]
        if len(valid_utilities) > 0:
            return np.min(valid_utilities)
        return 0.0
    
    def compute_rej_constraint(action_idx):
        if len(contracts_rejected) == 0:
            return -np.inf
        p = action_centers[action_idx]
        utilities = np.array([p @ w for w in contracts_rejected])
        return np.max(utilities)
    
    ir_costs = np.array([compute_ir_cost(a) for a in range(n_actions)])
    rej_constraints = np.array([compute_rej_constraint(a) for a in range(n_actions)])
    
    final_costs = np.maximum(ir_costs, rej_constraints)
    final_costs = np.maximum(final_costs, 0)
    
    agent_setting = np.hstack([action_centers, final_costs.reshape(-1, 1)])
    return agent_setting
```
