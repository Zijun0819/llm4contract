```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    if not accepted_logs:
        return np.array([[1/v.size] * v.size + [0]])
    
    m = v.size
    n_min = 1
    n_max = len(accepted_logs)
    
    def solve_for_p(w, u):
        if np.all(w <= 0):
            return np.ones(m) / m
        def objective(p):
            return w @ p - u - v @ p
        A_eq = np.ones((1, m))
        b_eq = np.array([1.0])
        bounds = [(0, 1)] * m
        constraints = [
            {'type': 'eq', 'fun': lambda p: A_eq @ p - b_eq}
        ]
        result = minimize(objective, x0=np.ones(m)/m, bounds=bounds, constraints=constraints)
        return result.x if result.success else np.ones(m)/m

    p_candidates = []
    for log in accepted_logs:
        p_candidate = solve_for_p(np.array(log['Contract']), log['Principal Utility'])
        p_candidates.append(p_candidate)
    p_candidates = np.array(p_candidates)
    
    best_score = -np.inf
    best_agent_setting = None
    
    for n in range(n_min, min(n_max + 1, 11)):
        kmeans = KMeans(n_clusters=n, random_state=0, n_init=10).fit(p_candidates)
        p_clusters = kmeans.cluster_centers_
        p_clusters = np.clip(p_clusters, 0, 1)
        p_clusters /= p_clusters.sum(axis=1, keepdims=True)
        
        assignments = []
        costs = np.zeros(n)
        for log in accepted_logs:
            w = np.array(log['Contract'])
            utilities = p_clusters @ w
            best_action = np.argmax(utilities)
            assignments.append(best_action)
            if costs[best_action] < utilities[best_action]:
                costs[best_action] = utilities[best_action]
        
        for a in range(n):
            if costs[a] == 0:
                costs[a] = np.max(p_clusters[a] @ np.array([log['Contract'] for log in accepted_logs]))
        
        for log in rejected_logs:
            w = np.array(log['Contract'])
            utilities = p_clusters @ w
            feasible = utilities >= 0
            if np.any(feasible):
                feasible_costs = costs[feasible]
                min_feasible_cost = np.min(feasible_costs)
                for a in np.where(feasible)[0]:
                    if costs[a] < min_feasible_cost:
                        costs[a] = min_feasible_cost
        
        agent_setting = np.hstack([p_clusters, costs.reshape(-1, 1)])
        
        violations = 0
        for log in content:
            w = np.array(log['Contract'])
            utilities = agent_setting[:, :-1] @ w - agent_setting[:, -1]
            max_utility = np.max(utilities)
            if log['Agent Action'] == 1 and max_utility < 0:
                violations += 1
            elif log['Agent Action'] == -1 and max_utility >= 0:
                violations += 1
        
        score = -violations - 0.1 * n
        
        if score > best_score:
            best_score = score
            best_agent_setting = agent_setting
    
    return best_agent_setting if best_agent_setting is not None else np.array([[1/m] * m + [0]])
```
