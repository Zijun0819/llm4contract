```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
from sklearn.neighbors import KernelDensity
import warnings
warnings.filterwarnings('ignore')

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = 12
    logs = pd.DataFrame(content)
    accepted = logs[logs['Agent Action'] == 1]
    rejected = logs[logs['Agent Action'] == -1]
    
    def solve_min_lp(w, u_threshold):
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_threshold])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            return res.x
        return None
    
    candidate_p = []
    for idx, row in accepted.iterrows():
        w = np.array(row['Contract'])
        u_actual = row['Principal Utility']
        p_sol = solve_min_lp(w, u_actual)
        if p_sol is not None:
            candidate_p.append(p_sol)
    
    if not candidate_p:
        candidate_p = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_p)
    n_components_range = range(1, min(9, len(X)))
    best_bic = np.inf
    best_gmm = None
    for n_components in n_components_range:
        gmm = GaussianMixture(n_components=n_components, random_state=0)
        gmm.fit(X)
        bic = gmm.bic(X)
        if bic < best_bic:
            best_bic = bic
            best_gmm = gmm
    
    action_centers = best_gmm.means_
    n_actions = action_centers.shape[0]
    
    kde = KernelDensity(bandwidth=0.1, kernel='gaussian')
    kde.fit(X)
    smoothed_centers = kde.sample(n_actions, random_state=0)
    smoothed_centers = np.clip(smoothed_centers, 0, 1)
    smoothed_centers = smoothed_centers / smoothed_centers.sum(axis=1, keepdims=True)
    action_centers = smoothed_centers
    
    action_assignments = {}
    for idx, row in logs.iterrows():
        w = np.array(row['Contract'])
        if row['Agent Action'] == 1:
            utilities = action_centers @ w
            best_action = np.argmax(utilities)
            action_assignments[idx] = best_action
    
    contracts_by_action = [[] for _ in range(n_actions)]
    for idx, assign in action_assignments.items():
        contracts_by_action[assign].append(logs.loc[idx, 'Contract'])
    
    rejected_contracts = [np.array(row['Contract']) for _, row in rejected.iterrows()]
    
    def compute_min_cost(action_idx, contract_set):
        if not contract_set:
            return -np.inf
        ws = np.array(contract_set)
        p = action_centers[action_idx]
        utilities = p @ ws.T
        return np.min(utilities)
    
    def compute_rej_cost(action_idx, rejected_contracts):
        if len(rejected_contracts) == 0:
            return -np.inf
        ws = np.array(rejected_contracts)
        p = action_centers[action_idx]
        utilities = p @ ws.T
        return np.max(utilities)
    
    ir_costs = np.array([compute_min_cost(a, contracts_by_action[a]) for a in range(n_actions)])
    rej_costs = np.array([compute_rej_cost(a, rejected_contracts) for a in range(n_actions)])
    
    base_costs = np.maximum(ir_costs, rej_costs)
    
    penalty = 1e-6
    final_costs = base_costs + penalty
    
    agent_setting = np.hstack([action_centers, final_costs.reshape(-1, 1)])
    return agent_setting
```
