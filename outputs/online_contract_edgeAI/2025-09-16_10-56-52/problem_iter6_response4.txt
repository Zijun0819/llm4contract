```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
import pandas as pd

def agent_solver(v, content):
    n_outcomes = len(v)
    logs = pd.DataFrame(content)
    accepted = logs[logs['Agent Action'] == 1]
    rejected = logs[logs['Agent Action'] == -1]
    
    def solve_min_lp(w, u_threshold):
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_threshold])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            return res.x
        return None
    
    candidate_p = []
    for _, row in accepted.iterrows():
        w = np.array(row['Contract'])
        u_actual = row['Principal Utility']
        p_sol = solve_min_lp(w, u_actual)
        if p_sol is not None:
            candidate_p.append(p_sol)
    
    if not candidate_p:
        candidate_p = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_p)
    n_components_range = range(1, min(11, len(X) + 1))
    best_bic = np.inf
    best_gmm = None
    for n_components in n_components_range:
        try:
            gmm = GaussianMixture(n_components=n_components, random_state=0, n_init=5)
            gmm.fit(X)
            bic = gmm.bic(X)
            if bic < best_bic:
                best_bic = bic
                best_gmm = gmm
        except:
            continue
    
    if best_gmm is None:
        best_gmm = GaussianMixture(n_components=1, random_state=0)
        best_gmm.fit(X)
    
    action_centers = best_gmm.means_
    n_actions = action_centers.shape[0]
    
    action_assignments = best_gmm.predict(X)
    assignments_dict = {i: [] for i in range(n_actions)}
    for idx, a in enumerate(action_assignments):
        assignments_dict[a].append(idx)
    
    contracts_acc = np.array([np.array(row['Contract']) for _, row in accepted.iterrows()])
    contracts_rej = np.array([np.array(row['Contract']) for _, row in rejected.iterrows()])
    
    min_utils = np.full(n_actions, np.inf)
    for a in range(n_actions):
        indices = assignments_dict[a]
        if indices:
            utilities = np.dot(contracts_acc[indices], action_centers[a])
            min_utils[a] = np.min(utilities)
    
    max_utils_rej = np.full(n_actions, -np.inf)
    if len(contracts_rej) > 0:
        for a in range(n_actions):
            utilities = np.dot(contracts_rej, action_centers[a])
            max_utils_rej[a] = np.max(utilities)
    
    costs = np.zeros(n_actions)
    for a in range(n_actions):
        ir_constraint = min_utils[a] if min_utils[a] != np.inf else -np.inf
        ic_constraint = max_utils_rej[a]
        costs[a] = max(ir_constraint, ic_constraint, 0)
    
    agent_setting = np.hstack([action_centers, costs.reshape(-1, 1)])
    return agent_setting
```
