```python
import numpy as np
from sklearn.mixture import GaussianMixture
from scipy.optimize import minimize, Bounds, LinearConstraint, NonlinearConstraint

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        raise ValueError("No accepted contracts in logs")
    
    n_candidates = min(20, max(3, len(accepted_logs) // 5))
    
    def solve_p(w, u_target):
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = Bounds(0, 1)
        res = minimize(lambda p: np.dot(c, p), 
                      x0=np.ones(m_outcomes)/m_outcomes, 
                      constraints=[{'type': 'eq', 'fun': lambda p: np.sum(p) - 1},
                                   {'type': 'eq', 'fun': lambda p: np.dot(v - w, p) - u_target}],
                      bounds=bounds,
                      method='SLSQP')
        return res.x if res.success else None

    candidate_ps = []
    for log in accepted_logs:
        p = solve_p(np.array(log['Contract']), log['Principal Utility'])
        if p is not None:
            candidate_ps.append(p)
    
    if not candidate_ps:
        candidate_ps = [np.ones(m_outcomes) / m_outcomes]
    
    X = np.array(candidate_ps)
    if len(X) > n_candidates:
        bic_scores = []
        gmm_models = []
        n_components_range = range(1, min(21, len(X)//2 + 1))
        for n_components in n_components_range:
            gmm = GaussianMixture(n_components=n_components, random_state=0, n_init=10, max_iter=200)
            gmm.fit(X)
            bic_scores.append(gmm.bic(X))
            gmm_models.append(gmm)
        best_idx = np.argmin(bic_scores)
        best_gmm = gmm_models[best_idx]
        p0 = best_gmm.means_
        labels = best_gmm.predict(X)
    else:
        p0 = X
        labels = np.arange(len(X))
    
    n_actions = len(p0)
    
    utility_thresholds = np.full(n_actions, np.inf)
    for idx, log in enumerate(accepted_logs):
        w = np.array(log['Contract'])
        if idx < len(labels):
            a_label = labels[idx]
        else:
            a_label = np.argmax([np.dot(p, w) for p in p0])
        u = np.dot(p0[a_label], w)
        if u < utility_thresholds[a_label]:
            utility_thresholds[a_label] = u
    
    rej_thresholds = np.full(n_actions, -np.inf)
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u = np.dot(p0[a], w)
            if u > rej_thresholds[a]:
                rej_thresholds[a] = u
    
    costs_init = np.maximum(utility_thresholds, rej_thresholds)
    costs_init = np.where(np.isfinite(costs_init), costs_init, 0.0)
    
    def objective(params):
        p_flat = params[:n_actions * m_outcomes].reshape(n_actions, m_outcomes)
        c = params[n_actions * m_outcomes: n_actions * m_outcomes + n_actions]
        penalty = 0.0
        
        for log in content:
            w = np.array(log['Contract'])
            u_vals = np.array([np.dot(p, w) - cost_val for p, cost_val in zip(p_flat, c)])
            max_u = np.max(u_vals)
            best_a = np.argmax(u_vals)
            
            if log['Agent Action'] == 1:
                if max_u < 0:
                    penalty += 1e6 * (max_u ** 2)
                principal_util = np.dot(p_flat[best_a], v - w)
                penalty += (principal_util - log['Principal Utility']) ** 2
            else:
                if max_u >= 0:
                    penalty += 1e6 * (max_u ** 2)
        
        reg = 1e-4 * np.sum((p_flat - p0.reshape(n_actions, m_outcomes)) ** 2)
        penalty += reg
        
        return penalty
    
    constraints = []
    for i in range(n_actions):
        constraints.append(LinearConstraint(np.eye(n_actions * m_outcomes + n_actions), 
                                           lb=np.concatenate([np.zeros(n_actions * m_outcomes), np.zeros(n_actions)]),
                                           ub=np.concatenate([np.ones(n_actions * m_outcomes), np.full(n_actions, np.inf)])))
        constraints.append(NonlinearConstraint(lambda x, idx=i: np.sum(x[idx*m_outcomes:(idx+1)*m_outcomes]), 1, 1))
    
    initial_params = np.concatenate([p0.flatten(), costs_init])
    
    res = minimize(objective, initial_params, method='trust-constr', 
                   constraints=constraints, 
                   options={'maxiter': 1000, 'verbose': 0})
    
    if res.success:
        optimized_params = res.x
        p_opt = optimized_params[:n_actions * m_outcomes].reshape(n_actions, m_outcomes)
        c_opt = optimized_params[n_actions * m_outcomes: n_actions * m_outcomes + n_actions]
    else:
        p_opt, c_opt = p0, costs_init
    
    return np.hstack([p_opt, c_opt.reshape(-1, 1)])
```
