```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.mixture import GaussianMixture
import warnings
warnings.filterwarnings('ignore')

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.ones((1, n_outcomes)) / n_outcomes, np.zeros((1, 1))])
    
    def solve_feasible_p(w, u_principal):
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_principal])
        bounds = [(0, 1)] * n_outcomes
        res = linprog(-np.ones(n_outcomes), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None
    
    candidate_ps = []
    for log in accepted_logs:
        w_arr = np.array(log['Contract'])
        p_candidate = solve_feasible_p(w_arr, log['Principal Utility'])
        if p_candidate is not None:
            candidate_ps.append(p_candidate)
    
    if not candidate_ps:
        candidate_ps = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_ps)
    max_components = min(20, len(X))
    bics = []
    models = []
    for n_comp in range(1, max_components + 1):
        gmm = GaussianMixture(n_components=n_comp, random_state=0, n_init=10, max_iter=300, tol=1e-6)
        gmm.fit(X)
        bics.append(gmm.bic(X))
        models.append(gmm)
    best_idx = np.argmin(bics)
    best_gmm = models[best_idx]
    p0 = best_gmm.means_
    n_actions = len(p0)
    
    labels = best_gmm.predict(X) if len(X) > 0 else np.array([0])
    
    utility_thresholds = np.full(n_actions, np.inf)
    for idx, log in enumerate(accepted_logs):
        w = np.array(log['Contract'])
        if idx < len(labels):
            a_label = labels[idx]
        else:
            dists = np.array([np.linalg.norm(p - w) for p in p0])
            a_label = np.argmin(dists)
        u_val = np.dot(p0[a_label], w)
        if u_val < utility_thresholds[a_label]:
            utility_thresholds[a_label] = u_val
    
    rej_thresholds = np.full(n_actions, -np.inf)
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u_val = np.dot(p0[a], w)
            if u_val > rej_thresholds[a]:
                rej_thresholds[a] = u_val
    
    cost_lower = np.maximum(utility_thresholds, np.where(np.isfinite(rej_thresholds), rej_thresholds + 1e-8, -np.inf))
    cost_initial = np.clip(cost_lower, 0, None)
    
    def objective(params):
        p_flat = params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c = params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
        penalty = 0.0
        
        for log in content:
            w = np.array(log['Contract'])
            u_vals = np.array([np.dot(p, w) - cost_val for p, cost_val in zip(p_flat, c)])
            max_u = np.max(u_vals)
            best_a = np.argmax(u_vals)
            
            if log['Agent Action'] == 1:
                if max_u < -1e-8:
                    penalty += (max_u) ** 2
                principal_util = np.dot(p_flat[best_a], v - w)
                penalty += (log['Principal Utility'] - principal_util) ** 2
            else:
                if max_u >= -1e-8:
                    penalty += (max_u) ** 2
        
        for i in range(n_actions):
            p_sum = np.sum(p_flat[i])
            if abs(p_sum - 1.0) > 1e-6:
                penalty += 1e4 * (p_sum - 1.0) ** 2
            penalty += 1e-6 * np.sum(np.maximum(0, -p_flat[i]))
            penalty += 1e-6 * np.sum(np.maximum(0, p_flat[i] - 1))
        for cost_val in c:
            penalty += 1e-6 * np.maximum(0, -cost_val)
        
        return penalty
    
    constraints = []
    for i in range(n_actions):
        constraints.append({'type': 'eq', 'fun': lambda x, i=i: np.sum(x[i*n_outcomes:(i+1)*n_outcomes]) - 1.0})
    
    bounds = [(0, 1)] * (n_actions * n_outcomes) + [(0, None)] * n_actions
    initial_params = np.concatenate([p0.flatten(), cost_initial])
    
    res = minimize(objective, initial_params, method='SLSQP', bounds=bounds, constraints=constraints, tol=1e-8, options={'maxiter': 2000})
    
    if res.success:
        optimized_params = res.x
        p_opt = optimized_params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c_opt = optimized_params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
    else:
        p_opt, c_opt = p0, cost_initial
    
    return np.hstack([p_opt, c_opt.reshape(-1, 1)])
```
