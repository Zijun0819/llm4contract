```python
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint, NonlinearConstraint
from sklearn.mixture import GaussianMixture
import warnings
warnings.filterwarnings('ignore')

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    def solve_p(w, u_target):
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        res = minimize(lambda x: np.dot(c, x), 
                      x0=np.ones(n_outcomes)/n_outcomes, 
                      constraints=[{'type': 'eq', 'fun': lambda x: np.dot(A_eq[0], x) - b_eq[0]},
                                  {'type': 'eq', 'fun': lambda x: np.dot(A_eq[1], x) - b_eq[1]}],
                      bounds=bounds,
                      method='SLSQP',
                      options={'tol': 1e-12, 'ftol': 1e-12})
        if res.success and np.all(res.x >= -1e-10) and np.isclose(np.sum(res.x), 1.0, atol=1e-10):
            return np.clip(res.x, 0, 1)
        return None

    candidate_ps = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_target = log['Principal Utility']
        p = solve_p(w, u_target)
        if p is not None:
            candidate_ps.append(p)
    
    if not candidate_ps:
        candidate_ps = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_ps)
    if len(X) > 1:
        max_components = min(20, len(X))
        bics = []
        gmm_models = []
        weights = np.ones(len(X))
        if rejected_logs:
            rejection_density = 1.0 / (len(rejected_logs) + 1e-10)
            weights += rejection_density
        
        for n in range(1, max_components + 1):
            gmm = GaussianMixture(n_components=n, random_state=42, n_init=30, 
                                 max_iter=1000, tol=1e-10, reg_covar=1e-12)
            gmm.fit(X, sample_weight=weights)
            bics.append(gmm.bic(X))
            gmm_models.append(gmm)
        best_idx = np.argmin(bics)
        best_gmm = gmm_models[best_idx]
        p0 = best_gmm.means_
        p0 = np.clip(p0, 0, 1)
        p0 /= p0.sum(axis=1, keepdims=True)
    else:
        p0 = X
    
    n_actions = len(p0)
    
    utility_thresholds = np.full(n_actions, np.inf)
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_vals = np.array([np.dot(p, w) for p in p0])
        best_a = np.argmax(u_vals)
        if u_vals[best_a] < utility_thresholds[best_a]:
            utility_thresholds[best_a] = u_vals[best_a]
    
    rej_thresholds = np.full(n_actions, -np.inf)
    for log in rejected_logs:
        w = np.array(log['Contract'])
        u_vals = np.array([np.dot(p, w) for p in p0])
        for a in range(n_actions):
            if u_vals[a] > rej_thresholds[a]:
                rej_thresholds[a] = u_vals[a]
    
    costs_init = np.maximum(utility_thresholds, rej_thresholds + 1e-12)
    costs_init = np.clip(costs_init, 0, None)
    
    def objective(params):
        p_flat = params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c = params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
        penalty = 0.0
        ir_ic_weight = 10000.0
        
        for log in content:
            w = np.array(log['Contract'])
            u_vals = np.array([np.dot(p, w) - cost_val for p, cost_val in zip(p_flat, c)])
            max_u = np.max(u_vals)
            
            if log['Agent Action'] == 1:
                if max_u < -1e-12:
                    penalty += ir_ic_weight * (max_u ** 2)
                best_a = np.argmax(u_vals)
                principal_util = np.dot(p_flat[best_a], v - w)
                if abs(principal_util - log['Principal Utility']) > 1e-8:
                    penalty += (principal_util - log['Principal Utility']) ** 2
            else:
                if max_u >= -1e-12:
                    penalty += ir_ic_weight * (max_u ** 2)
        
        for i in range(n_actions):
            p_sum = np.sum(p_flat[i])
            if not np.isclose(p_sum, 1.0, atol=1e-12):
                penalty += ir_ic_weight * (p_sum - 1.0) ** 2
            neg_penalty = np.sum(np.clip(-p_flat[i], 0, None) ** 2)
            penalty += ir_ic_weight * neg_penalty
        
        return penalty
    
    constraints = []
    for i in range(n_actions):
        constraints.append(LinearConstraint(
            np.eye(n_outcomes, n_actions * n_outcomes + n_actions, i * n_outcomes),
            lb=0, ub=1
        ))
        constraints.append(LinearConstraint(
            np.ones((1, n_actions * n_outcomes + n_actions)), 
            lb=1.0, ub=1.0,
            keep_feasible=True
        ))
    
    bounds = Bounds([0]*(n_actions*n_outcomes + n_actions), 
                   [1]*(n_actions*n_outcomes) + [np.inf]*n_actions)
    
    initial_params = np.concatenate([p0.flatten(), costs_init])
    
    res = minimize(
        objective, 
        initial_params, 
        method='trust-constr',
        bounds=bounds,
        constraints=constraints,
        options={'maxiter': 50000, 'gtol': 1e-12, 'xtol': 1e-12, 'verbose': 0}
    )
    
    optimized_params = res.x
    p_opt = optimized_params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
    c_opt = optimized_params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
    
    valid_indices = []
    for i in range(n_actions):
        if (np.all(p_opt[i] >= -1e-10) and 
            np.isclose(np.sum(p_opt[i]), 1.0, atol=1e-10) and 
            c_opt[i] >= -1e-10):
            valid_indices.append(i)
    
    if not valid_indices:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    p_opt = p_opt[valid_indices]
    c_opt = c_opt[valid_indices]
    
    for i in range(len(p_opt)):
        p_opt[i] = np.clip(p_opt[i], 0, 1)
        p_opt[i] /= p_opt[i].sum()
    
    return np.hstack([p_opt, c_opt.reshape(-1, 1)])
```
