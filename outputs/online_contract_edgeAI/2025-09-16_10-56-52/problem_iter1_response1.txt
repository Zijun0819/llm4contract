```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.neighbors import KernelDensity

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    if not accepted_logs:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    contracts = np.array([log['Contract'] for log in accepted_logs])
    principal_utils = np.array([log['Principal Utility'] for log in accepted_logs])
    
    def solve_p(w, u):
        def objective(p):
            return w @ p
        constraints = [
            {'type': 'eq', 'fun': lambda p: np.sum(p) - 1},
            {'type': 'eq', 'fun': lambda p: (v - w) @ p - u}
        ]
        bounds = [(0, 1) for _ in range(len(v))]
        initial_guess = np.ones(len(v)) / len(v)
        result = minimize(objective, initial_guess, bounds=bounds, constraints=constraints)
        return result.x if result.success else None

    p_candidates = []
    for i in range(len(accepted_logs)):
        p_sol = solve_p(contracts[i], principal_utils[i])
        if p_sol is not None:
            p_candidates.append(p_sol)
    
    if not p_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    p_candidates = np.array(p_candidates)
    
    max_clusters = min(10, len(p_candidates))
    bic_scores = []
    for n in range(1, max_clusters + 1):
        gm = GaussianMixture(n_components=n, random_state=0).fit(p_candidates)
        bic_scores.append(gm.bic(p_candidates))
    optimal_n = np.argmin(bic_scores) + 1
    
    gm = GaussianMixture(n_components=optimal_n, random_state=0).fit(p_candidates)
    p_centers = gm.means_
    
    assigned_actions = []
    for log in content:
        w = log['Contract']
        if log['Agent Action'] == 1:
            utilities = p_centers @ w
            assigned_actions.append(np.argmax(utilities))
        else:
            assigned_actions.append(-1)
    
    rej_logs = [log for log in content if log['Agent Action'] == -1]
    if rej_logs:
        rej_contracts = np.array([log['Contract'] for log in rej_logs])
        rej_utils_all = p_centers @ rej_contracts.T
        rej_thresholds = np.max(rej_utils_all, axis=1)
    else:
        rej_thresholds = np.full(optimal_n, -np.inf)
    
    costs = np.zeros(optimal_n)
    for a in range(optimal_n):
        relevant_logs = [i for i, act in enumerate(assigned_actions) if act == a and content[i]['Agent Action'] == 1]
        if relevant_logs:
            min_contract_util = min(p_centers[a] @ content[i]['Contract'] for i in relevant_logs)
            costs[a] = max(0, min_contract_util, rej_thresholds[a])
        else:
            costs[a] = max(0, rej_thresholds[a])
    
    kde = KernelDensity(kernel='gaussian', bandwidth=0.1).fit(p_centers)
    p_smoothed = np.exp(kde.score_samples(p_centers))
    p_smoothed = p_smoothed.reshape(-1, 1) * p_centers
    p_smoothed = p_smoothed / np.sum(p_smoothed, axis=1, keepdims=True)
    
    return np.hstack([p_smoothed, costs.reshape(-1, 1)])
```
