```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.mixture import GaussianMixture
from sklearn.neighbors import KernelDensity

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    num_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        default_p = np.ones(num_outcomes) / num_outcomes
        default_c = 0.0
        return np.hstack([default_p.reshape(1, -1), np.array([[default_c]])])
    
    candidate_ps = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u = log['Principal Utility']
        try:
            A_eq = np.vstack([np.ones(num_outcomes), v - w])
            b_eq = np.array([1.0, u])
            res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * num_outcomes, method='highs')
            if res.success:
                p = res.x
                if np.all(p >= -1e-8) and abs(np.sum(p) - 1) < 1e-8:
                    candidate_ps.append(np.clip(p, 0, 1))
        except:
            continue
            
    if not candidate_ps:
        default_p = np.ones(num_outcomes) / num_outcomes
        default_c = 0.0
        return np.hstack([default_p.reshape(1, -1), np.array([[default_c]])])
        
    candidate_ps = np.array(candidate_ps)
    
    max_clusters = min(10, len(candidate_ps))
    bic_scores = []
    for n in range(1, max_clusters + 1):
        gmm = GaussianMixture(n_components=n, random_state=42, n_init=10, max_iter=200)
        gmm.fit(candidate_ps)
        bic_scores.append(gmm.bic(candidate_ps))
    optimal_n = np.argmin(bic_scores) + 1
    
    gmm = GaussianMixture(n_components=optimal_n, random_state=42, n_init=10, max_iter=200)
    gmm.fit(candidate_ps)
    action_centers = gmm.means_
    
    kde = KernelDensity(kernel='gaussian', bandwidth=0.05)
    kde.fit(action_centers)
    log_dens = kde.score_samples(action_centers)
    weights = np.exp(log_dens - np.max(log_dens))
    weights /= weights.sum()
    action_centers = np.sum(action_centers * weights[:, np.newaxis], axis=0, keepdims=True)
    action_centers = np.clip(action_centers, 0, 1)
    row_sums = action_centers.sum(axis=1, keepdims=True)
    action_centers = np.where(row_sums > 0, action_centers / row_sums, 1/num_outcomes)
    
    n_actions = action_centers.shape[0]
    costs = np.zeros(n_actions)
    
    for i in range(n_actions):
        p_i = action_centers[i]
        min_accepted_util = float('inf')
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_i, w)
            if util >= 0:
                min_accepted_util = min(min_accepted_util, util)
        costs[i] = min_accepted_util if min_accepted_util != float('inf') else 0.0
    
    for i in range(n_actions):
        p_i = action_centers[i]
        for log in rejected_logs:
            w = np.array(log['Contract'])
            util = np.dot(p_i, w)
            if util >= costs[i]:
                costs[i] = util + 1e-8
    
    for i in range(n_actions):
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(action_centers[i], w) - costs[i]
            if util < 0:
                costs[i] = np.dot(action_centers[i], w) - 1e-8
    
    agent_setting = np.hstack([action_centers, costs.reshape(-1, 1)])
    return agent_setting
```
