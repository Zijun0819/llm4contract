```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize, LinearConstraint
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances_argmin_min

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    accepted_contracts = []
    accepted_wages = []
    rejected_wages = []
    principal_utilities = []
    for log in content:
        wage = np.array(log['Contract'])
        if log['Agent Action'] == 1:
            accepted_contracts.append(log)
            accepted_wages.append(wage)
            principal_utilities.append(log['Principal Utility'])
        else:
            rejected_wages.append(wage)
    accepted_wages = np.array(accepted_wages)
    rejected_wages = np.array(rejected_wages) if rejected_wages else None
    max_clusters = min(20, len(accepted_contracts))
    if max_clusters == 0:
        return np.array([]).reshape(0, 13)
    best_bic = np.inf
    best_kmeans = None
    all_p = []
    for log in accepted_contracts:
        wage = np.array(log['Contract'])
        u_p = log['Principal Utility']
        c = np.zeros(len(wage) + 2)
        A_eq = np.vstack([np.ones(len(wage)), wage, v - wage])
        b_eq = np.array([1, 0, u_p])
        bounds = [(0, 1)] * len(wage)
        res = linprog(wage, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            all_p.append(res.x)
    all_p = np.array(all_p)
    if len(all_p) == 0:
        k_best = 1
        p0 = np.ones((1, len(v))) / len(v)
    else:
        for k in range(1, max_clusters + 1):
            kmeans = KMeans(n_clusters=k, random_state=0, n_init=10).fit(all_p)
            bic = k * np.log(len(all_p)) * (len(v) + 1) - 2 * kmeans.score(all_p)
            if bic < best_bic:
                best_bic = bic
                best_kmeans = kmeans
                k_best = k
        p0 = best_kmeans.cluster_centers_
    assigns = np.argmin(pairwise_distances_argmin_min(accepted_wages @ p0.T, np.zeros(len(accepted_wages)))[1]) if len(accepted_wages) > 0 else np.array([])
    c_ir = np.zeros(k_best)
    for a in range(k_best):
        idx = np.where(assigns == a)[0]
        if idx.size > 0:
            min_util = np.min(accepted_wages[idx] @ p0[a])
            c_ir[a] = min_util
        else:
            c_ir[a] = 0
    if rejected_wages is not None and len(rejected_wages) > 0:
        rej_utils = rejected_wages @ p0.T
        c_rej = np.max(rej_utils, axis=0)
        c_adj = np.maximum(c_ir, c_rej)
    else:
        c_adj = c_ir
    tolerance = 1e-8
    for a in range(k_best):
        for i, log in enumerate(content):
            wage = np.array(log['Contract'])
            util = p0[a] @ wage - c_adj[a]
            if log['Agent Action'] == 1 and util < -tolerance:
                c_adj[a] = p0[a] @ wage
            elif log['Agent Action'] == -1 and util > tolerance:
                c_adj[a] = p0[a] @ wage + 1e-6
    agent_setting = np.hstack([p0, c_adj.reshape(-1, 1)])
    return agent_setting
```
