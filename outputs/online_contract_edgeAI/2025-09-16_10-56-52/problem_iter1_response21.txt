```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize, Bounds, LinearConstraint
from sklearn.cluster import KMeans
from itertools import combinations
import cvxpy as cp

def agent_solver(v, content):
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    if not accepted_logs:
        raise ValueError("No accepted contracts")
    
    m_outcomes = len(v)
    candidate_p_list = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        U_p = log['Principal Utility']
        if np.abs(v @ w - U_p) > 1e-8:
            indices = np.argsort(w)[::-1]
            p = np.zeros(m_outcomes)
            for idx in indices:
                if w[idx] - v[idx] > 0:
                    p_remaining = 1 - np.sum(p)
                    if p_remaining <= 0:
                        break
                    fraction = min(1.0, p_remaining)
                    p[idx] = fraction
                elif w[idx] - v[idx] < 0:
                    break
                else:
                    continue
            if np.isclose(np.sum(p), 1.0) and np.isclose(p @ (w - v), U_p):
                candidate_p_list.append(p)
        else:
            p = w - v
            if p.sum() > 0:
                p = p / p.sum()
            else:
                p = np.ones(m_outcomes) / m_outcomes
            candidate_p_list.append(p)
    
    candidate_p = np.vstack(candidate_p_list) if candidate_p_list else np.ones((1, m_outcomes)) / m_outcomes
    unique_p = np.unique(candidate_p, axis=0)
    if len(unique_p) > 10:
        kmeans = KMeans(n_clusters=10, random_state=0, n_init=10).fit(candidate_p)
        p0 = kmeans.cluster_centers_
    else:
        p0 = unique_p
    
    n_actions = len(p0)
    L = len(content)
    best_utils = np.array([max(p @ np.array(log['Contract'])) for log in content for p in p0]).reshape(L, n_actions).max(axis=1)
    
    c = np.zeros(n_actions)
    for a in range(n_actions):
        accepted_utils = []
        for i, log in enumerate(content):
            if log['Agent Action'] == 1:
                w = np.array(log['Contract'])
                util = p0[a] @ w
                if util >= best_utils[i]:
                    accepted_utils.append(util)
        if accepted_utils:
            c[a] = min(accepted_utils)
    
    rej_idx = [i for i, log in enumerate(content) if log['Agent Action'] == -1]
    for idx in rej_idx:
        w = np.array(content[idx]['Contract'])
        for a in range(n_actions):
            if p0[a] @ w > c[a] + 1e-8:
                c[a] = p0[a] @ w
    
    agent_setting = np.hstack([p0, c.reshape(-1, 1)])
    return agent_setting
```
