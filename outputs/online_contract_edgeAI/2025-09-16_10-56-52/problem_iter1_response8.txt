```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances_argmin_min

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = min(8, len(content) // 3)
    if n_candidates < 2:
        n_candidates = 2
    m_outcomes = v.shape[0]
    L = len(content)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    if not accepted_logs:
        return np.array([[1/m_outcomes]*m_outcomes + [0.0]])
    
    X = []
    for log in accepted_logs:
        w = log['Contract']
        u_p = log['Principal Utility']
        c = np.sum(w * v) - u_p
        p_candidate = None
        try:
            A_eq = np.vstack([np.ones(m_outcomes), w - v])
            b_eq = np.array([1.0, c])
            res = linprog(-v, A_eq=A_eq, b_eq=b_eq, bounds=[(0,1)]*m_outcomes, method='highs')
            if res.success:
                p_candidate = res.x
        except:
            pass
        if p_candidate is not None and np.all(p_candidate >= 0) and np.sum(p_candidate) > 0.99:
            X.append(p_candidate)
    
    if not X:
        return np.array([[1/m_outcomes]*m_outcomes + [0.0]])
    
    X = np.array(X)
    if len(X) > n_candidates:
        kmeans = KMeans(n_clusters=n_candidates, random_state=42, n_init=10).fit(X)
        centroids = kmeans.cluster_centers_
    else:
        centroids = X
    
    cluster_assignments, _ = pairwise_distances_argmin_min(X, centroids)
    
    c_estimates = np.zeros(n_candidates)
    for cluster_id in range(n_candidates):
        cluster_points = X[cluster_assignments == cluster_id]
        if len(cluster_points) > 0:
            associated_logs = []
            for idx in np.where(cluster_assignments == cluster_id)[0]:
                log = accepted_logs[idx]
                w = log['Contract']
                u_p = log['Principal Utility']
                associated_logs.append((w, u_p))
            
            w_matrix = np.array([w for w, u_p in associated_logs]).T
            c_min = np.min(centroids[cluster_id] @ w_matrix)
            c_estimates[cluster_id] = max(0, c_min)
        else:
            c_estimates[cluster_id] = 0.0
    
    for log in content:
        if log['Agent Action'] == -1:
            w_reject = np.array(log['Contract'])
            for cluster_id in range(n_candidates):
                utility_at_reject = centroids[cluster_id] @ w_reject
                if utility_at_reject >= c_estimates[cluster_id] - 1e-7:
                    c_estimates[cluster_id] = utility_at_reject + 1e-6
    
    agent_setting = np.hstack([centroids, c_estimates.reshape(-1,1)])
    return agent_setting
```
