```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = 12
    logs = pd.DataFrame(content)
    accepted = logs[logs['Agent Action'] == 1]
    rejected = logs[logs['Agent Action'] == -1]
    
    def solve_lp(w, u_p):
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_p])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            return res.x
        return None
    
    candidate_p = []
    for idx, row in accepted.iterrows():
        w = np.array(row['Contract'])
        u_p = row['Principal Utility']
        p_sol = solve_lp(w, u_p)
        if p_sol is not None:
            candidate_p.append(p_sol)
    
    if not candidate_p:
        candidate_p = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_p)
    n_components_range = range(1, min(10, len(X) + 1))
    best_bic = np.inf
    best_gmm = None
    for n_components in n_components_range:
        gmm = GaussianMixture(n_components=n_components, random_state=42, covariance_type='diag')
        gmm.fit(X)
        bic = gmm.bic(X)
        if bic < best_bic:
            best_bic = bic
            best_gmm = gmm
    
    action_centers = best_gmm.means_
    action_centers = action_centers / action_centers.sum(axis=1, keepdims=True)
    n_actions = action_centers.shape[0]
    
    action_assignments = {}
    for idx, row in logs.iterrows():
        w = np.array(row['Contract'])
        utilities = action_centers @ w
        best_action = np.argmax(utilities)
        action_assignments[idx] = best_action
    
    contracts_by_action = [[] for _ in range(n_actions)]
    for idx, row in accepted.iterrows():
        action_idx = action_assignments[idx]
        contracts_by_action[action_idx].append(np.array(row['Contract']))
    
    rejected_contracts = [np.array(row['Contract']) for _, row in rejected.iterrows()]
    
    def compute_ir_bounds(action_idx):
        contracts = contracts_by_action[action_idx]
        if not contracts:
            return 0.0, 0.0
        ws = np.array(contracts)
        p = action_centers[action_idx]
        utilities = p @ ws.T
        return np.min(utilities), np.max(utilities)
    
    def compute_ic_bounds(action_idx):
        other_actions = [i for i in range(n_actions) if i != action_idx]
        contracts = []
        for a in other_actions:
            contracts.extend(contracts_by_action[a])
        if not contracts:
            return -np.inf, -np.inf
        ws = np.array(contracts)
        p = action_centers[action_idx]
        utilities = p @ ws.T
        return np.min(utilities), np.max(utilities) if len(utilities) > 0 else (-np.inf, -np.inf)
    
    def compute_reject_bounds(action_idx):
        if len(rejected_contracts) == 0:
            return -np.inf, -np.inf
        ws = np.array(rejected_contracts)
        p = action_centers[action_idx]
        utilities = p @ ws.T
        return np.min(utilities), np.max(utilities) if len(utilities) > 0 else (-np.inf, -np.inf)
    
    costs = []
    for a in range(n_actions):
        ir_min, ir_max = compute_ir_bounds(a)
        ic_min, ic_max = compute_ic_bounds(a)
        rej_min, rej_max = compute_reject_bounds(a)
        
        lower_bound = max(ir_min, ic_max, rej_max, 0.0)
        upper_bound = ir_max
        
        if lower_bound <= upper_bound:
            cost = lower_bound
        else:
            cost = (lower_bound + upper_bound) / 2
        
        costs.append(cost)
    
    agent_setting = np.hstack([action_centers, np.array(costs).reshape(-1, 1)])
    return agent_setting
```
