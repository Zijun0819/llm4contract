```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances_argmin_min

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = v.shape[0]
    if not content or m_outcomes != 12:
        return np.array([[1/m_outcomes]*m_outcomes + [0.0]])
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.array([[1/m_outcomes]*m_outcomes + [0.0]])
    
    X = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_p = log['Principal Utility']
        c = w @ v - u_p
        try:
            A_eq = np.vstack([np.ones(m_outcomes), w - v])
            b_eq = np.array([1.0, c])
            res = linprog(-v, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m_outcomes, method='highs')
            if res.success and np.all(res.x >= 0) and abs(np.sum(res.x) - 1.0) < 1e-6:
                X.append(res.x)
        except:
            continue
    
    if not X:
        return np.array([[1/m_outcomes]*m_outcomes + [0.0]])
    
    X = np.array(X)
    n_candidates = min(8, len(X) // 3)
    if n_candidates < 1:
        n_candidates = 1
    
    if len(X) > n_candidates:
        kmeans = KMeans(n_clusters=n_candidates, random_state=42, n_init=10).fit(X)
        centroids = kmeans.cluster_centers_
    else:
        centroids = X
    
    c_estimates = np.zeros(n_candidates)
    for cluster_id in range(n_candidates):
        cluster_points = X[kmeans.labels_ == cluster_id] if len(X) > n_candidates else X
        if len(cluster_points) > 0:
            w_matrix = np.array([log['Contract'] for log in accepted_logs])[kmeans.labels_ == cluster_id].T
            if w_matrix.size > 0:
                utilities = centroids[cluster_id] @ w_matrix
                c_estimates[cluster_id] = np.min(utilities) if utilities.size > 0 else 0.0
            else:
                c_estimates[cluster_id] = 0.0
        else:
            c_estimates[cluster_id] = 0.0
    
    for log in rejected_logs:
        w_reject = np.array(log['Contract'])
        for cluster_id in range(n_candidates):
            utility_at_reject = centroids[cluster_id] @ w_reject
            if utility_at_reject >= c_estimates[cluster_id] - 1e-7:
                c_estimates[cluster_id] = utility_at_reject + 1e-6
    
    for cluster_id in range(n_candidates):
        c_estimates[cluster_id] = max(0.0, c_estimates[cluster_id])
    
    agent_setting = np.hstack([centroids, c_estimates.reshape(-1, 1)])
    return agent_setting
```
