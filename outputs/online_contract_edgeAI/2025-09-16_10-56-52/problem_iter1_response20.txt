```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances
from scipy.special import expit

def agent_solver(v, content):
    m_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    def solve_p_and_c(w, u):
        m = len(w)
        res = linprog(w, A_eq=[np.ones(m), v - w], b_eq=[1, u], 
                     bounds=[(0, 1)]*m, method='highs')
        return (res.x, w @ res.x) if res.success else (None, None)
    
    candidate_actions = []
    for log in accepted_logs:
        p, c = solve_p_and_c(log['Contract'], log['Principal Utility'])
        if p is not None:
            candidate_actions.append((p, c))
    
    unique_actions = []
    for p, c in candidate_actions:
        found = False
        for u_p, u_c in unique_actions:
            if np.allclose(p, u_p, rtol=1e-3, atol=1e-5):
                found = True
                break
        if not found:
            unique_actions.append((p.copy(), c))
    
    if len(unique_actions) == 0:
        unique_actions = [(np.ones(m_outcomes)/m_outcomes, 0.0)]
    
    n_actions = len(unique_actions)
    p_matrix = np.array([p for p, _ in unique_actions])
    c_vector = np.array([c for _, c in unique_actions])
    
    def verify_log(log, action_idx):
        w = log['Contract']
        utility = p_matrix[action_idx] @ w - c_vector[action_idx]
        return utility >= 0 if log['Agent Action'] == 1 else utility < 0
    
    log_assignments = []
    for log in content:
        utilities = p_matrix @ log['Contract'] - c_vector
        best_idx = np.argmax(utilities)
        log_assignments.append((log, best_idx, verify_log(log, best_idx)))
    
    incorrect_logs = [log for log, idx, correct in log_assignments if not correct]
    
    if incorrect_logs:
        rejection_penalties = []
        for log in rejected_logs:
            penalties = np.max(p_matrix @ log['Contract']) - c_vector + 1e-8
            rejection_penalties.append(penalties)
        
        if rejection_penalties:
            min_rejection_penalty = np.min(rejection_penalties, axis=0)
            c_vector = np.maximum(c_vector, min_rejection_penalty)
    
    agent_setting = np.zeros((n_actions, m_outcomes + 1))
    agent_setting[:, :-1] = p_matrix
    agent_setting[:, -1] = c_vector
    
    return agent_setting
```
