```python
import numpy as np
from scipy.optimize import linprog, minimize
from sklearn.mixture import GaussianMixture
import warnings

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    warnings.filterwarnings('ignore')
    
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    def solve_p(w, u_target):
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs', options={'tol': 1e-14})
        if res.success and np.all(res.x >= -1e-12) and abs(np.sum(res.x) - 1) < 1e-12:
            return np.clip(res.x, 0, 1)
        return None

    candidate_ps = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_target = log['Principal Utility']
        p = solve_p(w, u_target)
        if p is not None:
            candidate_ps.append(p)
    
    rej_weights = []
    if rejected_logs:
        for log in rejected_logs:
            w = np.array(log['Contract'])
            p_rej = np.zeros(n_outcomes)
            p_rej[np.argmax(w)] = 1.0
            candidate_ps.append(p_rej)
            rej_weights.append(0.5)
    
    if not candidate_ps:
        candidate_ps = [np.ones(n_outcomes) / n_outcomes]
        rej_weights = []
    
    X = np.array(candidate_ps)
    weights = np.ones(len(X))
    if rej_weights:
        weights[-len(rejected_logs):] = rej_weights
    
    if len(X) > 1:
        max_components = min(25, len(X))
        bics = []
        models = []
        for n_comp in range(1, max_components + 1):
            gmm = GaussianMixture(n_components=n_comp, random_state=42, n_init=40, max_iter=1000, tol=1e-12)
            gmm.fit(X, sample_weight=weights)
            bics.append(gmm.bic(X))
            models.append(gmm)
        best_idx = np.argmin(bics)
        best_gmm = models[best_idx]
        p0 = best_gmm.means_
        labels = best_gmm.predict(X)
    else:
        p0 = X
        labels = np.zeros(len(X), dtype=int)
    
    n_actions = len(p0)
    
    acceptance_thresholds = np.full(n_actions, np.inf)
    for i, log in enumerate(accepted_logs):
        w = np.array(log['Contract'])
        if i < len(labels):
            a_idx = labels[i]
        else:
            dists = np.array([np.linalg.norm(p - w) for p in p0])
            a_idx = np.argmin(dists)
        u_val = np.dot(p0[a_idx], w)
        if u_val < acceptance_thresholds[a_idx]:
            acceptance_thresholds[a_idx] = u_val
    
    rejection_thresholds = np.full(n_actions, -np.inf)
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u_val = np.dot(p0[a], w)
            if u_val > rejection_thresholds[a]:
                rejection_thresholds[a] = u_val
    
    costs_init = np.maximum(acceptance_thresholds, rejection_thresholds + 1e-14)
    costs_init = np.clip(costs_init, 0, None)
    
    def objective(params):
        p_flat = params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c_vals = params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
        penalty = 0.0
        ir_ic_weight = 10000.0
        
        for log in content:
            w = np.array(log['Contract'])
            agent_utilities = np.array([np.dot(p, w) - cost for p, cost in zip(p_flat, c_vals)])
            max_agent_util = np.max(agent_utilities)
            
            if log['Agent Action'] == 1:
                if max_agent_util < -1e-14:
                    penalty += ir_ic_weight * (max_agent_util ** 2)
                best_action = np.argmax(agent_utilities)
                principal_util_actual = np.dot(p_flat[best_action], v - w)
                penalty += (principal_util_actual - log['Principal Utility']) ** 2
            else:
                if max_agent_util >= -1e-14:
                    penalty += ir_ic_weight * (max_agent_util ** 2)
        
        for i in range(n_actions):
            p_sum = np.sum(p_flat[i])
            if not np.isclose(p_sum, 1.0, atol=1e-14):
                penalty += ir_ic_weight * (p_sum - 1.0) ** 2
            neg_prob_penalty = np.sum(np.clip(-p_flat[i], 0, None) ** 2)
            penalty += ir_ic_weight * neg_prob_penalty
        
        return penalty
    
    constraints = [
        {'type': 'eq', 'fun': lambda x, idx=i: np.sum(x[idx*n_outcomes:(idx+1)*n_outcomes]) - 1.0}
        for i in range(n_actions)
    ]
    
    bounds = [(0, 1)] * (n_actions * n_outcomes) + [(0, None)] * n_actions
    x0 = np.concatenate([p0.flatten(), costs_init])
    
    res = minimize(
        objective,
        x0,
        method='SLSQP',
        bounds=bounds,
        constraints=constraints,
        tol=1e-14,
        options={'maxiter': 100000, 'ftol': 1e-14, 'disp': False}
    )
    
    x_opt = res.x
    p_opt = x_opt[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
    c_opt = x_opt[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
    
    valid_rows = []
    for i in range(n_actions):
        if (np.all(p_opt[i] >= -1e-14) and 
            np.isclose(np.sum(p_opt[i]), 1.0, atol=1e-14) and 
            c_opt[i] >= -1e-14):
            valid_rows.append(i)
    
    if not valid_rows:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    p_final = p_opt[valid_rows]
    c_final = c_opt[valid_rows]
    
    return np.hstack([p_final, c_final.reshape(-1, 1)])
```
