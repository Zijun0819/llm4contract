```python
import numpy as np
from scipy.optimize import minimize, linprog
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if len(accepted_logs) == 0:
        raise ValueError("No accepted contracts in logs")
    
    # Determine number of components using BIC
    candidate_ps = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        # Solve for minimal p that achieves principal utility
        c = -w
        A_eq = np.vstack([np.ones(m_outcomes), v - w])
        b_eq = np.array([1.0, log['Principal Utility']])
        bounds = [(0, 1) for _ in range(m_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            candidate_ps.append(res.x)
    
    if not candidate_ps:
        candidate_ps = [np.ones(m_outcomes) / m_outcomes]
    
    X = np.array(candidate_ps)
    max_components = min(20, max(2, len(X) // 3))
    bic_scores = []
    gmm_models = []
    
    for n_comp in range(1, max_components + 1):
        gmm = GaussianMixture(n_components=n_comp, random_state=0, n_init=5, max_iter=200)
        gmm.fit(X)
        bic_scores.append(gmm.bic(X))
        gmm_models.append(gmm)
    
    best_n = np.argmin(bic_scores) + 1
    gmm = gmm_models[best_n - 1]
    p0 = gmm.means_
    
    n_actions = len(p0)
    
    # Infer costs from IR constraints
    lower_bounds = np.zeros(n_actions)
    upper_bounds = np.full(n_actions, np.inf)
    
    for log in accepted_logs:
        w = np.array(log['Contract'])
        utilities = p0 @ w
        best_action = np.argmax(utilities)
        lower_bounds[best_action] = max(lower_bounds[best_action], utilities[best_action])
    
    for log in rejected_logs:
        w = np.array(log['Contract'])
        utilities = p0 @ w
        for a in range(n_actions):
            if utilities[a] > 0:
                upper_bounds[a] = min(upper_bounds[a], utilities[a])
    
    # Set initial costs to midpoint where possible, otherwise use lower bound
    costs_init = np.zeros(n_actions)
    for a in range(n_actions):
        if np.isfinite(upper_bounds[a]):
            costs_init[a] = (lower_bounds[a] + upper_bounds[a]) / 2
        else:
            costs_init[a] = lower_bounds[a]
    
    # Define optimization objective and constraints
    def objective(params):
        p_flat = params[:n_actions * m_outcomes].reshape(n_actions, m_outcomes)
        c = params[n_actions * m_outcomes: n_actions * m_outcomes + n_actions]
        penalty = 0.0
        
        for log in content:
            w = np.array(log['Contract'])
            u_vals = np.array([p @ w - cost_val for p, cost_val in zip(p_flat, c)])
            max_u = np.max(u_vals)
            
            if log['Agent Action'] == 1:
                if max_u < 0:
                    penalty += (max_u) ** 2  # Should be >=0 but is negative
                best_a = np.argmax(u_vals)
                principal_util = np.dot(p_flat[best_a], v - w)
                penalty += (principal_util - log['Principal Utility']) ** 2
            else:
                if max_u >= 0:
                    penalty += (max_u) ** 2  # Should be <0 but is non-negative
        
        # Regularization to encourage sparsity and smoothness
        penalty += 0.001 * np.sum((p_flat - p0) ** 2)
        penalty += 0.001 * np.sum((c - costs_init) ** 2)
        return penalty
    
    constraints = []
    for i in range(n_actions):
        constraints.append({'type': 'eq', 'fun': lambda x, idx=i: np.sum(x[idx*m_outcomes:(idx+1)*m_outcomes]) - 1})
    
    bounds = [(0, 1)] * (n_actions * m_outcomes) + [(0, None)] * n_actions
    initial_params = np.concatenate([p0.flatten(), costs_init])
    
    res = minimize(objective, initial_params, method='SLSQP', bounds=bounds, constraints=constraints, tol=1e-6, options={'maxiter': 1000})
    
    if res.success:
        optimized_params = res.x
        p_opt = optimized_params[:n_actions * m_outcomes].reshape(n_actions, m_outcomes)
        c_opt = optimized_params[n_actions * m_outcomes: n_actions * m_outcomes + n_actions]
    else:
        p_opt, c_opt = p0, costs_init
    
    # Ensure probabilities sum to 1 and costs are non-negative
    for i in range(n_actions):
        p_opt[i] = p_opt[i] / np.sum(p_opt[i])
    c_opt = np.maximum(c_opt, 0)
    
    return np.hstack([p_opt, c_opt.reshape(-1, 1)])
```
