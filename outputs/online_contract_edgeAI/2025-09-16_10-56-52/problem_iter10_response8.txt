```python
import numpy as np
from scipy.optimize import linprog, minimize
from sklearn.mixture import GaussianMixture
import pandas as pd
import warnings
warnings.filterwarnings('ignore')

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    df = pd.DataFrame(content)
    accepted = df[df['Agent Action'] == 1]
    rejected = df[df['Agent Action'] == -1]
    
    if len(accepted) == 0:
        return np.hstack([np.ones((1, n_outcomes)) / n_outcomes, np.zeros((1, 1))])
    
    def solve_feasible_p(w, u_target):
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        res = linprog(-np.ones(n_outcomes), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None
    
    candidate_ps = []
    for _, row in accepted.iterrows():
        w = np.array(row['Contract'])
        u_p = row['Principal Utility']
        p_candidate = solve_feasible_p(w, u_p)
        if p_candidate is not None:
            candidate_ps.append(p_candidate)
    
    if not candidate_ps:
        candidate_ps = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_ps)
    n_samples = len(X)
    
    n_candidates = min(30, max(5, n_samples // 3))
    
    if n_samples > 1:
        bics = []
        models = []
        max_components = min(15, n_samples - 1)
        for n_comp in range(1, max_components + 1):
            gmm = GaussianMixture(n_components=n_comp, random_state=42, n_init=15, max_iter=300)
            gmm.fit(X)
            bics.append(gmm.bic(X))
            models.append(gmm)
        best_idx = np.argmin(bics)
        best_gmm = models[best_idx]
        action_centers = best_gmm.means_
        labels = best_gmm.predict(X)
    else:
        action_centers = X
        labels = [0]
    
    accepted_contracts = list(accepted['Contract'].apply(np.array))
    rejected_contracts = list(rejected['Contract'].apply(np.array))
    
    n_actions = len(action_centers)
    min_utils = np.full(n_actions, np.inf)
    max_rej_utils = np.full(n_actions, -np.inf)
    
    for i, w in enumerate(accepted_contracts):
        if i < len(labels):
            a_label = labels[i]
        else:
            dists = np.array([np.linalg.norm(p - w) for p in action_centers])
            a_label = np.argmin(dists)
        util = np.dot(action_centers[a_label], w)
        if util < min_utils[a_label]:
            min_utils[a_label] = util
    
    for w in rejected_contracts:
        for a in range(n_actions):
            util = np.dot(action_centers[a], w)
            if util > max_rej_utils[a]:
                max_rej_utils[a] = util
    
    cost_initial = np.maximum(min_utils, np.where(np.isfinite(max_rej_utils), max_rej_utils + 1e-8, 0))
    cost_initial = np.clip(cost_initial, 0, None)
    
    def objective(params):
        p_flat = params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c = params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
        penalty = 0.0
        
        for _, row in df.iterrows():
            w = np.array(row['Contract'])
            u_vals = np.array([p @ w - cost_val for p, cost_val in zip(p_flat, c)])
            max_u = np.max(u_vals)
            
            if row['Agent Action'] == 1:
                if max_u < 0:
                    penalty += max_u ** 2
                best_a = np.argmax(u_vals)
                principal_util = p_flat[best_a] @ (v - w)
                penalty += (principal_util - row['Principal Utility']) ** 2
            else:
                if max_u >= 0:
                    penalty += max_u ** 2
        
        for p in p_flat:
            if not np.isclose(np.sum(p), 1.0, atol=1e-8):
                penalty += (np.sum(p) - 1.0) ** 2
        
        for cost_val in c:
            if cost_val < 0:
                penalty += cost_val ** 2
        
        return penalty
    
    constraints = []
    for i in range(n_actions):
        constraints.append({'type': 'eq', 'fun': lambda x, idx=i: np.sum(x[idx*n_outcomes:(idx+1)*n_outcomes]) - 1})
    
    bounds = [(0, 1)] * (n_actions * n_outcomes) + [(0, None)] * n_actions
    initial_params = np.concatenate([action_centers.flatten(), cost_initial])
    
    res = minimize(objective, initial_params, method='SLSQP', bounds=bounds, constraints=constraints, tol=1e-8, options={'maxiter': 2000, 'ftol': 1e-10})
    
    if res.success:
        optimized_params = res.x
        p_opt = optimized_params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c_opt = optimized_params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
    else:
        p_opt, c_opt = action_centers, cost_initial
    
    return np.hstack([p_opt, c_opt.reshape(-1, 1)])
```
