```python
import numpy as np
from scipy.optimize import linprog, minimize
from sklearn.mixture import GaussianMixture
import warnings

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    warnings.filterwarnings('ignore')
    n_outcomes = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    def solve_p(w, u_target):
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs', options={'tol': 1e-10})
        return res.x if res.success else None

    candidate_ps = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_target = log['Principal Utility']
        p = solve_p(w, u_target)
        if p is not None and np.all(p >= 0) and np.isclose(p.sum(), 1.0, atol=1e-8):
            candidate_ps.append(p)
    
    if not candidate_ps:
        candidate_ps = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_ps)
    
    if len(X) > 1:
        max_components = min(20, len(X))
        n_components_range = range(1, max_components + 1)
        bics = []
        gmm_models = []
        for n in n_components_range:
            gmm = GaussianMixture(n_components=n, random_state=42, n_init=30, max_iter=500, tol=1e-8)
            gmm.fit(X)
            bics.append(gmm.bic(X))
            gmm_models.append(gmm)
        best_idx = np.argmin(bics)
        best_gmm = gmm_models[best_idx]
        p0 = best_gmm.means_
        p0 = np.clip(p0, 0, 1)
        p0 = p0 / p0.sum(axis=1, keepdims=True)
    else:
        p0 = X
    
    n_actions = p0.shape[0]
    
    lower_bounds = np.full(n_actions, -np.inf)
    for log in accepted_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u = np.dot(p0[a], w)
            if u > lower_bounds[a]:
                lower_bounds[a] = u
    
    upper_bounds = np.full(n_actions, np.inf)
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u = np.dot(p0[a], w)
            if u < upper_bounds[a]:
                upper_bounds[a] = u
    
    pairwise_constraints = []
    for i in range(len(accepted_logs)):
        w_i = np.array(accepted_logs[i]['Contract'])
        for j in range(len(rejected_logs)):
            w_j = np.array(rejected_logs[j]['Contract'])
            for a in range(n_actions):
                u_i = np.dot(p0[a], w_i)
                u_j = np.dot(p0[a], w_j)
                if u_i > u_j:
                    pairwise_constraints.append((a, u_i, u_j))
    
    cost_init = np.zeros(n_actions)
    for a in range(n_actions):
        if lower_bounds[a] > -np.inf and upper_bounds[a] < np.inf:
            cost_init[a] = (lower_bounds[a] + upper_bounds[a]) / 2
        elif lower_bounds[a] > -np.inf:
            cost_init[a] = lower_bounds[a]
        elif upper_bounds[a] < np.inf:
            cost_init[a] = upper_bounds[a] - 1e-8
        else:
            cost_init[a] = 0.0
    
    for (a, u_i, u_j) in pairwise_constraints:
        if cost_init[a] < u_j:
            cost_init[a] = u_j + 1e-8
        if cost_init[a] > u_i:
            cost_init[a] = u_i - 1e-8
    
    cost_init = np.clip(cost_init, 0, None)
    
    def objective(params):
        p_flat = params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c = params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
        penalty = 0.0
        ir_ic_weight = 10000.0
        
        for log in content:
            w = np.array(log['Contract'])
            u_vals = np.array([np.dot(p, w) - cost_val for p, cost_val in zip(p_flat, c)])
            max_u = np.max(u_vals)
            best_a = np.argmax(u_vals)
            
            if log['Agent Action'] == 1:
                if max_u < 0:
                    penalty += ir_ic_weight * (max_u ** 2)
                principal_util = np.dot(p_flat[best_a], v - w)
                penalty += (principal_util - log['Principal Utility']) ** 2
            else:
                if max_u >= 0:
                    penalty += ir_ic_weight * (max_u ** 2)
        
        for i in range(n_actions):
            p_sum = np.sum(p_flat[i])
            penalty += ir_ic_weight * ((p_sum - 1.0) ** 2)
            penalty += ir_ic_weight * np.sum(np.clip(-p_flat[i], 0, None) ** 2)
            penalty += ir_ic_weight * np.clip(-c[i], 0, None) ** 2
        
        return penalty
    
    constraints = []
    for i in range(n_actions):
        constraints.append({'type': 'eq', 'fun': lambda x, idx=i: np.sum(x[idx*n_outcomes:(idx+1)*n_outcomes]) - 1.0})
    
    bounds = [(0, 1)] * (n_actions * n_outcomes) + [(0, None)] * n_actions
    x0 = np.concatenate([p0.flatten(), cost_init])
    
    res = minimize(
        objective,
        x0,
        method='SLSQP',
        bounds=bounds,
        constraints=constraints,
        tol=1e-12,
        options={'maxiter': 10000, 'ftol': 1e-12, 'disp': False}
    )
    
    optimized_params = res.x
    p_opt = optimized_params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
    c_opt = optimized_params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
    
    valid_rows = []
    for i in range(n_actions):
        if np.all(p_opt[i] >= -1e-10) and np.isclose(np.sum(p_opt[i]), 1.0, atol=1e-10) and c_opt[i] >= -1e-10:
            valid_rows.append(i)
    
    if not valid_rows:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    p_final = p_opt[valid_rows]
    c_final = c_opt[valid_rows]
    
    return np.hstack([p_final, c_final.reshape(-1, 1)])
```
