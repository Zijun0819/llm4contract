```python
import numpy as np
from scipy.optimize import linprog, minimize
from sklearn.mixture import GaussianMixture
import warnings

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    warnings.filterwarnings('ignore')
    
    num_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        default_p = np.ones(num_outcomes) / num_outcomes
        default_c = 0.0
        return np.hstack([default_p.reshape(1, -1), np.array([[default_c]])])
    
    max_clusters = min(20, max(3, len(accepted_logs) // 5))
    
    def solve_p(w, u_target):
        c = -w
        A_eq = np.vstack([np.ones(num_outcomes), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = [(0, 1) for _ in range(num_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    candidate_ps = []
    for log in accepted_logs:
        p = solve_p(np.array(log['Contract']), log['Principal Utility'])
        if p is not None:
            candidate_ps.append(p)
    
    if not candidate_ps:
        candidate_ps = [np.ones(num_outcomes) / num_outcomes]
    
    X = np.array(candidate_ps)
    if len(X) > 1:
        bics = []
        gmm_models = []
        for n in range(1, max_clusters + 1):
            gmm = GaussianMixture(n_components=n, random_state=0, n_init=10, max_iter=200)
            gmm.fit(X)
            bics.append(gmm.bic(X))
            gmm_models.append(gmm)
        best_n = np.argmin(bics) + 1
        best_gmm = gmm_models[best_n - 1]
        p0 = best_gmm.means_
        p0 = np.clip(p0, 0, 1)
        p0 /= p0.sum(axis=1, keepdims=True)
    else:
        p0 = X
    
    n_actions = len(p0)
    
    lower_bounds = np.full(n_actions, -np.inf)
    upper_bounds = np.full(n_actions, np.inf)
    
    for log in accepted_logs:
        w = np.array(log['Contract'])
        utilities = p0 @ w
        for a in range(n_actions):
            if utilities[a] >= 0:
                lower_bounds[a] = max(lower_bounds[a], utilities[a])
    
    for log in rejected_logs:
        w = np.array(log['Contract'])
        utilities = p0 @ w
        for a in range(n_actions):
            if utilities[a] >= 0:
                upper_bounds[a] = min(upper_bounds[a], utilities[a])
    
    initial_costs = np.zeros(n_actions)
    for a in range(n_actions):
        if lower_bounds[a] > -np.inf and upper_bounds[a] < np.inf:
            initial_costs[a] = (lower_bounds[a] + upper_bounds[a]) / 2
        elif lower_bounds[a] > -np.inf:
            initial_costs[a] = lower_bounds[a]
        elif upper_bounds[a] < np.inf:
            initial_costs[a] = upper_bounds[a] - 1e-6
        else:
            initial_costs[a] = 0.0
    
    def objective(params):
        p_flat = params[:n_actions * num_outcomes].reshape(n_actions, num_outcomes)
        c = params[n_actions * num_outcomes: n_actions * num_outcomes + n_actions]
        penalty = 0.0
        
        for log in content:
            w = np.array(log['Contract'])
            u_vals = np.array([p @ w - cost_val for p, cost_val in zip(p_flat, c)])
            max_u = np.max(u_vals)
            
            if log['Agent Action'] == 1:
                if max_u < 0:
                    penalty += (max_u - 0) ** 2
                best_a = np.argmax(u_vals)
                principal_util = np.dot(p_flat[best_a], v - w)
                penalty += (principal_util - log['Principal Utility']) ** 2
            else:
                if max_u >= 0:
                    penalty += (max_u - 0) ** 2
        
        return penalty
    
    constraints = []
    for i in range(n_actions):
        constraints.append({'type': 'eq', 'fun': lambda x, idx=i: np.sum(x[idx*num_outcomes:(idx+1)*num_outcomes]) - 1})
    
    bounds = [(0, 1)] * (n_actions * num_outcomes) + [(0, None)] * n_actions
    initial_params = np.concatenate([p0.flatten(), initial_costs])
    
    res = minimize(objective, initial_params, method='SLSQP', bounds=bounds, constraints=constraints, tol=1e-6, options={'maxiter': 5000})
    
    if res.success:
        optimized_params = res.x
        p_opt = optimized_params[:n_actions * num_outcomes].reshape(n_actions, num_outcomes)
        c_opt = optimized_params[n_actions * num_outcomes: n_actions * num_outcomes + n_actions]
    else:
        p_opt, c_opt = p0, initial_costs
    
    valid_rows = []
    for i in range(n_actions):
        if np.all(p_opt[i] >= 0) and abs(np.sum(p_opt[i]) - 1) < 1e-6 and c_opt[i] >= 0:
            valid_rows.append(np.hstack([p_opt[i], c_opt[i]]))
    
    if not valid_rows:
        default_p = np.ones(num_outcomes) / num_outcomes
        default_c = 0.0
        return np.hstack([default_p.reshape(1, -1), np.array([[default_c]])])
    
    return np.array(valid_rows)
```
