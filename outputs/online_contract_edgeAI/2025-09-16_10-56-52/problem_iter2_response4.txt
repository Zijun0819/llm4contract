```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    n_accepted = len(accepted_logs)
    n_rejected = len(rejected_logs)
    
    def solve_p(w, u):
        try:
            A_eq = np.vstack([np.ones(m_outcomes), v - w])
            b_eq = np.array([1.0, u])
            res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m_outcomes, method='highs')
            return res.x if res.success else None
        except:
            return None

    inferred_ps = []
    for log in accepted_logs:
        w_arr = np.array(log['Contract'])
        p_candidate = solve_p(w_arr, log['Principal Utility'])
        if p_candidate is not None and np.allclose(np.sum(p_candidate), 1.0) and np.all(p_candidate >= 0):
            inferred_ps.append(p_candidate)
    
    if len(inferred_ps) == 0:
        inferred_ps = [np.ones(m_outcomes) / m_outcomes]
    
    inferred_ps = np.array(inferred_ps)
    
    if n_accepted > 0:
        n_components = min(20, max(2, len(inferred_ps) // 5))
        gmm = GaussianMixture(n_components=n_components, random_state=0, n_init=10, max_iter=100).fit(inferred_ps)
        p_centers = gmm.means_
        actions_assigned = gmm.predict(inferred_ps)
    else:
        p_centers = np.ones((1, m_outcomes)) / m_outcomes
        actions_assigned = np.zeros(len(inferred_ps), dtype=int)
    
    n_actions = p_centers.shape[0]
    c_ir = np.zeros(n_actions)
    
    for a in range(n_actions):
        action_indices = np.where(actions_assigned == a)[0]
        if len(action_indices) > 0:
            min_wages = np.min([np.array(accepted_logs[i]['Contract']) for i in action_indices], axis=0)
            c_ir[a] = np.dot(p_centers[a], min_wages)
        else:
            c_ir[a] = 0.0
    
    if n_rejected > 0:
        rejected_w = np.array([log['Contract'] for log in rejected_logs]).T
        rejected_utilities = p_centers @ rejected_w
        max_rejected_utility = np.max(rejected_utilities, axis=1)
        c_final = np.maximum(c_ir, max_rejected_utility)
    else:
        c_final = c_ir
    
    agent_setting = np.hstack([p_centers, c_final.reshape(-1, 1)])
    return agent_setting
```
