```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = v.shape[0]
    L = len(content)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    n_accepted = len(accepted_logs)
    if n_accepted == 0:
        return np.hstack([np.ones((1, m_outcomes)), np.zeros((1, 1))])
    
    n_candidates = min(n_accepted, max(2, int(np.sqrt(n_accepted))))
    all_p = []
    for log in accepted_logs:
        w_i = np.array(log['Contract'])
        u_i = log['Principal Utility']
        res = linprog(w_i, A_eq=[np.ones(m_outcomes), v - w_i], b_eq=[1.0, u_i], bounds=[(0, 1)] * m_outcomes, method='highs')
        if res.success:
            all_p.append(res.x)
    
    if not all_p:
        kmeans = KMeans(n_clusters=1, random_state=0, n_init=10).fit(np.array([accepted_logs[0]['Contract']]))
        p0 = np.clip(kmeans.cluster_centers_, 0, 1)
        p0 = p0 / p0.sum(axis=1, keepdims=True)
    else:
        all_p = np.array(all_p)
        gmm = GaussianMixture(n_components=n_candidates, random_state=0).fit(all_p)
        p0 = gmm.means_
        p0 = np.clip(p0, 0, 1)
        p0 = p0 / p0.sum(axis=1, keepdims=True)
    
    assigns = np.full(L, -1)
    for i, log in enumerate(content):
        if log['Agent Action'] == 1:
            w = np.array(log['Contract'])
            eu = p0 @ w
            assigns[i] = int(np.argmax(eu))
    
    c_ir = np.zeros(n_candidates)
    for a in range(n_candidates):
        idx = np.where(assigns == a)[0]
        if idx.size > 0:
            wages = np.array([content[i]['Contract'] for i in idx]).T
            c_ir[a] = (p0[a] @ wages).min()
        else:
            c_ir[a] = 0.0
    
    rej_idx = [i for i, log in enumerate(content) if log['Agent Action'] == -1]
    rej_wages = []
    for i in rej_idx:
        rej_wages.append(np.array(content[i]['Contract']))
    if rej_wages:
        rej_wages = np.array(rej_wages).T
        max_eu_rej = (p0 @ rej_wages).max(axis=1)
    else:
        max_eu_rej = np.full(n_candidates, -np.inf)
    
    c_final = np.maximum(c_ir, max_eu_rej)
    
    mask = ~np.any(np.isnan(p0), axis=1)
    p0_valid = p0[mask]
    c_valid = c_final[mask]
    if p0_valid.size == 0:
        p0_valid = np.zeros((1, m_outcomes))
        c_valid = np.zeros(1)
    else:
        distinct_mask = np.ones(len(p0_valid), dtype=bool)
        for i in range(len(p0_valid)):
            for j in range(i+1, len(p0_valid)):
                if np.allclose(p0_valid[i], p0_valid[j]):
                    distinct_mask[j] = False
        p0_valid = p0_valid[distinct_mask]
        c_valid = c_valid[distinct_mask]
    
    agent_setting = np.hstack([p0_valid, c_valid[:, np.newaxis]])
    return agent_setting
```
