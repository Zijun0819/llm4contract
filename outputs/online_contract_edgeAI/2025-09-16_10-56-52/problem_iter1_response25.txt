```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances_argmin_min

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_actions = 8
    m_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    def solve_p_dist(wage, principal_utility):
        c = wage
        A_eq = [np.ones(m_outcomes), v - wage]
        b_eq = [1, principal_utility]
        bounds = [(0, None)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None
    
    inferred_ps = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_p = log['Principal Utility']
        p_candidate = solve_p_dist(w, u_p)
        if p_candidate is not None:
            inferred_ps.append(p_candidate)
    
    if not inferred_ps:
        raise ValueError("Cannot infer from data: no valid accepted contracts.")
    
    inferred_ps = np.array(inferred_ps)
    kmeans = KMeans(n_clusters=n_actions, random_state=42, n_init=20).fit(inferred_ps)
    cluster_centers = kmeans.cluster_centers_
    
    assigned_actions = []
    for log in accepted_logs:
        dists = np.sum((cluster_centers - np.array(log['Contract']))**2, axis=1)
        assigned_actions.append(np.argmin(dists))
    
    costs = np.zeros(n_actions)
    for a in range(n_actions):
        indices = [i for i, act in enumerate(assigned_actions) if act == a]
        if indices:
            contracts = [np.array(accepted_logs[i]['Contract']) for i in indices]
            min_pay = np.min(contracts, axis=0)
            costs[a] = np.dot(cluster_centers[a], min_pay)
        else:
            costs[a] = 0.0
    
    if rejected_logs:
        reject_wages = np.array([log['Contract'] for log in rejected_logs])
        max_reject_utils = np.max(cluster_centers @ reject_wages.T, axis=1)
        costs = np.maximum(costs, max_reject_utils)
    
    for a in range(n_actions):
        if costs[a] < 0:
            costs[a] = 0.0
    
    agent_setting = np.hstack([cluster_centers, costs.reshape(-1, 1)])
    return agent_setting
```
