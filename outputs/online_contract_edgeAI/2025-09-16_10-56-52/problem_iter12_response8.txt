```python
import numpy as np
from scipy.optimize import linprog, minimize
from sklearn.mixture import GaussianMixture
import warnings

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    warnings.filterwarnings('ignore')
    
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs and not rejected_logs:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    def solve_p(w, u_target):
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        res = linprog(-np.ones(n_outcomes), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs-ds', options={'tol': 1e-12})
        return res.x if res.success else None

    candidate_ps = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_target = log['Principal Utility']
        p = solve_p(w, u_target)
        if p is not None and np.all(p >= -1e-10) and np.isclose(p.sum(), 1.0, atol=1e-10):
            candidate_ps.append(p)
    
    if not candidate_ps:
        candidate_ps = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_ps)
    if len(X) > 0:
        n_samples = len(X)
        max_components = min(25, n_samples)
        bics = []
        gmm_models = []
        
        if rejected_logs:
            rej_weights = np.full(len(rejected_logs), 5.0)
            weights = np.concatenate([np.ones(n_samples), rej_weights])
            X_extended = np.vstack([X, np.array([log['Contract'] for log in rejected_logs])])
        else:
            weights = np.ones(n_samples)
            X_extended = X
        
        for n in range(1, max_components + 1):
            gmm = GaussianMixture(n_components=n, random_state=42, n_init=40, max_iter=1000, tol=1e-10)
            gmm.fit(X_extended, sample_weight=weights)
            bics.append(gmm.bic(X_extended))
            gmm_models.append(gmm)
        
        best_idx = np.argmin(bics)
        best_gmm = gmm_models[best_idx]
        p0 = best_gmm.means_
        labels = best_gmm.predict(X_extended[:n_samples])
    else:
        p0 = X
        labels = np.zeros(len(X), dtype=int)
    
    n_actions = len(p0)
    utility_thresholds = np.full(n_actions, np.inf)
    for i, log in enumerate(accepted_logs):
        w = np.array(log['Contract'])
        if i < len(labels):
            a_label = labels[i]
        else:
            dists = np.array([np.linalg.norm(p - w) for p in p0])
            a_label = np.argmin(dists)
        u = np.dot(p0[a_label], w)
        if u < utility_thresholds[a_label]:
            utility_thresholds[a_label] = u
    
    rej_thresholds = np.full(n_actions, -np.inf)
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u = np.dot(p0[a], w)
            if u > rej_thresholds[a]:
                rej_thresholds[a] = u
    
    costs_init = np.maximum(utility_thresholds, rej_thresholds + 1e-12)
    costs_init = np.clip(costs_init, 0, None)
    
    def objective(params):
        p_flat = params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c = params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
        penalty = 0.0
        ir_ic_weight = 10000.0
        
        for log in content:
            w = np.array(log['Contract'])
            u_vals = np.array([np.dot(p, w) - cost_val for p, cost_val in zip(p_flat, c)])
            max_u = np.max(u_vals)
            
            if log['Agent Action'] == 1:
                if max_u < -1e-10:
                    penalty += ir_ic_weight * max_u ** 2
                best_a = np.argmax(u_vals)
                principal_util = np.dot(p_flat[best_a], v - w)
                penalty += (principal_util - log['Principal Utility']) ** 2
            else:
                if max_u >= -1e-10:
                    penalty += ir_ic_weight * max_u ** 2
        
        for i in range(n_actions):
            p_sum = np.sum(p_flat[i])
            if not np.isclose(p_sum, 1.0, atol=1e-10):
                penalty += ir_ic_weight * (p_sum - 1.0) ** 2
            penalty += ir_ic_weight * np.sum(np.clip(-p_flat[i], 0, None) ** 2)
            if c[i] < -1e-10:
                penalty += ir_ic_weight * c[i] ** 2
        
        return penalty
    
    constraints = [
        {'type': 'eq', 'fun': lambda x, idx=i: np.sum(x[idx*n_outcomes:(idx+1)*n_outcomes]) - 1.0}
        for i in range(n_actions)
    ]
    
    bounds = [(0, 1)] * (n_actions * n_outcomes) + [(0, None)] * n_actions
    initial_params = np.concatenate([p0.flatten(), costs_init])
    
    res = minimize(
        objective, 
        initial_params, 
        method='trust-constr', 
        bounds=bounds, 
        constraints=constraints, 
        tol=1e-12, 
        options={'maxiter': 50000, 'verbose': 0, 'gtol': 1e-12}
    )
    
    optimized_params = res.x
    p_opt = optimized_params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
    c_opt = optimized_params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
    
    valid_indices = []
    for i in range(n_actions):
        if np.all(p_opt[i] >= -1e-10) and np.isclose(np.sum(p_opt[i]), 1.0, atol=1e-10) and c_opt[i] >= -1e-10:
            valid_indices.append(i)
    
    if not valid_indices:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    p_opt = p_opt[valid_indices]
    c_opt = c_opt[valid_indices]
    
    return np.hstack([p_opt, c_opt.reshape(-1, 1)])
```
