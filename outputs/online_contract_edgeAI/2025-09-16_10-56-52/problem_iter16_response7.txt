```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans
import warnings

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    warnings.filterwarnings('ignore')
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not content:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    def infer_p_from_contract(w, u_target):
        c = -w
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_target])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs', options={'tol': 1e-12})
        if res.success:
            p = res.x
            if np.all(p >= -1e-12) and abs(np.sum(p) - 1) < 1e-12:
                return np.clip(p, 0, 1)
        return None

    candidate_ps = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_target = log['Principal Utility']
        p = infer_p_from_contract(w, u_target)
        if p is not None:
            candidate_ps.append(p)
    
    if not candidate_ps:
        candidate_ps = [np.ones(n_outcomes) / n_outcomes]
    
    X = np.array(candidate_ps)
    if len(X) > 1:
        max_components = min(30, len(X))
        n_components_range = range(1, max_components + 1)
        bics = []
        gmm_models = []
        for n in n_components_range:
            gmm = GaussianMixture(n_components=n, random_state=42, n_init=50, max_iter=1000, tol=1e-10)
            gmm.fit(X)
            bics.append(gmm.bic(X))
            gmm_models.append(gmm)
        best_idx = np.argmin(bics)
        best_gmm = gmm_models[best_idx]
        p0 = best_gmm.means_
        labels = best_gmm.predict(X)
    else:
        p0 = X
        labels = np.zeros(len(X), dtype=int)
    
    n_actions = len(p0)
    
    utility_thresholds = np.full(n_actions, np.inf)
    for i, log in enumerate(accepted_logs):
        w = np.array(log['Contract'])
        if i < len(labels):
            a_label = labels[i]
        else:
            dists = np.array([np.linalg.norm(p - w) for p in p0])
            a_label = np.argmin(dists)
        u = np.dot(p0[a_label], w)
        if u < utility_thresholds[a_label]:
            utility_thresholds[a_label] = u
    
    rej_thresholds = np.full(n_actions, -np.inf)
    for log in rejected_logs:
        w = np.array(log['Contract'])
        for a in range(n_actions):
            u = np.dot(p0[a], w)
            if u > rej_thresholds[a]:
                rej_thresholds[a] = u
    
    costs_init = np.zeros(n_actions)
    for a in range(n_actions):
        if np.isfinite(utility_thresholds[a]):
            lower_bound = utility_thresholds[a]
        else:
            lower_bound = 0.0
        if np.isfinite(rej_thresholds[a]):
            upper_bound = rej_thresholds[a]
        else:
            upper_bound = np.inf
        if upper_bound < lower_bound - 1e-12:
            costs_init[a] = lower_bound
        else:
            costs_init[a] = max(0.0, (lower_bound + upper_bound) / 2)
    
    def objective(params):
        p_flat = params[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
        c = params[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
        penalty = 0.0
        ir_ic_weight = 10000.0
        data_fit_weight = 1.0
        
        for log in content:
            w = np.array(log['Contract'])
            agent_utils = np.array([np.dot(p, w) - cost_val for p, cost_val in zip(p_flat, c)])
            max_agent_util = np.max(agent_utils)
            
            if log['Agent Action'] == 1:
                if max_agent_util < -1e-12:
                    penalty += ir_ic_weight * (max_agent_util ** 2)
                best_action = np.argmax(agent_utils)
                principal_util_actual = np.dot(p_flat[best_action], v - w)
                penalty += data_fit_weight * (principal_util_actual - log['Principal Utility']) ** 2
            else:
                if max_agent_util >= -1e-12:
                    penalty += ir_ic_weight * (max_agent_util ** 2)
        
        for i in range(n_actions):
            p_sum = np.sum(p_flat[i])
            if abs(p_sum - 1.0) > 1e-12:
                penalty += ir_ic_weight * (p_sum - 1.0) ** 2
            neg_penalty = np.sum(np.clip(-p_flat[i], 0, None) ** 2)
            penalty += ir_ic_weight * neg_penalty
            if c[i] < 0:
                penalty += ir_ic_weight * (c[i] ** 2)
        
        return penalty
    
    constraints = [
        {'type': 'eq', 'fun': lambda x, i=i: np.sum(x[i*n_outcomes:(i+1)*n_outcomes]) - 1.0}
        for i in range(n_actions)
    ]
    
    bounds = [(0, 1)] * (n_actions * n_outcomes) + [(0, None)] * n_actions
    x0 = np.concatenate([p0.flatten(), costs_init])
    
    res = minimize(
        objective, 
        x0, 
        method='trust-constr', 
        bounds=bounds, 
        constraints=constraints, 
        options={'maxiter': 50000, 'verbose': 0, 'gtol': 1e-12, 'xtol': 1e-12}
    )
    
    x_opt = res.x
    p_opt = x_opt[:n_actions * n_outcomes].reshape(n_actions, n_outcomes)
    c_opt = x_opt[n_actions * n_outcomes: n_actions * n_outcomes + n_actions]
    
    valid_rows = []
    for i in range(n_actions):
        if np.all(p_opt[i] >= -1e-12) and np.isclose(np.sum(p_opt[i]), 1.0, atol=1e-12) and c_opt[i] >= -1e-12:
            valid_rows.append(i)
    
    if not valid_rows:
        uniform_p = np.ones(n_outcomes) / n_outcomes
        return np.hstack([uniform_p.reshape(1, -1), np.array([[0.0]])])
    
    p_final = p_opt[valid_rows]
    c_final = c_opt[valid_rows]
    
    return np.hstack([p_final, c_final.reshape(-1, 1)])
```
