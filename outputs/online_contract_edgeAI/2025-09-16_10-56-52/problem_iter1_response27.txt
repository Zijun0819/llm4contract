```python
import numpy as np
import pandas as pd
from collections import defaultdict
from sklearn.cluster import KMeans
from scipy.optimize import linprog, minimize, Bounds

def agent_solver(v, content):
    n_candidates = 15
    m_outcomes = v.shape[0]
    logs = content
    accepted_logs = [log for log in logs if log['Agent Action'] == 1]
    rejected_logs = [log for log in logs if log['Agent Action'] == -1]
    
    if not accepted_logs:
        default_action = np.hstack([np.ones(m_outcomes) / m_outcomes, 0.0])
        return default_action.reshape(1, -1)
    
    def estimate_p_strategies():
        def expected_utility(p, w): return np.dot(p, w)
        
        p_candidates = []
        for log in accepted_logs:
            w_i = np.array(log['Contract'])
            u_i = log['Principal Utility']
            if u_i > 0:
                p_i = w_i / (w_i.sum() + 1e-10)
                p_candidates.append(p_i)
            else:
                uniform_p = np.ones(m_outcomes) / m_outcomes
                p_candidates.append(uniform_p)
        
        all_p = np.array(p_candidates)
        kmeans = KMeans(n_clusters=min(n_candidates, len(accepted_logs)), random_state=0, n_init=10).fit(all_p)
        return kmeans.cluster_centers_
    
    def infer_costs(p_centers):
        cost_estimates = np.zeros(len(p_centers))
        for a, p_a in enumerate(p_centers):
            best_reward = -np.inf
            for log in accepted_logs:
                if log['Agent Action'] == 1:
                    w = np.array(log['Contract'])
                    util = np.dot(p_a, w)
                    if util > best_reward:
                        best_reward = util
            
            min_c_valid = best_reward if best_reward > -np.inf else 0.0
            
            rej_threshold = np.inf
            for log in rejected_logs:
                w_rej = np.array(log['Contract'])
                util_rej = np.dot(p_a, w_rej)
                if util_rej < rej_threshold:
                    rej_threshold = util_rej
            
            if np.isfinite(rej_threshold):
                cost_estimates[a] = max(min_c_valid, rej_threshold)
            else:
                cost_estimates[a] = min_c_valid
        
        return cost_estimates
    
    p_center_list = estimate_p_strategies()
    costs = infer_costs(p_center_list)
    
    return np.hstack([p_center_list, costs.reshape(-1, 1)])
```
