```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.array(v)
    m = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    def solve_lp(w, u_principal):
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        if res.success:
            p = res.x
            p = np.maximum(p, 0)
            p_sum = p.sum()
            if p_sum > 0:
                return p / p_sum
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        contract = np.array(log['Contract'])
        u_principal = log['Principal Utility']
        p_candidate = solve_lp(contract, u_principal)
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    all_p = np.array(ps_candidates)
    n_clusters = min(20, len(all_p))
    
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    cluster_centers = np.maximum(kmeans.cluster_centers_, 0)
    cluster_centers = cluster_centers / cluster_centers.sum(axis=1, keepdims=True)
    
    action_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_mask = (kmeans.labels_ == i)
        if np.any(cluster_mask):
            indices = np.where(cluster_mask)[0]
            contracts = np.array([accepted_logs[j]['Contract'] for j in indices])
            utilities = np.dot(contracts, cluster_centers[i])
            action_costs[i] = np.min(utilities) if utilities.size > 0 else 0.0
    
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = np.dot(rejected_contracts, cluster_centers.T)
        max_rejected = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected + 1e-8)
    
    action_costs = np.maximum(action_costs, 0)
    
    return np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
```
