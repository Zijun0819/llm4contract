```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances

def agent_solver(v, content):
    v = np.array(v)
    m = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    def solve_lp(w, u_principal):
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        return res.x if res.success else None
    
    ps_candidates = []
    for log in accepted_logs:
        contract = np.array(log['Contract'])
        p_candidate = solve_lp(contract, log['Principal Utility'])
        if p_candidate is not None and np.all(p_candidate >= 0):
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    all_p = np.array(ps_candidates)
    n_clusters = min(50, len(all_p))
    
    gmm = GaussianMixture(n_components=n_clusters, random_state=42)
    gmm.fit(all_p)
    gmm_centers = gmm.means_
    gmm_centers = np.maximum(gmm_centers, 0)
    gmm_centers /= gmm_centers.sum(axis=1, keepdims=True)
    
    action_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_probs = gmm.predict_proba(all_p)[:, i]
        member_indices = np.where(cluster_probs > 0.5)[0]
        if member_indices.size > 0:
            contracts = np.array([accepted_logs[j]['Contract'] for j in member_indices])
            utilities = np.dot(contracts, gmm_centers[i])
            action_costs[i] = np.min(utilities) - 1e-8
    
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = np.dot(rejected_contracts, gmm_centers.T)
        max_rejected = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected + 1e-8)
    
    action_costs = np.maximum(action_costs, 0)
    
    distances = pairwise_distances(gmm_centers)
    np.fill_diagonal(distances, np.inf)
    min_distances = np.min(distances, axis=1)
    merge_threshold = 0.01
    
    to_merge = np.where(min_distances < merge_threshold)[0]
    unique_clusters = list(range(n_clusters))
    for i in to_merge:
        j = np.argmin(distances[i])
        if i < j and j in unique_clusters:
            unique_clusters.remove(j)
            gmm_centers[i] = (gmm_centers[i] + gmm_centers[j]) / 2
            action_costs[i] = min(action_costs[i], action_costs[j])
    
    final_centers = gmm_centers[unique_clusters]
    final_costs = action_costs[unique_clusters]
    
    final_centers = np.maximum(final_centers, 0)
    final_centers /= final_centers.sum(axis=1, keepdims=True)
    
    return np.hstack([final_centers, final_costs.reshape(-1, 1)])
```
