```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import normalize

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.array(v)
    m = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    def solve_mini_lp(w, u_principal):
        w_arr = np.array(w)
        A_eq = np.vstack([np.ones(m), v - w_arr])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w_arr, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs', options={'tol': 1e-12})
        if res.success:
            p = res.x
            p = np.maximum(p, 0)
            p_sum = p.sum()
            if p_sum > 0:
                p /= p_sum
                return p
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(log['Contract'], log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    all_p = np.array(ps_candidates)
    
    n_components = max(2, min(30, len(all_p) // 10))
    gmm = GaussianMixture(n_components=n_components, random_state=42, tol=1e-10)
    gmm.fit(all_p)
    centers = gmm.means_
    centers = np.maximum(centers, 0)
    centers = normalize(centers, norm='l1', axis=1)
    assignments = gmm.predict(all_p)
    
    costs = np.zeros(n_components)
    epsilon = 1e-12
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    for i in range(n_components):
        member_indices = np.where(assignments == i)[0]
        if member_indices.size > 0:
            utilities = accepted_contracts[member_indices] @ centers[i]
            costs[i] = np.min(utilities) - epsilon
    
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_contracts @ centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        costs = np.maximum(costs, max_rejected_utilities + epsilon)
    
    costs = np.maximum(costs, 0)
    
    unique_centers, unique_indices = np.unique(centers, axis=0, return_index=True)
    unique_costs = costs[unique_indices]
    
    for i, center in enumerate(unique_centers):
        for log in accepted_logs:
            w = np.array(log['Contract'])
            if w @ center - unique_costs[i] < -1e-10:
                unique_costs[i] = max(unique_costs[i], w @ center + 1e-12)
        for log in rejected_logs:
            w = np.array(log['Contract'])
            if w @ center - unique_costs[i] >= -1e-10:
                unique_costs[i] = max(unique_costs[i], w @ center + 1e-12)
    
    unique_costs = np.maximum(unique_costs, 0)
    
    valid_mask = np.ones(len(unique_centers), dtype=bool)
    for i, (center, cost) in enumerate(zip(unique_centers, unique_costs)):
        for log in accepted_logs:
            w = np.array(log['Contract'])
            if w @ center - cost < -1e-10:
                valid_mask[i] = False
                break
        if valid_mask[i]:
            for log in rejected_logs:
                w = np.array(log['Contract'])
                if w @ center - cost >= -1e-10:
                    valid_mask[i] = False
                    break
    
    valid_centers = unique_centers[valid_mask]
    valid_costs = unique_costs[valid_mask]
    
    if len(valid_centers) == 0:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    agent_setting = np.hstack([valid_centers, valid_costs.reshape(-1, 1)])
    return agent_setting
```
