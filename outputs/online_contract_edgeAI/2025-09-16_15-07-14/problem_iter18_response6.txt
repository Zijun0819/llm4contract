```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import normalize

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        if res.success:
            p = res.x
            p = np.maximum(p, 0)
            p_sum = np.sum(p)
            if p_sum > 0:
                p /= p_sum
            return p
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    all_p = normalize(all_p, norm='l1', axis=1)
    
    n_components = min(10, max(2, len(all_p) // 10))
    gmm = GaussianMixture(n_components=n_components, random_state=42, covariance_type='diag')
    gmm.fit(all_p)
    gmm_centers = gmm.means_
    gmm_centers = np.maximum(gmm_centers, 0)
    gmm_centers = normalize(gmm_centers, norm='l1', axis=1)
    
    action_costs = np.zeros(n_components)
    epsilon = 1e-8
    gmm_assignments = gmm.predict(all_p)
    for i in range(n_components):
        cluster_member_indices = np.where(gmm_assignments == i)[0]
        if cluster_member_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_member_indices])
            utilities = np.sum(wages * gmm_centers[i], axis=1)
            action_costs[i] = np.min(utilities) - epsilon
        else:
            action_costs[i] = 0.0
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ gmm_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected_utilities + epsilon)
    
    action_costs = np.maximum(action_costs, 0)
    
    for i in range(n_components):
        for log in accepted_logs:
            w = np.array(log['Contract'])
            utility_i = w @ gmm_centers[i] - action_costs[i]
            max_utility = np.max(w @ gmm_centers.T - action_costs)
            if utility_i < -epsilon and max_utility >= -epsilon:
                action_costs[i] = w @ gmm_centers[i] - max_utility + epsilon
            elif utility_i < max_utility - epsilon:
                action_costs[i] = w @ gmm_centers[i] - max_utility + epsilon
    
    for log in rejected_logs:
        w = np.array(log['Contract'])
        max_utility = np.max(w @ gmm_centers.T - action_costs)
        if max_utility > -epsilon:
            worst_idx = np.argmax(w @ gmm_centers.T - action_costs)
            action_costs[worst_idx] = w @ gmm_centers[worst_idx] + epsilon
    
    distances = np.linalg.norm(gmm_centers[:, None, :] - gmm_centers[None, :, :], axis=2)
    np.fill_diagonal(distances, np.inf)
    merge_threshold = 0.01
    merged_indices = set()
    new_centers = []
    new_costs = []
    
    for i in range(n_components):
        if i in merged_indices:
            continue
        merge_group = [i]
        for j in range(i+1, n_components):
            if distances[i, j] < merge_threshold and j not in merged_indices:
                merge_group.append(j)
                merged_indices.add(j)
        merged_center = np.mean(gmm_centers[merge_group], axis=0)
        merged_center = normalize(merged_center.reshape(1, -1), norm='l1')[0]
        merged_cost = np.min(action_costs[merge_group])
        new_centers.append(merged_center)
        new_costs.append(merged_cost)
    
    if new_centers:
        final_centers = np.array(new_centers)
        final_costs = np.array(new_costs)
    else:
        final_centers = gmm_centers
        final_costs = action_costs
    
    agent_setting = np.hstack([final_centers, final_costs.reshape(-1, 1)])
    return agent_setting
```
