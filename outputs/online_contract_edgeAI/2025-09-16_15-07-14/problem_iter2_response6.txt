```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from scipy.optimize import minimize

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    def robust_mini_lp(w, u_principal, v):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u_principal])
        bounds = [(0, 1)] * m
        try:
            res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
            if res.success:
                return res.x
            else:
                result = minimize(lambda p: -np.dot(w, p),
                                 x0=np.ones(m)/m,
                                 constraints=[{'type': 'eq', 'fun': lambda p: np.sum(p) - 1},
                                              {'type': 'eq', 'fun': lambda p: np.dot(v - w, p) - u_principal}],
                                 bounds=bounds,
                                 method='SLSQP')
                if result.success:
                    return result.x
                else:
                    return None
        except:
            return None

    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = robust_mini_lp(np.array(log['Contract']), log['Principal Utility'], v)
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    n_clusters = min(30, len(all_p), len(v))
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    cluster_centers = kmeans.cluster_centers_
    
    action_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_indices = (kmeans.labels_ == i)
        if np.any(cluster_indices):
            wages = np.array([accepted_logs[j]['Contract'] for j in np.where(cluster_indices)[0]])
            utilities = np.sum(wages * cluster_centers[i].reshape(1, -1), axis=1)
            action_costs[i] = np.min(utilities) if utilities.size > 0 else 0.0
        else:
            action_costs[i] = 0.0
    
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs]).T
        rejected_utilities = cluster_centers @ rejected_wages
        max_rejected_utilities = np.max(rejected_utilities, axis=1)
        action_costs = np.maximum(action_costs, max_rejected_utilities)
    
    action_costs = np.maximum(action_costs, 0)
    
    agent_setting = np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
    return agent_setting
```
