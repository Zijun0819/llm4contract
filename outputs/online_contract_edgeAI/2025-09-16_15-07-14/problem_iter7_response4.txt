```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        return res.x if res.success else None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    n_samples = len(all_p)
    max_clusters = min(50, n_samples)
    
    if n_samples > 1:
        bic_scores = []
        n_components_range = range(1, min(max_clusters + 1, n_samples + 1))
        for n_components in n_components_range:
            gmm = GaussianMixture(n_components=n_components, random_state=42)
            gmm.fit(all_p)
            bic_scores.append(gmm.bic(all_p))
        best_n = n_components_range[np.argmin(bic_scores)]
        gmm = GaussianMixture(n_components=best_n, random_state=42)
        gmm.fit(all_p)
        cluster_centers = gmm.means_
    else:
        cluster_centers = all_p.reshape(1, -1)
    
    n_clusters = len(cluster_centers)
    cluster_assignments = cdist(all_p, cluster_centers).argmin(axis=1)
    
    action_costs = np.zeros(n_clusters)
    slack = 1e-6
    for i in range(n_clusters):
        cluster_indices = np.where(cluster_assignments == i)[0]
        if len(cluster_indices) > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = np.sum(wages * cluster_centers[i], axis=1)
            min_util = np.min(utilities)
            action_costs[i] = max(0, min_util - slack)
        else:
            action_costs[i] = 0.0
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ cluster_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected_utilities + slack)
    
    agent_setting = np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
    return agent_setting
```
