```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.metrics import pairwise_distances_argmin_min

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        n_actions = len(v)
        return np.hstack([np.eye(n_actions), np.zeros((n_actions, 1))])
    
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        return res.x if res.success else None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        n_actions = len(v)
        return np.hstack([np.eye(n_actions), np.zeros((n_actions, 1))])
    
    all_p = np.array(ps_candidates)
    
    n_clusters = min(50, len(all_p), 12)
    
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    kmeans_centers = kmeans.cluster_centers_
    kmeans_assignments = kmeans.labels_
    
    gmm = GaussianMixture(n_components=n_clusters, random_state=42).fit(all_p)
    gmm_centers = gmm.means_
    gmm_assignments = gmm.predict(all_p)
    
    combined_centers = np.vstack([kmeans_centers, gmm_centers])
    combined_assignments = np.hstack([kmeans_assignments, gmm_assignments + n_clusters])
    
    unique_centers, inverse = np.unique(combined_centers, axis=0, return_inverse=True)
    unique_costs = np.zeros(len(unique_centers))
    
    for i in range(len(unique_centers)):
        member_indices = np.where(inverse == i)[0]
        if member_indices.size > 0:
            original_indices = [j % len(all_p) for j in member_indices if j < len(all_p)]
            if len(original_indices) > 0:
                wages = np.array([accepted_logs[j]['Contract'] for j in original_indices])
                utilities = np.sum(wages * unique_centers[i], axis=1)
                unique_costs[i] = np.min(utilities) - 1e-10
            else:
                unique_costs[i] = 0.0
        else:
            unique_costs[i] = 0.0
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ unique_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        unique_costs = np.maximum(unique_costs, max_rejected_utilities + 1e-10)
    
    unique_costs = np.maximum(unique_costs, 0.0)
    
    final_centers = unique_centers
    final_costs = unique_costs
    
    if len(final_centers) > n_clusters:
        final_kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(final_centers)
        final_centers = final_kmeans.cluster_centers_
        final_costs = np.zeros(n_clusters)
        for i in range(n_clusters):
            member_indices = np.where(final_kmeans.labels_ == i)[0]
            if member_indices.size > 0:
                final_costs[i] = np.min(unique_costs[member_indices])
            else:
                final_costs[i] = 0.0
    
    agent_setting = np.hstack([final_centers, final_costs.reshape(-1, 1)])
    return agent_setting
```
