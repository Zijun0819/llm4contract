```python
import numpy as np
from sklearn.cluster import KMeans
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        if res.success:
            p = res.x
            p[p < 0] = 0
            p_sum = np.sum(p)
            if p_sum > 0:
                p /= p_sum
            return p
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    
    n_clusters = min(20, max(3, len(all_p) // 5))
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    cluster_centers = kmeans.cluster_centers_
    cluster_centers = np.clip(cluster_centers, 0, 1)
    sums = np.sum(cluster_centers, axis=1, keepdims=True)
    sums[sums == 0] = 1
    cluster_centers = cluster_centers / sums
    
    action_costs = np.zeros(n_clusters)
    epsilon = 1e-8
    for i in range(n_clusters):
        cluster_member_indices = np.where(kmeans.labels_ == i)[0]
        if cluster_member_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_member_indices])
            utilities = np.sum(wages * cluster_centers[i], axis=1)
            action_costs[i] = np.min(utilities) - epsilon
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ cluster_centers.T - action_costs
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected_utilities + epsilon)
    
    action_costs = np.maximum(action_costs, 0)
    
    unique_centers, unique_indices = np.unique(cluster_centers, axis=0, return_index=True)
    unique_costs = action_costs[unique_indices]
    
    if len(unique_centers) > 1:
        gmm = GaussianMixture(n_components=min(10, len(unique_centers)), random_state=42)
        gmm.fit(unique_centers)
        gmm_centers = gmm.means_
        gmm_centers = np.clip(gmm_centers, 0, 1)
        sums_gmm = np.sum(gmm_centers, axis=1, keepdims=True)
        sums_gmm[sums_gmm == 0] = 1
        gmm_centers = gmm_centers / sums_gmm
        
        refined_costs = np.zeros(gmm_centers.shape[0])
        gmm_assignments = gmm.predict(unique_centers)
        for i in range(gmm_centers.shape[0]):
            member_indices = np.where(gmm_assignments == i)[0]
            if member_indices.size > 0:
                refined_costs[i] = np.min(unique_costs[member_indices]) - epsilon
        
        if rejected_logs:
            rejected_utilities_gmm = rejected_wages @ gmm_centers.T - refined_costs
            max_rejected_utilities_gmm = np.max(rejected_utilities_gmm, axis=0)
            refined_costs = np.maximum(refined_costs, max_rejected_utilities_gmm + epsilon)
        
        refined_costs = np.maximum(refined_costs, 0)
        agent_setting = np.hstack([gmm_centers, refined_costs.reshape(-1, 1)])
    else:
        agent_setting = np.hstack([unique_centers, unique_costs.reshape(-1, 1)])
    
    return agent_setting
```
