```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
import warnings
warnings.filterwarnings('ignore', message='Solving environment with ipopt')

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u_principal])
        try:
            res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
            if res.success:
                return res.x
        except:
            pass
        return None

    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    n_components = min(50, len(all_p))
    gmm = GaussianMixture(n_components=n_components, random_state=42, n_init=3)
    gmm.fit(all_p)
    cluster_centers = gmm.means_
    cluster_probs = gmm.predict_proba(all_p)
    
    action_costs = np.zeros(n_components)
    for i in range(n_components):
        cluster_weights = cluster_probs[:, i]
        relevant_indices = np.where(cluster_weights > 0.1)[0]
        if len(relevant_indices) > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in relevant_indices])
            utilities = np.sum(wages * cluster_centers[i], axis=1)
            action_costs[i] = np.min(utilities) if utilities.size > 0 else 0.0
        else:
            action_costs[i] = 0.0
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs]).T
        rejected_utilities = cluster_centers @ rejected_wages
        max_rejected_per_cluster = np.max(rejected_utilities, axis=1)
        for i in range(n_components):
            if max_rejected_per_cluster[i] > action_costs[i]:
                action_costs[i] = max_rejected_per_cluster[i]
    
    action_costs = np.maximum(action_costs, 0)
    
    agent_setting = np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
    return agent_setting
```
