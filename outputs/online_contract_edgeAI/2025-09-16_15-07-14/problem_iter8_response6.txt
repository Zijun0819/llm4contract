```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    n_outcomes = len(v)
    
    if not accepted_logs:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    def solve_mini_lp(w, u_principal):
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * n_outcomes, method='highs')
        return res.x if res.success else None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    all_p = np.array(ps_candidates)
    n_clusters = min(50, max(2, len(all_p) // 5))
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    cluster_centers = kmeans.cluster_centers_
    cluster_centers = np.clip(cluster_centers, 0, None)
    cluster_centers = cluster_centers / cluster_centers.sum(axis=1, keepdims=True)
    cluster_assignments = kmeans.labels_
    
    action_costs = np.full(n_clusters, -np.inf)
    wages_accepted = np.array([log['Contract'] for log in accepted_logs])
    for i in range(n_clusters):
        cluster_mask = (cluster_assignments == i)
        if np.any(cluster_mask):
            cluster_wages = wages_accepted[cluster_mask]
            utilities = cluster_wages @ cluster_centers[i]
            min_utility = np.min(utilities)
            action_costs[i] = min_utility - 1e-8
    
    action_costs = np.maximum(action_costs, 0)
    
    if rejected_logs:
        wages_rejected = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = wages_rejected @ cluster_centers.T
        max_rejected_utility = np.max(rejected_utilities, axis=0)
        feasible_mask = (action_costs <= max_rejected_utility)
        action_costs[feasible_mask] = max_rejected_utility[feasible_mask] + 1e-8
    
    return np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
```
