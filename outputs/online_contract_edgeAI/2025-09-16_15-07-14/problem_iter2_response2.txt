```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.neighbors import KDTree

def agent_solver(v, content):
    v = np.array(v)
    m = len(v)
    L = len(content)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    def estimate_p(w, u):
        try:
            A_eq = np.vstack([np.ones(m), v - w])
            b_eq = np.array([1.0, u])
            res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
            return res.x if res.success else None
        except:
            return None
    
    candidate_ps = []
    for log in accepted_logs:
        p_est = estimate_p(np.array(log['Contract']), log['Principal Utility'])
        if p_est is not None:
            candidate_ps.append(p_est)
    
    if not candidate_ps:
        p_default = np.ones((1, m)) / m
        c_default = np.zeros(1)
        return np.hstack([p_default, c_default.reshape(-1, 1)])
    
    candidate_ps = np.array(candidate_ps)
    n_actions = min(10, max(1, len(candidate_ps) // 5 + 1))
    
    kmeans = KMeans(n_clusters=n_actions, random_state=42, n_init=20).fit(candidate_ps)
    p_centers = kmeans.cluster_centers_
    p_centers = p_centers / p_centers.sum(axis=1, keepdims=True)
    
    assignments = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        utilities = p_centers @ w
        best_action = np.argmax(utilities)
        assignments.append(best_action)
    
    c_estimates = np.zeros(n_actions)
    for a in range(n_actions):
        action_indices = [i for i, act in enumerate(assignments) if act == a]
        if action_indices:
            action_wages = np.array([accepted_logs[i]['Contract'] for i in action_indices]).T
            min_utils = (p_centers[a] @ action_wages).min()
            c_estimates[a] = min_utils
        else:
            c_estimates[a] = 0.0
    
    c_final = c_estimates.copy()
    
    if rejected_logs:
        tree = KDTree(p_centers)
        for log in rejected_logs:
            w_rej = np.array(log['Contract'])
            p_approx = estimate_p(w_rej, 0)
            if p_approx is not None:
                _, idx = tree.query(p_approx.reshape(1, -1), k=1)
                c_final[idx[0]] = max(c_final[idx[0]], p_centers[idx[0]] @ w_rej)
    
    for a in range(n_actions):
        if c_final[a] < 0:
            c_final[a] = 0.0
    
    for log in content:
        w = np.array(log['Contract'])
        utils = p_centers @ w - c_final
        max_util = utils.max()
        if log['Agent Action'] == 1 and max_util < 0:
            action_idx = np.argmax(p_centers @ w)
            c_final[action_idx] = (p_centers[action_idx] @ w) - 1e-8
        elif log['Agent Action'] == -1 and max_util >= 0:
            action_idx = np.argmax(utils)
            c_final[action_idx] = (p_centers[action_idx] @ w) + 1e-8
    
    return np.hstack([p_centers, c_final.reshape(-1, 1)])
```
