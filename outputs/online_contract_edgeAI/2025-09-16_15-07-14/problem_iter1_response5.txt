```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from scipy.spatial.distance import cdist

def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
    m = len(w)
    A_eq = [np.ones(m), w - v] if u > 0 else [np.ones(m)]
    b_eq = [1.0, u] if u > 0 else [1.0]
    bounds = [(0, 1)] * m
    res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
    return res.x if res.success else None

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m_outcomes = v.shape[0]
    n_initial = 12
    clusters = []
    utility_tolerance = 1e-5
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        base_p = np.ones(m_outcomes) / m_outcomes
        c = np.max([p @ w for w in [log['Contract'] for log in rejected_logs]]) if rejected_logs else 0.0
        return np.hstack([base_p.reshape(1, -1), np.array([[c]])])
    
    all_p_candidates = []
    for log in accepted_logs:
        p_candidate = mini_lp_p(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            all_p_candidates.append(p_candidate)
    
    if not all_p_candidates:
        kmeans = KMeans(n_clusters=1, random_state=0, n_init=10).fit(np.array([log['Contract'] for log in accepted_logs]))
        base_p = kmeans.cluster_centers_[0]
        base_p = base_p / base_p.sum()
        all_p_candidates = [base_p]
    
    X = np.array(all_p_candidates)
    if X.shape[0] < n_initial:
        n_clusters = X.shape[0]
    else:
        n_clusters = n_initial
    kmeans = KMeans(n_clusters=n_clusters, random_state=0, n_init=10).fit(X)
    clusters = kmeans.cluster_centers_
    
    max_iter = 100
    for iteration in range(max_iter):
        clusters_prev = clusters.copy()
        assignments = np.argmin(cdist(X, clusters), axis=1)
        for j in range(n_clusters):
            mask = assignments == j
            if np.any(mask):
                clusters[j] = X[mask].mean(axis=0)
        if np.allclose(clusters, clusters_prev, atol=1e-8):
            break
    
    cluster_assignments = {}
    for i, log in enumerate(accepted_logs):
        w = np.array(log['Contract'])
        best_cluster = np.argmax([p @ w for p in clusters])
        if best_cluster not in cluster_assignments:
            cluster_assignments[best_cluster] = []
        cluster_assignments[best_cluster].append(i)
    
    valid_clusters = []
    valid_ps = []
    for j in range(n_clusters):
        if j in cluster_assignments:
            valid_clusters.append(j)
            valid_ps.append(clusters[j])
    
    if not valid_ps:
        base_p = np.ones(m_outcomes) / m_outcomes
        valid_ps = [base_p]
        valid_clusters = [0]
    
    n_valid = len(valid_ps)
    p0 = np.array(valid_ps)
    c = np.zeros(n_valid)
    
    for idx, j in enumerate(valid_clusters):
        logs_in_cluster = [accepted_logs[i] for i in cluster_assignments[j]]
        min_utility = min([p0[idx] @ np.array(log['Contract']) for log in logs_in_cluster])
        c[idx] = min_utility
    
    if rejected_logs:
        rej_wages = np.array([log['Contract'] for log in rejected_logs])
        rej_utilities = p0 @ rej_wages.T
        max_rej_per_action = np.max(rej_utilities, axis=1)
        for idx in range(n_valid):
            if c[idx] < max_rej_per_action[idx] - utility_tolerance:
                c[idx] = max_rej_per_action[idx]
    
    agent_setting = np.hstack([p0, c[:, np.newaxis]])
    return agent_setting
```
