```python
import numpy as np
from sklearn.cluster import KMeans
from scipy.optimize import linprog
from scipy.spatial.distance import cdist

def agent_solver(v, content):
    m_outcomes = len(v)
    L = len(content)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    if not accepted_logs:
        raise ValueError("No accepted contracts in logs")
    
    n_actions = min(len(accepted_logs), 10)
    
    candidate_ps = []
    for log in accepted_logs:
        wages = np.array(log['Contract'])
        u = log['Principal Utility']
        A_eq = [np.ones(m_outcomes), v - wages]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m_outcomes
        res = linprog(wages, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            candidate_ps.append(res.x)
            
    if not candidate_ps:
        raise ValueError("No valid LP solutions found")
        
    candidate_ps = np.array(candidate_ps)
    
    kmeans = KMeans(n_clusters=n_actions, random_state=0, n_init=10).fit(candidate_ps)
    p_centers = kmeans.cluster_centers_
    
    c_values = np.zeros(n_actions)
    
    for i, log in enumerate(content):
        if log['Agent Action'] == 1:
            wages = np.array(log['Contract'])
            util_received = p_centers @ wages
            action_idx = np.argmax(util_received)
            c_values[action_idx] = max(c_values[action_idx], util_received[action_idx])
    
    rej_logs = [log for log in content if log['Agent Action'] == -1]
    for log in rej_logs:
        wages = np.array(log['Contract'])
        util_received = p_centers @ wages
        c_values = np.maximum(c_values, np.maximum(util_received, 0))
    
    return np.hstack([p_centers, c_values.reshape(-1, 1)])
```
