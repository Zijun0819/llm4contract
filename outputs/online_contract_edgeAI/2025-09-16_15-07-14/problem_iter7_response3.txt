```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        if res.success:
            return res.x
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs-ipm')
        return res.x if res.success else None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    n_samples = len(all_p)
    n_clusters = min(max(1, int(np.sqrt(n_samples))), 50)
    
    if n_clusters > 1:
        gmm = GaussianMixture(n_components=n_clusters, random_state=42, n_init=3)
        gmm.fit(all_p)
        cluster_centers = gmm.means_
    else:
        cluster_centers = np.mean(all_p, axis=0).reshape(1, -1)
    
    action_costs = np.zeros(len(cluster_centers))
    for i in range(len(cluster_centers)):
        cluster_utilities = []
        for log in accepted_logs:
            utility = np.dot(log['Contract'], cluster_centers[i])
            cluster_utilities.append(utility)
        if cluster_utilities:
            action_costs[i] = np.min(cluster_utilities) - 1e-8
        else:
            action_costs[i] = 0.0
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ cluster_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        for i in range(len(cluster_centers)):
            if np.any(rejected_utilities[:, i] >= action_costs[i]):
                action_costs[i] = np.max(rejected_utilities[:, i]) + 1e-8
    
    action_costs = np.maximum(action_costs, 0)
    
    agent_setting = np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
    return agent_setting
```
