```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.metrics import pairwise_distances_argmin_min

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        return res.x if res.success else None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    all_p = np.clip(all_p, 0, 1)
    all_p = all_p / np.sum(all_p, axis=1, keepdims=True)
    
    n_clusters = min(10, max(2, len(accepted_logs) // 5))
    
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    cluster_centers = kmeans.cluster_centers_
    cluster_centers = np.clip(cluster_centers, 0, 1)
    cluster_centers = cluster_centers / np.sum(cluster_centers, axis=1, keepdims=True)
    
    action_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_member_indices = np.where(kmeans.labels_ == i)[0]
        if cluster_member_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_member_indices])
            utilities = np.sum(wages * cluster_centers[i], axis=1)
            action_costs[i] = np.min(utilities) - 1e-10
        else:
            action_costs[i] = 0.0
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ cluster_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected_utilities + 1e-10)
    
    action_costs = np.maximum(action_costs, 0)
    
    gmm = GaussianMixture(n_components=n_clusters, random_state=42, max_iter=200)
    gmm.fit(all_p)
    gmm_centers = gmm.means_
    gmm_centers = np.clip(gmm_centers, 0, 1)
    gmm_centers = gmm_centers / np.sum(gmm_centers, axis=1, keepdims=True)
    
    refined_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_member_indices = np.where(gmm.predict(all_p) == i)[0]
        if cluster_member_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_member_indices])
            utilities = np.sum(wages * gmm_centers[i], axis=1)
            refined_costs[i] = np.min(utilities) - 1e-10
        else:
            refined_costs[i] = 0.0
    
    if rejected_logs:
        rejected_utilities_gmm = rejected_wages @ gmm_centers.T
        max_rejected_utilities_gmm = np.max(rejected_utilities_gmm, axis=0)
        refined_costs = np.maximum(refined_costs, max_rejected_utilities_gmm + 1e-10)
    
    refined_costs = np.maximum(refined_costs, 0)
    
    final_centers = gmm_centers
    final_costs = refined_costs
    
    merged_centers = []
    merged_costs = []
    for i in range(n_clusters):
        if i not in merged_centers:
            similar_indices = [j for j in range(n_clusters) if np.allclose(final_centers[i], final_centers[j], atol=1e-6)]
            merged_center = np.mean(final_centers[similar_indices], axis=0)
            merged_center = merged_center / np.sum(merged_center)
            merged_cost = np.min(final_costs[similar_indices])
            merged_centers.append(merged_center)
            merged_costs.append(merged_cost)
    
    if len(merged_centers) < n_clusters:
        final_centers = np.array(merged_centers)
        final_costs = np.array(merged_costs)
    
    agent_setting = np.hstack([final_centers, final_costs.reshape(-1, 1)])
    return agent_setting
```
