```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import normalize

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.array(v)
    m = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    def solve_mini_lp(w, u_principal):
        w_arr = np.array(w)
        A_eq = np.vstack([np.ones(m), v - w_arr])
        b_eq = np.array([1.0, u_principal])
        try:
            res = linprog(-w_arr, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs', options={'tol': 1e-12})
            if res.success:
                p = np.clip(res.x, 0, 1)
                p_sum = np.sum(p)
                if p_sum > 1e-10:
                    p /= p_sum
                    return p
        except:
            pass
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(log['Contract'], log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    all_p = np.array(ps_candidates)
    
    n_clusters = min(20, max(2, len(all_p) // 5))
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    cluster_centers = kmeans.cluster_centers_
    cluster_centers = np.clip(cluster_centers, 0, 1)
    cluster_centers = normalize(cluster_centers, norm='l1', axis=1)
    
    gmm_components = max(2, min(n_clusters, len(all_p) // 10))
    gmm = GaussianMixture(n_components=gmm_components, random_state=42, n_init=3)
    gmm.fit(all_p)
    gmm_centers = gmm.means_
    gmm_centers = np.clip(gmm_centers, 0, 1)
    gmm_centers = normalize(gmm_centers, norm='l1', axis=1)
    
    combined_centers = np.vstack([cluster_centers, gmm_centers])
    
    action_costs = np.zeros(len(combined_centers))
    epsilon = 1e-8
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    for i, center in enumerate(combined_centers):
        utilities = np.dot(accepted_contracts, center)
        if utilities.size > 0:
            action_costs[i] = np.min(utilities) - epsilon
        else:
            action_costs[i] = 0.0
    
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = np.dot(rejected_contracts, combined_centers.T)
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected_utilities + epsilon)
    
    action_costs = np.maximum(action_costs, 0)
    
    tolerance = 1e-6
    unique_actions = []
    unique_costs = []
    for i, center in enumerate(combined_centers):
        is_duplicate = False
        for j, existing_center in enumerate(unique_actions):
            if np.allclose(center, existing_center, atol=tolerance):
                is_duplicate = True
                unique_costs[j] = np.minimum(unique_costs[j], action_costs[i])
                break
        if not is_duplicate:
            unique_actions.append(center)
            unique_costs.append(action_costs[i])
    
    unique_actions = np.array(unique_actions)
    unique_costs = np.array(unique_costs)
    
    valid_mask = np.ones(len(unique_actions), dtype=bool)
    for i, (center, cost) in enumerate(zip(unique_actions, unique_costs)):
        for log in accepted_logs:
            w = np.array(log['Contract'])
            if np.dot(w, center) - cost < -1e-10:
                valid_mask[i] = False
                break
        if valid_mask[i]:
            for log in rejected_logs:
                w = np.array(log['Contract'])
                if np.dot(w, center) - cost >= -1e-10:
                    valid_mask[i] = False
                    break
    
    valid_centers = unique_actions[valid_mask]
    valid_costs = unique_costs[valid_mask]
    
    if len(valid_centers) == 0:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    agent_setting = np.hstack([valid_centers, valid_costs.reshape(-1, 1)])
    return agent_setting
```
