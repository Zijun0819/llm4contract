```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import normalize

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.asarray(v)
    m = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    def solve_mini_lp(w, u_principal):
        w_arr = np.asarray(w)
        A_eq = np.vstack([np.ones(m), v - w_arr])
        b_eq = np.array([1.0, u_principal])
        try:
            res = linprog(-w_arr, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
            if res.success:
                p = res.x
                p[p < 1e-10] = 0
                p_sum = np.sum(p)
                if p_sum > 1e-10:
                    p /= p_sum
                else:
                    p = np.ones(m) / m
                return p
        except:
            pass
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(log['Contract'], log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    all_p = np.array(ps_candidates)
    n_samples = len(all_p)
    
    if n_samples == 1:
        n_clusters = 1
    else:
        n_clusters = min(20, max(3, int(np.sqrt(n_samples))))
    
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    cluster_centers = kmeans.cluster_centers_
    cluster_centers = np.clip(cluster_centers, 0, 1)
    cluster_centers = normalize(cluster_centers, norm='l1', axis=1)
    
    epsilon = 1e-8
    action_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_indices = np.where(kmeans.labels_ == i)[0]
        if cluster_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = np.sum(wages * cluster_centers[i], axis=1)
            action_costs[i] = np.maximum(np.min(utilities) - epsilon, 0.0)
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ cluster_centers.T - action_costs
        for i in range(n_clusters):
            if np.any(rejected_utilities[:, i] >= 0):
                action_costs[i] = np.max(action_costs[i], np.max(rejected_utilities[:, i]) + epsilon)
    
    unique_mask = np.ones(n_clusters, dtype=bool)
    for i in range(n_clusters):
        for j in range(i + 1, n_clusters):
            if np.allclose(cluster_centers[i], cluster_centers[j], atol=1e-6):
                unique_mask[j] = False
                action_costs[i] = np.min([action_costs[i], action_costs[j]])
    
    cluster_centers = cluster_centers[unique_mask]
    action_costs = action_costs[unique_mask]
    
    n_unique = len(cluster_centers)
    if n_unique > 1:
        gmm_n_components = min(10, n_unique)
        gmm = GaussianMixture(n_components=gmm_n_components, random_state=42, max_iter=200)
        gmm.fit(cluster_centers)
        gmm_centers = gmm.means_
        gmm_centers = np.clip(gmm_centers, 0, 1)
        gmm_centers = normalize(gmm_centers, norm='l1', axis=1)
        
        refined_costs = np.zeros(gmm_n_components)
        gmm_labels = gmm.predict(cluster_centers)
        for i in range(gmm_n_components):
            cluster_mask = (gmm_labels == i)
            if np.any(cluster_mask):
                refined_costs[i] = np.min(action_costs[cluster_mask]) - epsilon
        
        if rejected_logs:
            rejected_utilities_gmm = rejected_wages @ gmm_centers.T - refined_costs
            for i in range(gmm_n_components):
                if np.any(rejected_utilities_gmm[:, i] >= 0):
                    refined_costs[i] = np.max(refined_costs[i], np.max(rejected_utilities_gmm[:, i]) + epsilon)
        
        refined_costs = np.maximum(refined_costs, 0)
        
        final_unique_mask = np.ones(gmm_n_components, dtype=bool)
        for i in range(gmm_n_components):
            for j in range(i + 1, gmm_n_components):
                if np.allclose(gmm_centers[i], gmm_centers[j], atol=1e-6):
                    final_unique_mask[j] = False
                    refined_costs[i] = np.min([refined_costs[i], refined_costs[j]])
        
        gmm_centers = gmm_centers[final_unique_mask]
        refined_costs = refined_costs[final_unique_mask]
        agent_setting = np.hstack([gmm_centers, refined_costs.reshape(-1, 1)])
    else:
        agent_setting = np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
    
    return agent_setting
```
