```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        return res.x if res.success else None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    all_p = np.clip(all_p, 0, 1)
    row_sums = all_p.sum(axis=1, keepdims=True)
    all_p = np.where(row_sums > 0, all_p / row_sums, all_p)
    
    n_clusters = min(10, len(all_p))
    gmm = GaussianMixture(n_components=n_clusters, random_state=42, covariance_type='diag')
    gmm.fit(all_p)
    gmm_centers = gmm.means_
    gmm_assignments = gmm.predict(all_p)
    
    action_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_member_indices = np.where(gmm_assignments == i)[0]
        if cluster_member_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_member_indices])
            utilities = np.sum(wages * gmm_centers[i], axis=1)
            action_costs[i] = np.min(utilities) - 1e-10
        else:
            action_costs[i] = 0.0
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ gmm_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected_utilities + 1e-10)
    
    action_costs = np.maximum(action_costs, 0)
    
    for i in range(n_clusters):
        for log in accepted_logs:
            w = np.array(log['Contract'])
            utility = np.dot(w, gmm_centers[i]) - action_costs[i]
            if utility < -1e-10 and i == np.argmax(w @ gmm_centers.T - action_costs):
                action_costs[i] = np.dot(w, gmm_centers[i]) + 1e-10
    
    for log in rejected_logs:
        w = np.array(log['Contract'])
        best_utility = np.max(w @ gmm_centers.T - action_costs)
        if best_utility > -1e-10:
            worst_violator = np.argmax(w @ gmm_centers.T - action_costs)
            action_costs[worst_violator] = np.dot(w, gmm_centers[worst_violator]) + 1e-10
    
    distances = cdist(gmm_centers, gmm_centers)
    np.fill_diagonal(distances, np.inf)
    merge_threshold = 0.01
    to_merge = np.where(distances < merge_threshold)
    merged_indices = set()
    new_centers = []
    new_costs = []
    
    for i in range(n_clusters):
        if i in merged_indices:
            continue
        merge_group = [i]
        for j in range(i+1, n_clusters):
            if distances[i, j] < merge_threshold:
                merge_group.append(j)
                merged_indices.add(j)
        merged_center = np.mean(gmm_centers[merge_group], axis=0)
        merged_center = merged_center / np.sum(merged_center)
        merged_cost = np.min(action_costs[merge_group])
        new_centers.append(merged_center)
        new_costs.append(merged_cost)
    
    if new_centers:
        final_centers = np.array(new_centers)
        final_costs = np.array(new_costs)
    else:
        final_centers = gmm_centers
        final_costs = action_costs
    
    final_centers = np.clip(final_centers, 0, 1)
    row_sums = final_centers.sum(axis=1, keepdims=True)
    final_centers = np.where(row_sums > 0, final_centers / row_sums, final_centers)
    
    agent_setting = np.hstack([final_centers, final_costs.reshape(-1, 1)])
    return agent_setting
```
