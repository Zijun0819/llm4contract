```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
import warnings
warnings.filterwarnings('ignore')

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_actions = 10
    m_outcomes = len(v)
    
    def solve_p_for_log(log):
        if log['Agent Action'] != 1:
            return None
        w = np.array(log['Contract'])
        u_principal = log['Principal Utility']
        A_eq = np.vstack([np.ones(m_outcomes), v - w])
        b_eq = np.array([1.0, u_principal])
        try:
            res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=[(0,1)]*m_outcomes, method='highs')
            if res.success:
                return res.x
        except:
            pass
        return None
    
    p_candidates = []
    for log in content:
        p = solve_p_for_log(log)
        if p is not None:
            p_candidates.append(p)
    
    if not p_candidates:
        p_default = np.ones(m_outcomes) / m_outcomes
        c_default = 0.0
        return np.hstack([p_default.reshape(1,-1), np.array([[c_default]])])
    
    p_candidates = np.array(p_candidates)
    n_components = min(n_actions, len(p_candidates))
    gm = GaussianMixture(n_components=n_components, random_state=0)
    gm.fit(p_candidates)
    p_centers = gm.means_
    
    assignments = np.full(len(content), -1)
    for i, log in enumerate(content):
        if log['Agent Action'] == 1:
            w = np.array(log['Contract'])
            utils = p_centers @ w
            assignments[i] = np.argmax(utils)
    
    c_vals = np.zeros(n_components)
    for a in range(n_components):
        idx = np.where(assignments == a)[0]
        if len(idx) > 0:
            wages = np.array([content[i]['Contract'] for i in idx])
            min_util = np.min(wages @ p_centers[a])
            c_vals[a] = max(0, min_util)
    
    rej_indices = [i for i, log in enumerate(content) if log['Agent Action'] == -1]
    if rej_indices:
        rej_wages = np.array([content[i]['Contract'] for i in rej_indices])
        rej_utils = p_centers @ rej_wages.T
        max_rej_utils = np.max(rej_utils, axis=1)
        c_vals = np.maximum(c_vals, max_rej_utils)
    
    agent_setting = np.hstack([p_centers, c_vals.reshape(-1,1)])
    return agent_setting
```
