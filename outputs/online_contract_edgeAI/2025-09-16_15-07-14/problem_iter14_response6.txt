```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans, DBSCAN
from sklearn.mixture import GaussianMixture
from sklearn.metrics import pairwise_distances
from sklearn.preprocessing import normalize

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        n_actions = len(v)
        return np.hstack([np.eye(n_actions), np.zeros((n_actions, 1))])
    
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        return res.x if res.success else None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        n_actions = len(v)
        return np.hstack([np.eye(n_actions), np.zeros((n_actions, 1))])
    
    all_p = np.array(ps_candidates)
    
    n_samples = len(all_p)
    max_clusters = min(100, n_samples)
    
    kmeans = KMeans(n_clusters=max_clusters, random_state=42, n_init=10).fit(all_p)
    kmeans_centers = kmeans.cluster_centers_
    
    gmm = GaussianMixture(n_components=max_clusters, random_state=42, covariance_type='diag').fit(all_p)
    gmm_centers = gmm.means_
    
    dbscan = DBSCAN(eps=0.1, min_samples=5).fit(all_p)
    dbscan_labels = dbscan.labels_
    dbscan_centers = []
    for label in np.unique(dbscan_labels):
        if label != -1:
            cluster_points = all_p[dbscan_labels == label]
            dbscan_centers.append(cluster_points.mean(axis=0))
    dbscan_centers = np.array(dbscan_centers) if dbscan_centers else np.empty((0, 12))
    
    combined_centers = np.vstack([kmeans_centers, gmm_centers, dbscan_centers])
    
    distances = pairwise_distances(combined_centers)
    threshold = 1e-4
    merged_centers = []
    used = np.zeros(len(combined_centers), dtype=bool)
    for i in range(len(combined_centers)):
        if not used[i]:
            neighbors = np.where(distances[i] < threshold)[0]
            merged_center = combined_centers[neighbors].mean(axis=0)
            merged_centers.append(merged_center)
            used[neighbors] = True
    merged_centers = np.array(merged_centers)
    
    merged_centers = normalize(merged_centers, norm='l1', axis=1)
    
    if len(merged_centers) > max_clusters:
        final_kmeans = KMeans(n_clusters=max_clusters, random_state=42, n_init=10).fit(merged_centers)
        final_centers = final_kmeans.cluster_centers_
        final_centers = normalize(final_centers, norm='l1', axis=1)
    else:
        final_centers = merged_centers
    
    costs = np.zeros(len(final_centers))
    for i, center in enumerate(final_centers):
        min_util = np.inf
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = np.dot(w, center)
            if util < min_util:
                min_util = util
        costs[i] = max(0, min_util - 1e-10) if min_util != np.inf else 0
    
    if rejected_logs:
        for i, center in enumerate(final_centers):
            max_rejected_util = -np.inf
            for log in rejected_logs:
                w = np.array(log['Contract'])
                util = np.dot(w, center)
                if util > max_rejected_util:
                    max_rejected_util = util
            if max_rejected_util != -np.inf:
                costs[i] = max(costs[i], max_rejected_util + 1e-10)
    
    agent_setting = np.hstack([final_centers, costs.reshape(-1, 1)])
    return agent_setting
```
