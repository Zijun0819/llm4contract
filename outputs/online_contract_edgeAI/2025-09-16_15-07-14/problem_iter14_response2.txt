```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.preprocessing import normalize

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.array(v)
    m = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    def solve_mini_lp(w, u_principal):
        w_arr = np.array(w)
        A_eq = np.vstack([np.ones(m), v - w_arr])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w_arr, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs', options={'tol': 1e-12})
        if res.success:
            p = res.x
            if np.abs(p.sum() - 1.0) < 1e-10 and np.abs((v - w_arr) @ p - u_principal) < 1e-10:
                p = np.clip(p, 0, 1)
                p /= p.sum()
                return p
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(log['Contract'], log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    all_p = np.array(ps_candidates)
    
    n_clusters = min(50, len(accepted_logs)//2 + 1)
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10, tol=1e-8).fit(all_p)
    cluster_centers = normalize(kmeans.cluster_centers_, norm='l1', axis=1)
    cluster_assignments = kmeans.labels_
    
    action_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_indices = np.where(cluster_assignments == i)[0]
        if cluster_indices.size > 0:
            contracts = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = np.sum(contracts * cluster_centers[i], axis=1)
            min_utility = np.min(utilities)
            action_costs[i] = max(min_utility, 0.0)
        else:
            action_costs[i] = 0.0
    
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        if rejected_contracts.size > 0:
            rejected_utilities = rejected_contracts @ cluster_centers.T
            max_rejected_utilities = np.max(rejected_utilities, axis=0)
            action_costs = np.maximum(action_costs, max_rejected_utilities)
    
    return np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
```
