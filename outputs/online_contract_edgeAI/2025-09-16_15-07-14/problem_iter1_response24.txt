```python
import numpy as np
from scipy.optimize import linprog, minimize, Bounds, LinearConstraint
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    L = len(content)
    v = np.array(v)
    m = len(v)
    
    def infer_p(w, u):
        if u <= 0:
            return None
        c_obj = w
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u])
        bounds = Bounds(0, 1)
        constraints = LinearConstraint(A_eq, b_eq, b_eq)
        res = minimize(lambda p: p @ c_obj, x0=np.ones(m)/m, constraints=constraints, bounds=bounds, method='trust-constr')
        if res.success:
            return res.x
        return None
    
    candidate_ps = []
    for log in accepted_logs:
        w_i = np.array(log['Contract'])
        u_i = log['Principal Utility']
        p_i = infer_p(w_i, u_i)
        if p_i is not None:
            candidate_ps.append(p_i)
    
    if not candidate_ps:
        n = 1
        p0 = np.ones((1, m)) / m
        c0 = np.zeros(1)
        agent_setting = np.hstack([p0, c0.reshape(-1, 1)])
        return agent_setting
    
    all_p = np.array(candidate_ps)
    n_candidates = min(10, len(all_p))
    if n_candidates > 1:
        bic_scores = []
        for n_components in range(1, min(11, len(all_p))):
            gmm = GaussianMixture(n_components=n_components, random_state=0).fit(all_p)
            bic_scores.append(gmm.bic(all_p))
        n_opt = np.argmin(bic_scores) + 1
        kmeans = KMeans(n_clusters=n_opt, random_state=0, n_init=10).fit(all_p)
        p0 = kmeans.cluster_centers_
    else:
        p0 = all_p.mean(axis=0, keepdims=True)
        n_opt = 1
    
    assignments = np.full(L, -1, dtype=int)
    for i, log in enumerate(content):
        if log['Agent Action'] == 1:
            w = np.array(log['Contract'])
            utilities = p0 @ w
            assignments[i] = np.argmax(utilities)
    
    c_ir = np.zeros(n_opt)
    for a in range(n_opt):
        indices = np.where(assignments == a)[0]
        if indices.size > 0:
            contracts = np.array([content[i]['Contract'] for i in indices])
            min_payoffs = np.min(contracts, axis=0)
            c_ir[a] = p0[a] @ min_payoffs
        else:
            c_ir[a] = 0.0
    
    if rejected_logs:
        rej_contracts = np.array([log['Contract'] for log in rejected_logs]).T
        rej_utils = p0 @ rej_contracts
        c_rej = np.max(rej_utils, axis=1)
        c0 = np.maximum(c_ir, c_rej)
    else:
        c0 = c_ir
    
    agent_setting = np.hstack([p0, c0.reshape(-1, 1)])
    return agent_setting
```
