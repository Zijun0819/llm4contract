```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
import warnings
warnings.filterwarnings('ignore')

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    logs = pd.DataFrame(content)
    n_outcomes = len(v)
    accepted_logs = logs[logs['Agent Action'] == 1].copy()
    rejected_logs = logs[logs['Agent Action'] == -1].copy()
    
    if accepted_logs.empty:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    ps_candidates = []
    for _, row in accepted_logs.iterrows():
        contract = np.array(row['Contract'])
        u_principal = row['Principal Utility']
        
        c_obj = -contract
        A_eq = np.vstack([np.ones(n_outcomes), v - contract])
        b_eq = np.array([1, u_principal])
        bounds = [(0, 1)] * n_outcomes
        
        res = linprog(c_obj, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            ps_candidates.append(res.x)
    
    if not ps_candidates:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    all_p = np.array(ps_candidates)
    n_components = min(15, max(2, len(all_p)//2))
    gmm = GaussianMixture(n_components=n_components, random_state=42)
    gmm.fit(all_p)
    cluster_centers = gmm.means_
    n_actions = cluster_centers.shape[0]
    
    costs = np.zeros(n_actions)
    for i in range(n_actions):
        min_util = np.inf
        for _, row in accepted_logs.iterrows():
            contract = np.array(row['Contract'])
            util = np.dot(cluster_centers[i], contract)
            if util < min_util:
                min_util = util
        costs[i] = max(0, min_util)
    
    if not rejected_logs.empty:
        rej_contracts = np.array([np.array(c) for c in rejected_logs['Contract'].values])
        rej_utils = rej_contracts @ cluster_centers.T
        for i in range(n_actions):
            max_rej_util = np.max(rej_utils[:, i])
            if max_rej_util >= costs[i]:
                costs[i] = max_rej_util + 1e-8
    
    for i in range(n_actions):
        acc_contracts = np.array([np.array(c) for c in accepted_logs['Contract'].values])
        acc_utils = acc_contracts @ cluster_centers[i]
        min_acc_util = np.min(acc_utils)
        if min_acc_util < costs[i]:
            costs[i] = min_acc_util
    
    return np.hstack([cluster_centers, costs.reshape(-1, 1)])
```
