```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import normalize

def agent_solver(v, content):
    def solve_p_min(w, u):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w]).T
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m
        res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs-ds')
        return res.x if res.success else None

    def solve_p_max(w, u):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w]).T
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs-ds')
        return res.x if res.success else None

    n_actions = 10
    content_df = pd.DataFrame(content)
    accepted_logs = content_df[content_df['Agent Action'] == 1]
    all_p_min = []
    all_p_max = []

    for _, log in accepted_logs.iterrows():
        w = np.array(log['Contract'])
        u = log['Principal Utility']
        p_min = solve_p_min(w, u)
        p_max = solve_p_max(w, u)
        if p_min is not None:
            all_p_min.append(p_min)
        if p_max is not None:
            all_p_max.append(p_max)

    if not all_p_min:
        raise ValueError("No valid accepted logs to infer agent strategies.")

    all_p_candidates = np.vstack(all_p_min + all_p_max)
    gmm = GaussianMixture(n_components=n_actions, random_state=0).fit(all_p_candidates)
    p0 = gmm.means_
    labels = gmm.predict(all_p_candidates)
    p0_refined = []
    for i in range(n_actions):
        cluster_points = all_p_candidates[labels == i]
        if len(cluster_points) > 0:
            centroid = np.mean(cluster_points, axis=0)
            p0_refined.append(centroid)
    p0_refined = np.array(p0_refined)
    n_actions = len(p0_refined)

    assignments = np.zeros(len(content_df), dtype=int)
    for idx, log in content_df.iterrows():
        contract = np.array(log['Contract'])
        if log['Agent Action'] == 1:
            utilities = p0_refined @ contract
            assignments[idx] = np.argmax(utilities)
        else:
            assignments[idx] = -1

    c_init = np.full(n_actions, -np.inf)
    for a in range(n_actions):
        a_logs = content_df[(assignments == a) & (content_df['Agent Action'] == 1)]
        if not a_logs.empty:
            wages = np.array([log['Contract'] for log in a_logs.to_dict('records')]).T
            utilities = p0_refined[a] @ wages
            c_init[a] = np.max(utilities) if c_init[a] < np.max(utilities) else c_init[a]
        rej_logs = content_df[content_df['Agent Action'] == -1]
        if not rej_logs.empty:
            wages_rej = np.array([log['Contract'] for log in rej_logs.to_dict('records')]).T
            rej_utils = p0_refined[a] @ wages_rej
            rej_min_util = np.max(rej_utils)
            if rej_min_util > c_init[a]:
                c_init[a] = rej_min_util

    c_final = np.where(c_init > -np.inf, c_init, 0.0)
    all_actions = np.hstack([p0_refined, c_final.reshape(-1, 1)])
    return all_actions
```
