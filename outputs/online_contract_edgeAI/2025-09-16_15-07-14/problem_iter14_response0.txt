```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.metrics import pairwise_distances_argmin_min

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.array(v)
    m = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    def solve_mini_lp(w, u_principal):
        w_arr = np.array(w)
        A_eq = np.vstack([np.ones(m), v - w_arr])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w_arr, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        if res.success:
            p = res.x
            p = np.maximum(p, 0)
            p_sum = p.sum()
            if p_sum > 0:
                return p / p_sum
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(log['Contract'], log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    all_p = np.array(ps_candidates)
    n_clusters = min(50, len(all_p))
    
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    kmeans_centers = kmeans.cluster_centers_
    kmeans_centers = np.maximum(kmeans_centers, 0)
    kmeans_centers /= kmeans_centers.sum(axis=1, keepdims=True)
    kmeans_labels = kmeans.labels_
    
    kmeans_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_indices = np.where(kmeans_labels == i)[0]
        if cluster_indices.size > 0:
            contracts = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = contracts @ kmeans_centers[i]
            kmeans_costs[i] = np.min(utilities) - 1e-12
    
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_contracts @ kmeans_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        kmeans_costs = np.maximum(kmeans_costs, max_rejected_utilities + 1e-12)
    
    kmeans_costs = np.maximum(kmeans_costs, 0)
    
    gmm = GaussianMixture(n_components=n_clusters, random_state=42).fit(all_p)
    gmm_centers = gmm.means_
    gmm_centers = np.maximum(gmm_centers, 0)
    gmm_centers /= gmm_centers.sum(axis=1, keepdims=True)
    gmm_labels = gmm.predict(all_p)
    
    gmm_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_indices = np.where(gmm_labels == i)[0]
        if cluster_indices.size > 0:
            contracts = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = contracts @ gmm_centers[i]
            gmm_costs[i] = np.min(utilities) - 1e-12
    
    if rejected_logs:
        rejected_utilities = rejected_contracts @ gmm_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        gmm_costs = np.maximum(gmm_costs, max_rejected_utilities + 1e-12)
    
    gmm_costs = np.maximum(gmm_costs, 0)
    
    combined_centers = np.vstack([kmeans_centers, gmm_centers])
    combined_costs = np.hstack([kmeans_costs, gmm_costs])
    
    unique_centers, inverse = np.unique(combined_centers, axis=0, return_inverse=True)
    unique_costs = np.array([np.min(combined_costs[inverse == i]) for i in range(len(unique_centers))])
    
    if len(unique_centers) > n_clusters:
        final_kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(unique_centers)
        final_centers = final_kmeans.cluster_centers_
        final_centers = np.maximum(final_centers, 0)
        final_centers /= final_centers.sum(axis=1, keepdims=True)
        final_costs = np.zeros(n_clusters)
        for i in range(n_clusters):
            member_indices = np.where(final_kmeans.labels_ == i)[0]
            if member_indices.size > 0:
                final_costs[i] = np.min(unique_costs[member_indices])
            else:
                final_costs[i] = 0.0
    else:
        final_centers = unique_centers
        final_costs = unique_costs
    
    agent_setting = np.hstack([final_centers, final_costs.reshape(-1, 1)])
    return agent_setting
```
