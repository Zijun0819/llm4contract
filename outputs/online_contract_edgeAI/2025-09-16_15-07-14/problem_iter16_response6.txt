```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    if not accepted_logs:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        return res.x if res.success else None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    n_candidates = len(all_p)
    n_clusters = min(max(1, n_candidates // 10), 50)
    
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10, tol=1e-10, max_iter=300).fit(all_p)
    kmeans_centers = kmeans.cluster_centers_
    kmeans_centers = np.maximum(kmeans_centers, 0)
    kmeans_centers /= kmeans_centers.sum(axis=1, keepdims=True)
    
    gmm = GaussianMixture(n_components=n_clusters, random_state=42, tol=1e-10, max_iter=300).fit(all_p)
    gmm_centers = gmm.means_
    gmm_centers = np.maximum(gmm_centers, 0)
    gmm_centers /= gmm_centers.sum(axis=1, keepdims=True)
    
    distances = cdist(kmeans_centers, gmm_centers)
    if np.mean(np.min(distances, axis=1)) < 1e-5:
        combined_centers = np.vstack([kmeans_centers, gmm_centers])
        kmeans_merge = KMeans(n_clusters=n_clusters, random_state=42, n_init=10, tol=1e-10, max_iter=300).fit(combined_centers)
        centers = kmeans_merge.cluster_centers_
    else:
        centers = gmm_centers
    
    centers = np.maximum(centers, 0)
    centers /= centers.sum(axis=1, keepdims=True)
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    costs = np.zeros(len(centers))
    for i, center in enumerate(centers):
        utilities = accepted_contracts @ center
        costs[i] = np.min(utilities) - 1e-12
    
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_contracts @ centers.T
        max_rejected = np.max(rejected_utilities, axis=0)
        costs = np.maximum(costs, max_rejected + 1e-12)
    
    costs = np.maximum(costs, 0)
    
    return np.hstack([centers, costs.reshape(-1, 1)])
```
