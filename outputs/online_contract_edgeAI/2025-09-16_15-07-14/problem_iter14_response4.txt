```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances_argmin_min

def agent_solver(v, content):
    v = np.array(v)
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    def solve_for_p(w, u_principal):
        w_arr = np.array(w)
        A_eq = np.vstack([np.ones(n_outcomes), v - w_arr])
        b_eq = np.array([1.0, u_principal])
        bounds = [(0.0, 1.0)] * n_outcomes
        res = linprog(-w_arr, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs', options={'tol': 1e-12})
        if res.success:
            p = res.x
            if (np.abs(p.sum() - 1.0) < 1e-10 and 
                np.abs(np.dot(v - w_arr, p) - u_principal) < 1e-10 and
                np.all(p >= -1e-10)):
                p = np.maximum(p, 0.0)
                p /= p.sum()
                return p
        return None
    
    candidate_ps = []
    for log in accepted_logs:
        p_candidate = solve_for_p(log['Contract'], log['Principal Utility'])
        if p_candidate is not None:
            candidate_ps.append(p_candidate)
    
    if not candidate_ps:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    candidate_ps = np.array(candidate_ps)
    n_candidates = candidate_ps.shape[0]
    
    if n_candidates <= 1:
        return np.hstack([candidate_ps, np.zeros((n_candidates, 1))])
    
    max_clusters = min(200, n_candidates)
    min_clusters = max(1, n_candidates // 20)
    best_score = -np.inf
    best_kmeans = None
    
    for n_clusters in range(min_clusters, max_clusters + 1):
        kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10, tol=1e-8, max_iter=500)
        labels = kmeans.fit_predict(candidate_ps)
        inertia = kmeans.inertia_
        if -inertia > best_score:
            best_score = -inertia
            best_kmeans = kmeans
    
    cluster_centers = np.maximum(best_kmeans.cluster_centers_, 0.0)
    cluster_centers /= cluster_centers.sum(axis=1, keepdims=True)
    cluster_assignments = best_kmeans.labels_
    n_clusters = cluster_centers.shape[0]
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    action_costs = np.zeros(n_clusters)
    
    for i in range(n_clusters):
        cluster_mask = (cluster_assignments == i)
        if np.any(cluster_mask):
            utilities = accepted_contracts[cluster_mask] @ cluster_centers[i]
            min_utility = np.min(utilities)
            action_costs[i] = max(min_utility - 1e-12, 0.0)
    
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_contracts @ cluster_centers.T
        max_rejected = np.max(rejected_utilities, axis=0)
        for i in range(n_clusters):
            if max_rejected[i] >= action_costs[i]:
                action_costs[i] = max_rejected[i] + 1e-12
    
    valid_mask = np.ones(n_clusters, dtype=bool)
    for i in range(n_clusters):
        if np.any(cluster_centers[i] < -1e-10) or not np.isclose(cluster_centers[i].sum(), 1.0, atol=1e-10):
            valid_mask[i] = False
    
    cluster_centers = cluster_centers[valid_mask]
    action_costs = action_costs[valid_mask]
    
    return np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
```
