```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from scipy.spatial.distance import cdist

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        return res.x if res.success else None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    n_samples = len(all_p)
    max_clusters = min(50, n_samples)
    min_cluster_size = max(1, n_samples // 20)
    
    best_score = -np.inf
    best_centers = None
    best_labels = None
    
    for n_clusters in range(1, max_clusters + 1):
        kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
        cluster_sizes = np.bincount(kmeans.labels_, minlength=n_clusters)
        if np.all(cluster_sizes >= min_cluster_size):
            inertia = -kmeans.inertia_
            if inertia > best_score:
                best_score = inertia
                best_centers = kmeans.cluster_centers_
                best_labels = kmeans.labels_
    
    if best_centers is None:
        n_clusters = max(1, min(5, n_samples))
        kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
        best_centers = kmeans.cluster_centers_
        best_labels = kmeans.labels_
    
    cluster_centers = best_centers
    cluster_assignments = best_labels
    n_clusters = len(cluster_centers)
    
    action_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_member_indices = np.where(cluster_assignments == i)[0]
        if cluster_member_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_member_indices])
            utilities = np.sum(wages * cluster_centers[i], axis=1)
            action_costs[i] = np.min(utilities) - 1e-6
        else:
            action_costs[i] = 0.0
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ cluster_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected_utilities + 1e-6)
    
    action_costs = np.maximum(action_costs, 0)
    
    agent_setting = np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
    return agent_setting
```
