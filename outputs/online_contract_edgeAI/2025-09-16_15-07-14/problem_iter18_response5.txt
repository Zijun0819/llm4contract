```python
import numpy as np
from sklearn.mixture import GaussianMixture
from scipy.optimize import linprog

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    n_outcomes = len(v)
    
    if not accepted_logs:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    def solve_mini_lp(w, u_principal):
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * n_outcomes, method='highs')
        if res.success:
            p = res.x
            p = np.clip(p, 0, 1)
            if np.sum(p) < 1e-8:
                p = np.ones(n_outcomes) / n_outcomes
            else:
                p /= np.sum(p)
            return p
        return None

    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    all_p = np.array(ps_candidates)
    n_samples = len(all_p)
    
    n_components = min(max(2, n_samples // 5), 20)
    gmm = GaussianMixture(n_components=n_components, random_state=42, tol=1e-10, max_iter=1000)
    gmm.fit(all_p)
    centers = gmm.means_
    centers = np.clip(centers, 0, 1)
    centers = centers / np.sum(centers, axis=1, keepdims=True)
    
    costs = np.zeros(n_components)
    epsilon = 1e-10
    
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    accepted_utilities = accepted_contracts @ centers.T
    for i in range(n_components):
        min_utility = np.min(accepted_utilities[:, i])
        costs[i] = min_utility - epsilon
    
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_contracts @ centers.T
        max_rejected = np.max(rejected_utilities, axis=0)
        costs = np.maximum(costs, max_rejected + epsilon)
    
    costs = np.maximum(costs, 0)
    
    return np.hstack([centers, costs.reshape(-1, 1)])
```
