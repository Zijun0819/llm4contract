```python
import numpy as np
from sklearn.cluster import KMeans
from scipy.optimize import linprog
import warnings
warnings.filterwarnings('ignore')

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    def solve_feasible_p(contract, u_principal):
        w = np.array(contract)
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u_principal])
        result = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        return result.x if result.success else None

    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    n_outcomes = len(v)
    
    if not accepted_logs:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    candidate_ps = []
    for log in accepted_logs:
        p = solve_feasible_p(log['Contract'], log['Principal Utility'])
        if p is not None:
            candidate_ps.append(p)
    
    if not candidate_ps:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    candidate_ps = np.array(candidate_ps)
    n_clusters = min(100, len(candidate_ps))
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(candidate_ps)
    cluster_centers = kmeans.cluster_centers_
    labels = kmeans.labels_
    
    cluster_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        indices = np.where(labels == i)[0]
        if indices.size > 0:
            contracts = np.array([accepted_logs[j]['Contract'] for j in indices])
            utilities = np.dot(contracts, cluster_centers[i])
            cluster_costs[i] = np.min(utilities)
        else:
            cluster_costs[i] = 0.0
    
    if rejected_logs:
        rej_contracts = np.array([log['Contract'] for log in rejected_logs])
        rej_utilities = np.dot(rej_contracts, cluster_centers.T)
        max_rej_utils = np.max(rej_utilities, axis=0)
        cluster_costs = np.maximum(cluster_costs, max_rej_utils + 1e-8)
    
    cluster_costs = np.maximum(cluster_costs, 0)
    
    return np.hstack([cluster_centers, cluster_costs.reshape(-1, 1)])
```
