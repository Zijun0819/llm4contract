```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from collections import defaultdict

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    m = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    def solve_mini_lp(w, u_principal):
        A_eq = np.vstack([np.ones(m), v - np.array(w)])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-np.array(w), A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs', options={'tol': 1e-12})
        if res.success:
            p = res.x
            p = np.clip(p, 0, 1)
            p_sum = p.sum()
            if p_sum > 0:
                p /= p_sum
                return p
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(log['Contract'], log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    all_p = np.array(ps_candidates)
    n_samples = len(all_p)
    
    n_clusters = min(max(2, n_samples // 5), 20)
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    cluster_centers = kmeans.cluster_centers_
    cluster_centers = np.clip(cluster_centers, 0, 1)
    row_sums = cluster_centers.sum(axis=1, keepdims=True)
    row_sums[row_sums == 0] = 1
    cluster_centers = cluster_centers / row_sums
    
    gmm_n_components = max(2, min(n_clusters, n_samples // 10))
    gmm = GaussianMixture(n_components=gmm_n_components, random_state=42, tol=1e-10)
    gmm.fit(all_p)
    gmm_centers = gmm.means_
    gmm_centers = np.clip(gmm_centers, 0, 1)
    row_sums = gmm_centers.sum(axis=1, keepdims=True)
    row_sums[row_sums == 0] = 1
    gmm_centers = gmm_centers / row_sums
    
    epsilon = 1e-10
    refined_costs = np.zeros(gmm_n_components)
    gmm_assignments = gmm.predict(all_p)
    for i in range(gmm_n_components):
        cluster_indices = np.where(gmm_assignments == i)[0]
        if cluster_indices.size > 0:
            wages = np.array([accepted_logs[idx]['Contract'] for idx in cluster_indices])
            utilities = wages.dot(gmm_centers[i])
            refined_costs[i] = np.min(utilities) - epsilon
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages.dot(gmm_centers.T)
        max_rejected = np.max(rejected_utilities, axis=0)
        refined_costs = np.maximum(refined_costs, max_rejected + epsilon)
    
    refined_costs = np.maximum(refined_costs, 0)
    
    agent_setting = np.hstack([gmm_centers, refined_costs.reshape(-1, 1)])
    
    for i in range(len(agent_setting)):
        p, c = agent_setting[i, :-1], agent_setting[i, -1]
        for log in accepted_logs:
            w = np.array(log['Contract'])
            util = w.dot(p) - c
            if util < -epsilon:
                c_new = w.dot(p) + epsilon
                refined_costs[i] = max(refined_costs[i], c_new)
        for log in rejected_logs:
            w = np.array(log['Contract'])
            util = w.dot(p) - c
            if util >= -epsilon:
                c_new = w.dot(p) + epsilon
                refined_costs[i] = max(refined_costs[i], c_new)
        agent_setting[i, -1] = refined_costs[i]
    
    refined_costs = np.maximum(refined_costs, 0)
    agent_setting[:, -1] = refined_costs
    
    unique_dict = defaultdict(list)
    for row in agent_setting:
        key = tuple(np.round(row[:-1], 8))
        unique_dict[key].append(row[-1])
    
    dedup_setting = []
    for p_vec, costs in unique_dict.items():
        min_cost = min(costs)
        dedup_setting.append(np.append(p_vec, min_cost))
    
    dedup_setting = np.array(dedup_setting)
    
    valid_mask = np.ones(len(dedup_setting), dtype=bool)
    for i, row in enumerate(dedup_setting):
        p, c = row[:-1], row[-1]
        for log in accepted_logs:
            w = np.array(log['Contract'])
            if w.dot(p) - c < -epsilon:
                valid_mask[i] = False
                break
        if valid_mask[i]:
            for log in rejected_logs:
                w = np.array(log['Contract'])
                if w.dot(p) - c >= -epsilon:
                    valid_mask[i] = False
                    break
    
    valid_setting = dedup_setting[valid_mask]
    
    if len(valid_setting) == 0:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    return valid_setting
```
