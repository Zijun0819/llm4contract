```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from scipy.spatial.distance import cdist

def agent_solver(v, content):
    n_candidates = 12
    m_outcomes = len(v)
    L = len(content)
    
    accepted_logs = [i for i, log in enumerate(content) if log['Agent Action'] == 1]
    rejected_logs = [i for i, log in enumerate(content) if log['Agent Action'] == -1]
    
    P_matrices = []
    for idx in accepted_logs:
        log = content[idx]
        w_val = np.array(log['Contract'])
        u_val = log['Principal Utility']
        if len(w_val) != m_outcomes:
            continue
        A_eq = [np.ones(m_outcomes), v - w_val]
        b_eq = [1.0, u_val]
        bounds = [(0, 1)] * m_outcomes
        res = linprog(w_val, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            p_opt = res.x
            p_opt = np.maximum(p_opt, 0)
            p_opt /= p_opt.sum()
            P_matrices.append(p_opt)
    
    if len(P_matrices) == 0:
        P_matrices.append(np.ones(m_outcomes) / m_outcomes)
    
    P_array = np.array(P_matrices)
    
    if len(accepted_logs) >= n_candidates:
        kmeans = KMeans(n_clusters=n_candidates, n_init='auto', random_state=0).fit(P_array)
        p_center = kmeans.cluster_centers_
    else:
        p_center = np.vstack([P_array, np.random.dirichlet(np.ones(m_outcomes), n_candidates - len(P_matrices))])
        kmeans = KMeans(n_clusters=n_candidates, n_init='auto', random_state=0).fit(p_center)
        p_center = kmeans.cluster_centers_
    
    assigns = {}
    for idx in accepted_logs:
        w_i = np.array(content[idx]['Contract'])
        utils = p_center @ w_i
        a_best = np.argmax(utils)
        if a_best not in assigns:
            assigns[a_best] = {'w': [], 'util': []}
        assigns[a_best]['w'].append(w_i)
        assigns[a_best]['util'].append(utils[a_best])
    
    c_vals = np.zeros(n_candidates)
    for a in range(n_candidates):
        if a in assigns:
            w_min = np.min(assigns[a]['w'], axis=0)
            c_vals[a] = np.max([0, p_center[a] @ w_min])
        else:
            c_vals[a] = 0.0
    
    if rejected_logs:
        w_rej = np.array([content[idx]['Contract'] for idx in rejected_logs]).T
        rej_util = p_center @ w_rej
        c_rej = np.max(rej_util, axis=1)
        for a in range(n_candidates):
            if c_vals[a] < c_rej[a]:
                c_vals[a] = c_rej[a]
    
    agent_setting = np.hstack([p_center, c_vals.reshape(-1, 1)])
    return agent_setting
```
