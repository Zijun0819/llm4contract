```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans
from collections import defaultdict

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    n_outcomes = len(v)
    
    if not accepted_logs:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    def solve_mini_lp(w, u_principal):
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * n_outcomes, method='highs')
        if res.success:
            p = res.x
            p = np.clip(p, 0, 1)
            p_sum = np.sum(p)
            if p_sum > 0:
                p /= p_sum
            else:
                p = np.ones(n_outcomes) / n_outcomes
            return p
        return None

    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    all_p = np.array(ps_candidates)
    n_samples = len(all_p)
    
    n_clusters = min(max(2, n_samples // 5), 20)
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    kmeans_centers = kmeans.cluster_centers_
    kmeans_centers = np.clip(kmeans_centers, 0, 1)
    row_sums = kmeans_centers.sum(axis=1, keepdims=True)
    kmeans_centers /= row_sums
    
    gmm_n_components = max(2, min(n_clusters, n_samples // 10))
    gmm = GaussianMixture(n_components=gmm_n_components, random_state=42, covariance_type='full', tol=1e-8, max_iter=500, n_init=10)
    gmm.fit(all_p)
    gmm_centers = gmm.means_
    gmm_centers = np.clip(gmm_centers, 0, 1)
    row_sums = gmm_centers.sum(axis=1, keepdims=True)
    gmm_centers /= row_sums
    
    combined_centers = np.vstack([kmeans_centers, gmm_centers])
    combined_n = len(combined_centers)
    
    epsilon = 1e-8
    costs = np.zeros(combined_n)
    for i in range(combined_n):
        utilities = []
        for log in accepted_logs:
            w = np.array(log['Contract'])
            utility = np.dot(w, combined_centers[i])
            utilities.append(utility)
        if utilities:
            costs[i] = np.min(utilities) - epsilon
        else:
            costs[i] = 0.0
    
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    if rejected_logs:
        for log in rejected_logs:
            w = np.array(log['Contract'])
            for i in range(combined_n):
                utility = np.dot(w, combined_centers[i])
                if utility >= costs[i] - epsilon:
                    costs[i] = utility + epsilon
    
    for _ in range(10):
        changed = False
        for log in content:
            w = np.array(log['Contract'])
            action = log['Agent Action']
            utilities = np.dot(w, combined_centers.T) - costs
            max_utility = np.max(utilities)
            best_action = np.argmax(utilities)
            if action == 1:
                if max_utility < -epsilon:
                    costs[best_action] = np.dot(w, combined_centers[best_action]) + epsilon
                    changed = True
                else:
                    for i in range(combined_n):
                        if i != best_action and utilities[i] >= max_utility - epsilon:
                            costs[i] = np.dot(w, combined_centers[i]) + epsilon
                            changed = True
            else:
                if max_utility > -epsilon:
                    costs[best_action] = np.dot(w, combined_centers[best_action]) + epsilon
                    changed = True
        if not changed:
            break
    
    costs = np.maximum(costs, 0)
    
    unique_rows = defaultdict(list)
    for i in range(combined_n):
        key = tuple(np.round(combined_centers[i], 6))
        unique_rows[key].append(i)
    
    dedup_centers = []
    dedup_costs = []
    for key, indices in unique_rows.items():
        dedup_centers.append(combined_centers[indices[0]])
        dedup_costs.append(np.min(costs[indices]))
    
    agent_setting = np.hstack([np.array(dedup_centers), np.array(dedup_costs).reshape(-1, 1)])
    
    return agent_setting
```
