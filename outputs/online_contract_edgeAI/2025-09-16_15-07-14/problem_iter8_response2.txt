```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    def solve_lp(w, u_principal):
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * n_outcomes, method='highs')
        return res.x if res.success else None
    
    candidate_ps = []
    for log in accepted_logs:
        p_candidate = solve_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            candidate_ps.append(p_candidate)
    
    if not candidate_ps:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    candidate_ps = np.array(candidate_ps)
    n_candidates = len(candidate_ps)
    n_clusters = min(500, max(50, n_candidates // 2))
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init='auto').fit(candidate_ps)
    cluster_centers = kmeans.cluster_centers_
    cluster_centers = np.maximum(cluster_centers, 0)
    cluster_centers /= cluster_centers.sum(axis=1, keepdims=True)
    cluster_assignments = kmeans.labels_
    
    action_costs = np.zeros(n_clusters)
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    for i in range(n_clusters):
        cluster_indices = np.where(cluster_assignments == i)[0]
        if len(cluster_indices) > 0:
            utilities = accepted_contracts[cluster_indices] @ cluster_centers[i]
            action_costs[i] = np.min(utilities) - 1e-10
        else:
            action_costs[i] = 0.0
    
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_contracts @ cluster_centers.T
        max_rejected = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected + 1e-10)
    
    action_costs = np.maximum(action_costs, 0)
    
    return np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
```
