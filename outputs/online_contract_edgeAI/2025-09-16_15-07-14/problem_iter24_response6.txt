```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import normalize
from sklearn.metrics.pairwise import euclidean_distances

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.asarray(v)
    m = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    def solve_mini_lp(w, u_principal):
        w_arr = np.asarray(w)
        A_eq = np.vstack([np.ones(m), v - w_arr])
        b_eq = np.array([1.0, u_principal])
        try:
            res = linprog(-w_arr, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
            if res.success:
                p = res.x
                p[p < 1e-10] = 0
                p_sum = np.sum(p)
                if p_sum > 1e-10:
                    p /= p_sum
                else:
                    p = np.ones(m) / m
                return p
        except:
            pass
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(log['Contract'], log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    all_p = np.array(ps_candidates)
    n_samples = len(all_p)
    
    max_clusters = min(50, max(5, n_samples // 3))
    best_kmeans = None
    best_score = -np.inf
    for n_clusters in range(3, max_clusters + 1):
        kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
        score = -kmeans.inertia_
        if score > best_score:
            best_score = score
            best_kmeans = kmeans
    
    cluster_centers = best_kmeans.cluster_centers_
    cluster_centers = np.clip(cluster_centers, 0, 1)
    cluster_centers = normalize(cluster_centers, norm='l1', axis=1)
    n_clusters = cluster_centers.shape[0]
    
    action_costs = np.zeros(n_clusters)
    epsilon = 1e-8
    for i in range(n_clusters):
        cluster_indices = np.where(best_kmeans.labels_ == i)[0]
        if cluster_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = wages @ cluster_centers[i]
            action_costs[i] = np.maximum(np.min(utilities) - epsilon, 0.0)
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ cluster_centers.T - action_costs
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected_utilities + epsilon)
    
    unique_centers, unique_indices = np.unique(cluster_centers, axis=0, return_index=True)
    unique_costs = action_costs[unique_indices]
    
    n_unique = len(unique_centers)
    n_components = min(15, n_unique)
    if n_components > 1:
        gmm = GaussianMixture(n_components=n_components, random_state=42, max_iter=300, n_init=3)
        gmm.fit(unique_centers)
        gmm_centers = gmm.means_
        gmm_centers = np.clip(gmm_centers, 0, 1)
        gmm_centers = normalize(gmm_centers, norm='l1', axis=1)
        
        gmm_labels = gmm.predict(unique_centers)
        refined_costs = np.zeros(n_components)
        for i in range(n_components):
            cluster_mask = (gmm_labels == i)
            if np.any(cluster_mask):
                refined_costs[i] = np.maximum(np.min(unique_costs[cluster_mask]) - epsilon, 0.0)
        
        if rejected_logs:
            rejected_utilities_gmm = rejected_wages @ gmm_centers.T - refined_costs
            max_rejected_utilities_gmm = np.max(rejected_utilities_gmm, axis=0)
            refined_costs = np.maximum(refined_costs, max_rejected_utilities_gmm + epsilon)
        
        refined_costs = np.maximum(refined_costs, 0)
        agent_setting = np.hstack([gmm_centers, refined_costs.reshape(-1, 1)])
    else:
        agent_setting = np.hstack([unique_centers, unique_costs.reshape(-1, 1)])
    
    return agent_setting
```
