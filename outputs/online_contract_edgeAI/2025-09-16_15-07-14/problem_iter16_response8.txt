```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_outcomes = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    def solve_mini_lp(w, u_principal):
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * n_outcomes, method='highs', options={'tol': 1e-12})
        if res.success:
            p = res.x
            p = np.maximum(p, 0)
            if np.abs(p.sum() - 1) < 1e-10 and np.abs((v - w) @ p - u_principal) < 1e-10:
                return p
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    all_p = np.array(ps_candidates)
    n_clusters = min(20, max(2, len(all_p) // 3))
    
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10, tol=1e-10, max_iter=300).fit(all_p)
    kmeans_centers = kmeans.cluster_centers_
    kmeans_labels = kmeans.labels_
    
    kmeans_costs = np.zeros(n_clusters)
    accepted_contracts = np.array([log['Contract'] for log in accepted_logs])
    for i in range(n_clusters):
        cluster_mask = (kmeans_labels == i)
        if np.any(cluster_mask):
            utilities = accepted_contracts[cluster_mask] @ kmeans_centers[i]
            kmeans_costs[i] = max(np.min(utilities) - 1e-12, 0.0)
    
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_contracts @ kmeans_centers.T
        kmeans_costs = np.maximum(kmeans_costs, np.max(rejected_utilities, axis=0) + 1e-12)
    
    gmm = GaussianMixture(n_components=n_clusters, random_state=42, tol=1e-10, max_iter=300).fit(all_p)
    gmm_centers = gmm.means_
    gmm_labels = gmm.predict(all_p)
    
    gmm_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_mask = (gmm_labels == i)
        if np.any(cluster_mask):
            utilities = accepted_contracts[cluster_mask] @ gmm_centers[i]
            gmm_costs[i] = max(np.min(utilities) - 1e-12, 0.0)
    
    if rejected_logs:
        rejected_utilities = rejected_contracts @ gmm_centers.T
        gmm_costs = np.maximum(gmm_costs, np.max(rejected_utilities, axis=0) + 1e-12)
    
    distances = cdist(kmeans_centers, gmm_centers)
    cluster_similarity = np.mean(np.min(distances, axis=1))
    
    if cluster_similarity < 0.005 and len(kmeans_centers) == len(gmm_centers):
        merged_centers = (kmeans_centers + gmm_centers) / 2
        merged_costs = np.minimum(kmeans_costs, gmm_costs)
    else:
        merged_centers = np.vstack([kmeans_centers, gmm_centers])
        merged_costs = np.hstack([kmeans_costs, gmm_costs])
        merge_kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10, tol=1e-10, max_iter=300).fit(merged_centers)
        merged_centers = merge_kmeans.cluster_centers_
        merged_costs = np.zeros(n_clusters)
        for i in range(n_clusters):
            member_indices = (merge_kmeans.labels_ == i)
            if np.any(member_indices):
                merged_costs[i] = np.min(merged_costs[member_indices])
    
    for i in range(len(merged_centers)):
        merged_centers[i] = np.maximum(merged_centers[i], 0)
        total = np.sum(merged_centers[i])
        if total > 0:
            merged_centers[i] /= total
        else:
            merged_centers[i] = np.ones(n_outcomes) / n_outcomes
    
    agent_setting = np.hstack([merged_centers, merged_costs.reshape(-1, 1)])
    return agent_setting
```
