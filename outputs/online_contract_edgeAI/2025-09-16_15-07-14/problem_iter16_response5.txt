```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.array(v)
    m = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    def solve_mini_lp(w, u_principal):
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        return res.x if res.success else None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    all_p = np.array(ps_candidates)
    
    n_clusters = min(15, max(1, len(all_p) // 5))
    
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    kmeans_centers = kmeans.cluster_centers_
    kmeans_labels = kmeans.labels_
    
    kmeans_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_indices = np.where(kmeans_labels == i)[0]
        if cluster_indices.size > 0:
            contracts = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = contracts @ kmeans_centers[i]
            kmeans_costs[i] = np.min(utilities) - 1e-12
    
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_contracts @ kmeans_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        kmeans_costs = np.maximum(kmeans_costs, max_rejected_utilities + 1e-12)
    
    kmeans_costs = np.maximum(kmeans_costs, 0)
    
    gmm = GaussianMixture(n_components=n_clusters, random_state=42).fit(all_p)
    gmm_centers = gmm.means_
    gmm_labels = gmm.predict(all_p)
    
    gmm_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_indices = np.where(gmm_labels == i)[0]
        if cluster_indices.size > 0:
            contracts = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = contracts @ gmm_centers[i]
            gmm_costs[i] = np.min(utilities) - 1e-12
        else:
            gmm_costs[i] = 0.0
    
    if rejected_logs:
        rejected_utilities = rejected_contracts @ gmm_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        gmm_costs = np.maximum(gmm_costs, max_rejected_utilities + 1e-12)
    
    gmm_costs = np.maximum(gmm_costs, 0)
    
    all_centers = np.vstack([kmeans_centers, gmm_centers])
    all_costs = np.hstack([kmeans_costs, gmm_costs])
    
    final_kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_centers)
    final_centers = final_kmeans.cluster_centers_
    final_labels = final_kmeans.labels_
    
    final_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_indices = np.where(final_labels == i)[0]
        if cluster_indices.size > 0:
            final_costs[i] = np.min(all_costs[cluster_indices])
        else:
            final_costs[i] = 0.0
    
    final_centers = np.maximum(final_centers, 0)
    for i in range(n_clusters):
        final_centers[i] /= final_centers[i].sum()
    
    agent_setting = np.hstack([final_centers, final_costs.reshape(-1, 1)])
    return agent_setting
```
