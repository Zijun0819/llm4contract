```python
import numpy as np
from sklearn.cluster import KMeans
from scipy.optimize import linprog, minimize

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    contracts = np.array([log['Contract'] for log in content])
    utilities = np.array([log['Principal Utility'] for log in content])
    actions = np.array([log['Agent Action'] for log in content])
    accepted = actions == 1
    rejected = actions == -1
    
    def optimize_agent_params(n_actions, contracts_accepted, contracts_rejected):
        n_outcomes = len(v)
        p_cluster = KMeans(n_clusters=n_actions, random_state=42, n_init=10).fit(contracts_accepted if len(contracts_accepted) > 0 else contracts).cluster_centers_
        p0 = p_cluster / p_cluster.sum(axis=1, keepdims=True)
        
        def cost_fn(c, p=p0, w_acc=contracts_accepted, w_rej=contracts_rejected):
            c = np.maximum(c, 0)
            if len(w_acc) > 0:
                util_acc = p @ w_acc.T - c[:, None]
                ir_violation = np.minimum(util_acc, 0).sum()
            else:
                ir_violation = 0
            if len(w_rej) > 0:
                util_rej = p @ w_rej.T - c[:, None]
                ic_violation = np.maximum(util_rej, 0).sum()
            else:
                ic_violation = 0
            return ir_violation + ic_violation
        
        res = minimize(cost_fn, np.zeros(n_actions), method='L-BFGS-B', bounds=[(0, None)] * n_actions)
        c_opt = res.x
        return np.hstack([p0, c_opt.reshape(-1, 1)])
    
    for n in range(3, 13):
        try:
            agent_setting = optimize_agent_params(n, contracts[accepted], contracts[rejected])
            if np.all(agent_setting[:, -1] >= 0):
                util_acc_check = agent_setting[:, :-1] @ contracts[accepted].T - agent_setting[:, -1][:, None]
                util_rej_check = agent_setting[:, :-1] @ contracts[rejected].T - agent_setting[:, -1][:, None]
                if np.all(util_acc_check.max(axis=0) >= -1e-6) and np.all(util_rej_check.max(axis=0) < 1e-6):
                    return agent_setting
        except:
            continue
    return optimize_agent_params(1, contracts[accepted], contracts[rejected])
```
