```python
import numpy as np
from sklearn.cluster import KMeans
from scipy.optimize import linprog

def agent_solver_v2(v: np.ndarray, content: list) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    ps_candidates = []
    for log in accepted_logs:
        w = np.array(log['Contract'])
        u_principal = log['Principal Utility']
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        if res.success:
            ps_candidates.append(res.x)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    n_clusters = min(max(2, len(accepted_logs) // 5), 50)
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    cluster_centers = kmeans.cluster_centers_
    cluster_assignments = kmeans.labels_
    
    action_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_indices = np.where(cluster_assignments == i)[0]
        if cluster_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = np.sum(wages * cluster_centers[i], axis=1)
            min_utility = np.min(utilities)
            action_costs[i] = max(0, min_utility - 1e-6)
        else:
            action_costs[i] = 0.0
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        for i in range(n_clusters):
            utilities = np.sum(rejected_wages * cluster_centers[i], axis=1)
            max_utility = np.max(utilities)
            if max_utility >= action_costs[i]:
                action_costs[i] = max_utility + 1e-6
    
    agent_setting = np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
    return agent_setting
```
