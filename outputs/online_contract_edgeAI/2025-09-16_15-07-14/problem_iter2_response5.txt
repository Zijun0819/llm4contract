```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    if not accepted_logs:
        return np.array([[1/len(v)]*len(v) + [0.0]])
    
    def solve_p(w, u):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)]*m, method='highs')
        return res.x if res.success else None
    
    candidates = []
    for log in accepted_logs:
        p = solve_p(np.array(log['Contract']), log['Principal Utility'])
        if p is not None:
            candidates.append(p)
    
    if not candidates:
        return np.array([[1/len(v)]*len(v) + [0.0]])
    
    candidates = np.array(candidates)
    n_components = min(5, len(candidates))
    while n_components >= 1:
        try:
            gmm = GaussianMixture(n_components=n_components, random_state=0)
            gmm.fit(candidates)
            p0 = gmm.means_
            break
        except:
            n_components -= 1
    if n_components == 0:
        p0 = np.mean(candidates, axis=0, keepdims=True)
        n_components = 1
    
    c_vals = np.zeros(n_components)
    for a in range(n_components):
        accepted_utils = []
        for log in accepted_logs:
            w = np.array(log['Contract'])
            u = p0[a] @ w
            accepted_utils.append(u)
        if accepted_utils:
            min_util = min(accepted_utils)
            c_vals[a] = min_util
        else:
            c_vals[a] = 0.0
    
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    for log in rejected_logs:
        w = np.array(log['Contract'])
        utils = p0 @ w
        for a in range(n_components):
            if utils[a] > c_vals[a]:
                c_vals[a] = utils[a]
    
    c_vals = np.maximum(c_vals, 0.0)
    agent_setting = np.hstack([p0, c_vals.reshape(-1, 1)])
    return agent_setting
```
