```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans

def agent_solver(v, content):
    accepted_data = [log for log in content if log['Agent Action'] == 1]
    rejected_data = [log for log in content if log['Agent Action'] == -1]
    n_accepted = len(accepted_data)
    n_outcomes = len(v)
    
    if n_accepted == 0:
        return np.array([]).reshape(0, n_outcomes + 1)
    
    max_actions = min(15, max(3, int(np.sqrt(n_accepted))))
    kmeans = KMeans(n_clusters=max_actions, random_state=42, n_init=10)
    
    all_w = np.array([log['Contract'] for log in accepted_data])
    u = np.array([log['Principal Utility'] for log in accepted_data])
    proj_constraints = []
    
    for i in range(n_accepted):
        A_eq = np.vstack([np.ones(n_outcomes), v - all_w[i]])
        b_eq = np.array([1, u[i]])
        res = linprog(all_w[i], A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * n_outcomes, method='highs')
        if res.success:
            proj_constraints.append(res.x)
        else:
            proj_constraints.append(np.zeros(n_outcomes))
    
    proj_constraints = np.array(proj_constraints)
    kmeans.fit(proj_constraints)
    centroids = kmeans.cluster_centers_
    cluster_assignments = kmeans.predict(proj_constraints)
    
    costs = np.zeros(max_actions)
    for a in range(max_actions):
        indices = np.where(cluster_assignments == a)[0]
        if len(indices) > 0:
            w_cluster = all_w[indices]
            utility_cluster = u[indices]
            res_c = linprog([-1], A_ub=-centroids[a].reshape(1, -1), b_ub=[-np.min(w_cluster @ centroids[a])], bounds=(0, None), method='highs')
            if res_c.success:
                costs[a] = res_c.x[0]
        else:
            costs[a] = 0.0
    
    if rejected_data:
        rej_w = np.array([log['Contract'] for log in rejected_data])
        for a in range(max_actions):
            feasible_max = centroids[a] @ rej_w.T
            cost_lb = np.max(feasible_max)
            if cost_lb > costs[a]:
                costs[a] = cost_lb
    
    valid_indices = [a for a in range(max_actions) if np.all(centroids[a] >= 0) and np.sum(centroids[a]) == 1]
    centroids_valid = centroids[valid_indices]
    costs_valid = costs[valid_indices]
    
    agent_setting = np.hstack([centroids_valid, costs_valid.reshape(-1, 1)])
    return agent_setting
```
