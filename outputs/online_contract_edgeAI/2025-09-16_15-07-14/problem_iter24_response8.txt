```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        if res.success:
            p = res.x
            p = np.clip(p, 0, None)
            p_sum = np.sum(p)
            if p_sum > 1e-10:
                p /= p_sum
            else:
                p = np.ones_like(p) / m
            return p
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    
    n_components = min(10, max(1, len(all_p) // 3))
    gmm = GaussianMixture(n_components=n_components, random_state=42, n_init=5)
    gmm.fit(all_p)
    cluster_centers = gmm.means_
    cluster_centers = np.clip(cluster_centers, 0, None)
    sums = np.sum(cluster_centers, axis=1, keepdims=True)
    sums[sums < 1e-10] = 1
    cluster_centers /= sums
    
    action_costs = np.zeros(n_components)
    epsilon = 1e-8
    probs = gmm.predict_proba(all_p)
    for i in range(n_components):
        member_mask = probs[:, i] > 0.5
        if np.any(member_mask):
            wages = np.array([accepted_logs[j]['Contract'] for j in np.where(member_mask)[0]])
            utilities = np.sum(wages * cluster_centers[i], axis=1)
            action_costs[i] = np.min(utilities) - epsilon
        else:
            action_costs[i] = 0
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ cluster_centers.T - action_costs
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected_utilities + epsilon)
    
    action_costs = np.maximum(action_costs, 0)
    
    unique_centers, unique_indices = np.unique(cluster_centers, axis=0, return_index=True)
    unique_costs = action_costs[unique_indices]
    
    agent_setting = np.hstack([unique_centers, unique_costs.reshape(-1, 1)])
    return agent_setting
```
