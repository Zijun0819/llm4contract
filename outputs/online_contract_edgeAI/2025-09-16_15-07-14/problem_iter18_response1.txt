```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import normalize

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.array(v)
    m = len(v)
    
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    def solve_mini_lp(w, u_principal):
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        if res.success:
            p = np.clip(res.x, 0, 1)
            p_sum = p.sum()
            if p_sum > 0:
                return p / p_sum
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    all_p = np.array(ps_candidates)
    n_candidates = len(all_p)
    n_clusters = min(max(2, n_candidates // 5), 20)
    
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    cluster_centers = np.clip(kmeans.cluster_centers_, 0, 1)
    cluster_centers = normalize(cluster_centers, norm='l1', axis=1)
    
    epsilon = 1e-10
    action_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_indices = np.where(kmeans.labels_ == i)[0]
        if cluster_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = wages @ cluster_centers[i]
            action_costs[i] = np.maximum(np.min(utilities) - epsilon, 0.0)
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ cluster_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected_utilities + epsilon)
    
    gmm_n_components = max(2, min(n_clusters, n_candidates // 10))
    gmm = GaussianMixture(n_components=gmm_n_components, random_state=42, covariance_type='diag').fit(all_p)
    gmm_centers = np.clip(gmm.means_, 0, 1)
    gmm_centers = normalize(gmm_centers, norm='l1', axis=1)
    
    refined_costs = np.zeros(gmm_n_components)
    gmm_labels = gmm.predict(all_p)
    for i in range(gmm_n_components):
        cluster_indices = np.where(gmm_labels == i)[0]
        if cluster_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = wages @ gmm_centers[i]
            refined_costs[i] = np.maximum(np.min(utilities) - epsilon, 0.0)
    
    if rejected_logs:
        rejected_utilities_gmm = rejected_wages @ gmm_centers.T
        max_rejected_utilities_gmm = np.max(rejected_utilities_gmm, axis=0)
        refined_costs = np.maximum(refined_costs, max_rejected_utilities_gmm + epsilon)
    
    all_centers = np.vstack([cluster_centers, gmm_centers])
    all_costs = np.concatenate([action_costs, refined_costs])
    
    unique_centers, unique_indices = np.unique(all_centers, axis=0, return_index=True)
    unique_costs = all_costs[unique_indices]
    
    valid_indices = np.where(unique_costs >= 0)[0]
    unique_centers = unique_centers[valid_indices]
    unique_costs = unique_costs[valid_indices]
    
    if len(unique_centers) == 0:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    agent_setting = np.hstack([unique_centers, unique_costs.reshape(-1, 1)])
    return agent_setting
```
