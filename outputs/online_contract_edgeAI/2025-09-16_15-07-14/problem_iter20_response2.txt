```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    v = np.asarray(v)
    m = len(v)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    def solve_mini_lp(w, u_principal):
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1.0, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        if res.success:
            p = res.x
            p[p < 0] = 0
            p_sum = np.sum(p)
            if p_sum > 1e-10:
                p /= p_sum
                return p
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(m), np.zeros((m, 1))])
    
    all_p = np.array(ps_candidates)
    epsilon = 1e-8
    
    n_clusters = min(10, max(2, len(all_p) // 10))
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    kmeans_centers = kmeans.cluster_centers_
    kmeans_centers = np.clip(kmeans_centers, 0, 1)
    kmeans_centers = kmeans_centers / kmeans_centers.sum(axis=1, keepdims=True)
    
    kmeans_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_indices = np.where(kmeans.labels_ == i)[0]
        if cluster_indices.size > 0:
            contracts = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = contracts @ kmeans_centers[i]
            kmeans_costs[i] = np.min(utilities) - epsilon
    
    if rejected_logs:
        rejected_contracts = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_contracts @ kmeans_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        kmeans_costs = np.maximum(kmeans_costs, max_rejected_utilities + epsilon)
    
    kmeans_costs = np.maximum(kmeans_costs, 0)
    
    gmm_n_components = max(2, n_clusters // 2)
    gmm = GaussianMixture(n_components=gmm_n_components, random_state=42)
    gmm.fit(all_p)
    gmm_centers = gmm.means_
    gmm_centers = np.clip(gmm_centers, 0, 1)
    gmm_centers = gmm_centers / gmm_centers.sum(axis=1, keepdims=True)
    
    gmm_assignments = gmm.predict(all_p)
    gmm_costs = np.zeros(gmm_n_components)
    for i in range(gmm_n_components):
        cluster_indices = np.where(gmm_assignments == i)[0]
        if cluster_indices.size > 0:
            contracts = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = contracts @ gmm_centers[i]
            gmm_costs[i] = np.min(utilities) - epsilon
        else:
            gmm_costs[i] = 0.0
    
    if rejected_logs:
        rejected_utilities_gmm = rejected_contracts @ gmm_centers.T
        max_rejected_utilities_gmm = np.max(rejected_utilities_gmm, axis=0)
        gmm_costs = np.maximum(gmm_costs, max_rejected_utilities_gmm + epsilon)
    
    gmm_costs = np.maximum(gmm_costs, 0)
    
    combined_centers = np.vstack([kmeans_centers, gmm_centers])
    combined_costs = np.hstack([kmeans_costs, gmm_costs])
    
    distances = cdist(combined_centers, combined_centers)
    np.fill_diagonal(distances, np.inf)
    merge_threshold = 1e-5
    to_merge = []
    merged = set()
    for i in range(len(combined_centers)):
        if i in merged:
            continue
        merge_group = [i]
        for j in range(i + 1, len(combined_centers)):
            if j not in merged and distances[i, j] < merge_threshold:
                merge_group.append(j)
                merged.add(j)
        to_merge.append(merge_group)
    
    final_centers = []
    final_costs = []
    for group in to_merge:
        new_center = np.mean(combined_centers[group], axis=0)
        new_center /= np.sum(new_center)
        new_cost = np.min(combined_costs[group])
        final_centers.append(new_center)
        final_costs.append(new_cost)
    
    final_centers = np.array(final_centers)
    final_costs = np.array(final_costs)
    
    for i in range(len(final_centers)):
        for log in accepted_logs:
            w = np.array(log['Contract'])
            utility_i = w @ final_centers[i] - final_costs[i]
            other_utilities = w @ final_centers.T - final_costs
            max_other = np.max(np.delete(other_utilities, i))
            if utility_i < max_other - epsilon:
                final_costs[i] = w @ final_centers[i] - max_other + epsilon
    
    for log in rejected_logs:
        w = np.array(log['Contract'])
        best_utility = np.max(w @ final_centers.T - final_costs)
        if best_utility > -epsilon:
            best_idx = np.argmax(w @ final_centers.T - final_costs)
            final_costs[best_idx] = w @ final_centers[best_idx] + epsilon
    
    final_costs = np.maximum(final_costs, 0)
    
    agent_setting = np.hstack([final_centers, final_costs.reshape(-1, 1)])
    return agent_setting
```
