```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture

def agent_solver(v, content):
    n_actions = 10
    m_outcomes = len(v)
    logs = content
    
    def solve_p_for_log(log):
        if log['Agent Action'] != 1:
            return None
        w = np.array(log['Contract'])
        u_principal = log['Principal Utility']
        res = linprog(w, A_eq=[np.ones(m_outcomes), v - w], b_eq=[1, u_principal], bounds=[(0,1)]*m_outcomes, method='highs')
        return res.x if res.success else None
    
    p_candidates = []
    for log in logs:
        p = solve_p_for_log(log)
        if p is not None:
            p_candidates.append(p)
    
    if not p_candidates:
        p_default = np.ones(m_outcomes) / m_outcomes
        c_default = 0.0
        return np.hstack([p_default.reshape(1,-1), np.array([[c_default]])])
    
    p_candidates = np.array(p_candidates)
    gm = GaussianMixture(n_components=min(n_actions, len(p_candidates)), random_state=0).fit(p_candidates)
    p_centers = gm.means_
    n_actions_actual = p_centers.shape[0]
    
    assigns = np.full(len(logs), -1)
    for i, log in enumerate(logs):
        if log['Agent Action'] == 1:
            w = np.array(log['Contract'])
            utils = p_centers @ w
            assigns[i] = np.argmax(utils)
    
    c_vals = np.zeros(n_actions_actual)
    for a in range(n_actions_actual):
        idx = np.where(assigns == a)[0]
        if len(idx) > 0:
            wages = np.array([logs[i]['Contract'] for i in idx])
            min_wages = wages.min(axis=0)
            c_vals[a] = p_centers[a] @ min_wages
        else:
            c_vals[a] = 0.0
    
    rej_indices = [i for i, log in enumerate(logs) if log['Agent Action'] == -1]
    if rej_indices:
        rej_wages = np.array([logs[i]['Contract'] for i in rej_indices])
        max_rej_utils = (p_centers @ rej_wages.T).max(axis=1)
        c_vals = np.maximum(c_vals, max_rej_utils)
    
    agent_setting = np.hstack([p_centers, c_vals.reshape(-1,1)])
    return agent_setting
```
