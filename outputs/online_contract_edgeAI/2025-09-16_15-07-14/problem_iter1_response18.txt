```python
import numpy as np
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    L = len(content)
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    
    def solve_p(w, u):
        m = len(w)
        A_eq = [np.ones(m), v - w]
        b_eq = [1, u]
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)]*m, method='highs')
        return res.x if res.success else None

    candidates = []
    for log in accepted_logs:
        p = solve_p(log['Contract'], log['Principal Utility'])
        if p is not None:
            candidates.append(p)
    if not candidates:
        return np.array([[1/12]*12 + [0.0]])
    
    candidates = np.array(candidates)
    n_candidates = 5
    while n_candidates >= 1:
        try:
            gmm = GaussianMixture(n_components=n_candidates, random_state=0)
            gmm.fit(candidates)
            p0 = gmm.means_
            break
        except:
            n_candidates -= 1
    if n_candidates == 0:
        p0 = np.mean(candidates, axis=0, keepdims=True)
        n_candidates = 1
    
    assignments = np.full(L, -1, dtype=int)
    for i, log in enumerate(content):
        w = np.array(log['Contract'])
        utils = p0 @ w
        best_util_idx = np.argmax(utils)
        assignments[i] = best_util_idx
    
    c_vals = np.zeros(n_candidates)
    for a in range(n_candidates):
        accepted_idxs = [i for i in range(L) if assignments[i] == a and content[i]['Agent Action'] == 1]
        if accepted_idxs:
            min_util = min(p0[a] @ np.array(content[i]['Contract']) for i in accepted_idxs)
            c_vals[a] = min_util
        else:
            c_vals[a] = 0.0
    
    rej_wages = [np.array(log['Contract']) for log in content if log['Agent Action'] == -1]
    if rej_wages:
        max_rej_util = np.max(np.array([p0 @ w for w in rej_wages]), axis=0)
        for a in range(n_candidates):
            if max_rej_util[a] > c_vals[a]:
                c_vals[a] = max_rej_util[a]
    
    final_c_vals = np.zeros(n_candidates)
    for a in range(n_candidates):
        mask = assignments == a
        if np.any(mask):
            best_wage = max([content[i]['Contract'] for i in np.where(mask)[0]], key=lambda w: p0[a] @ np.array(w))
            final_c_vals[a] = p0[a] @ np.array(best_wage)
    
    for a in range(n_candidates):
        c_vals[a] = max(c_vals[a], 0.0)
    
    agent_setting = np.hstack((p0, c_vals.reshape(-1, 1)))
    return agent_setting
```
