```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    n_outcomes = len(v)
    
    if not accepted_logs:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    def solve_mini_lp(w, u_principal):
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * n_outcomes, method='highs', options={'tol': 1e-12})
        if res.success:
            p = res.x
            p = np.clip(p, 0, 1)
            p_sum = np.sum(p)
            if p_sum < 1e-12:
                p = np.ones(n_outcomes) / n_outcomes
            else:
                p /= p_sum
            return p
        return None

    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(n_outcomes), np.zeros((n_outcomes, 1))])
    
    all_p = np.array(ps_candidates)
    row_sums = all_p.sum(axis=1, keepdims=True)
    all_p = np.where(row_sums > 0, all_p / row_sums, all_p)
    
    n_clusters = min(max(1, len(all_p) // 3), 20)
    gmm = GaussianMixture(n_components=n_clusters, random_state=42, covariance_type='full', tol=1e-8, max_iter=500, n_init=20)
    gmm.fit(all_p)
    centers = gmm.means_
    assignments = gmm.predict(all_p)
    
    costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_indices = np.where(assignments == i)[0]
        if cluster_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_indices])
            utilities = wages @ centers[i]
            costs[i] = np.min(utilities) - 1e-12
        else:
            costs[i] = 0.0
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ centers.T
        max_rejected = np.max(rejected_utilities, axis=0)
        costs = np.maximum(costs, max_rejected + 1e-12)
    
    costs = np.maximum(costs, 0)
    
    for _ in range(10):
        changed = False
        for log in accepted_logs:
            w = np.array(log['Contract'])
            utilities = w @ centers.T - costs
            best_action = np.argmax(utilities)
            if utilities[best_action] < -1e-12:
                costs[best_action] = w @ centers[best_action] + 1e-12
                changed = True
            else:
                for i in range(n_clusters):
                    if i != best_action and utilities[i] >= utilities[best_action] - 1e-12:
                        costs[i] = w @ centers[i] + 1e-12
                        changed = True
        for log in rejected_logs:
            w = np.array(log['Contract'])
            utilities = w @ centers.T - costs
            best_utility = np.max(utilities)
            if best_utility > -1e-12:
                best_action = np.argmax(utilities)
                costs[best_action] = w @ centers[best_action] + 1e-12
                changed = True
        if not changed:
            break
    
    distances = cdist(centers, centers)
    np.fill_diagonal(distances, np.inf)
    merge_threshold = 0.005
    merged_indices = set()
    new_centers = []
    new_costs = []
    
    for i in range(n_clusters):
        if i in merged_indices:
            continue
        merge_group = [i]
        for j in range(i + 1, n_clusters):
            if j not in merged_indices and distances[i, j] < merge_threshold:
                merge_group.append(j)
                merged_indices.add(j)
        merged_center = np.mean(centers[merge_group], axis=0)
        merged_center /= np.sum(merged_center)
        merged_cost = np.min(costs[merge_group])
        new_centers.append(merged_center)
        new_costs.append(merged_cost)
    
    if new_centers:
        centers = np.array(new_centers)
        costs = np.array(new_costs)
    
    row_sums = centers.sum(axis=1, keepdims=True)
    centers = np.where(row_sums > 0, centers / row_sums, centers)
    
    return np.hstack([centers, costs.reshape(-1, 1)])
```
