```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans

def agent_solver(v: np.ndarray, content: list) -> np.ndarray:
    # Extract accepted and rejected logs
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    n_outcomes = len(v)
    
    # Function to infer probability vector using LP
    def infer_probability(w, u_principal):
        # Constraints: sum(p)=1, (v-w)@p = u_principal, p>=0
        A_eq = np.vstack([np.ones(n_outcomes), v - w])
        b_eq = np.array([1.0, u_principal])
        bounds = [(0, 1)] * n_outcomes
        
        try:
            # Try linear programming first
            res = linprog(c=-w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
            if res.success:
                return res.x
            else:
                # Fallback to optimization with constraints
                from scipy.optimize import minimize
                res = minimize(
                    lambda p: -np.dot(w, p),
                    x0=np.ones(n_outcomes)/n_outcomes,
                    constraints=[
                        {'type': 'eq', 'fun': lambda p: np.sum(p) - 1},
                        {'type': 'eq', 'fun': lambda p: np.dot(v - w, p) - u_principal}
                    ],
                    bounds=bounds,
                    method='SLSQP'
                )
                if res.success:
                    return res.x
                else:
                    return None
        except:
            return None
    
    # Collect candidate probability vectors from accepted contracts
    candidate_ps = []
    for log in accepted_logs:
        p_candidate = infer_probability(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            candidate_ps.append(p_candidate)
    
    # If no candidates found, return a default setting
    if not candidate_ps:
        default_p = np.eye(n_outcomes)
        default_costs = np.zeros(n_outcomes)
        return np.hstack([default_p, default_costs.reshape(-1, 1)])
    
    candidate_ps = np.array(candidate_ps)
    
    # Determine optimal number of clusters
    n_clusters = min(len(candidate_ps), n_outcomes, 30)
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(candidate_ps)
    cluster_centers = kmeans.cluster_centers_
    # Normalize cluster centers to ensure valid probabilities
    cluster_centers = np.clip(cluster_centers, 0, None)
    cluster_centers /= cluster_centers.sum(axis=1, keepdims=True)
    
    # Calculate minimum costs for each action from accepted logs
    action_costs = np.zeros(n_clusters)
    accepted_wages = np.array([log['Contract'] for log in accepted_logs])
    for i in range(n_clusters):
        cluster_p = cluster_centers[i]
        utilities = accepted_wages @ cluster_p
        action_costs[i] = np.min(utilities) if len(utilities) > 0 else 0.0
    
    # Adjust costs based on rejected logs to ensure IR constraints
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ cluster_centers.T
        max_rejected_per_action = np.max(rejected_utilities, axis=0)
        # Ensure cost is at least the maximum utility from rejected contracts
        action_costs = np.maximum(action_costs, max_rejected_per_action)
    
    # Ensure non-negative costs
    action_costs = np.maximum(action_costs, 0)
    
    # Combine into agent setting matrix
    agent_setting = np.hstack([cluster_centers, action_costs.reshape(-1, 1)])
    return agent_setting
```
