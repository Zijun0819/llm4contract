```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.metrics import pairwise_distances_argmin_min
from scipy.spatial.distance import cdist

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    accepted_logs = [log for log in content if log['Agent Action'] == 1]
    rejected_logs = [log for log in content if log['Agent Action'] == -1]
    
    if not accepted_logs:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    def solve_mini_lp(w, u_principal):
        m = len(w)
        A_eq = np.vstack([np.ones(m), v - w])
        b_eq = np.array([1, u_principal])
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * m, method='highs')
        if res.success:
            return np.clip(res.x, 0, 1)
        return None
    
    ps_candidates = []
    for log in accepted_logs:
        p_candidate = solve_mini_lp(np.array(log['Contract']), log['Principal Utility'])
        if p_candidate is not None:
            ps_candidates.append(p_candidate)
    
    if not ps_candidates:
        return np.hstack([np.eye(len(v)), np.zeros((len(v), 1))])
    
    all_p = np.array(ps_candidates)
    epsilon = 1e-8
    n_clusters = min(500, len(all_p))
    
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(all_p)
    cluster_centers = kmeans.cluster_centers_
    cluster_assignments = kmeans.labels_
    
    action_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_member_indices = np.where(cluster_assignments == i)[0]
        if cluster_member_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_member_indices])
            utilities = np.sum(wages * cluster_centers[i], axis=1)
            action_costs[i] = np.min(utilities) - epsilon
        else:
            action_costs[i] = 0.0
    
    if rejected_logs:
        rejected_wages = np.array([log['Contract'] for log in rejected_logs])
        rejected_utilities = rejected_wages @ cluster_centers.T
        max_rejected_utilities = np.max(rejected_utilities, axis=0)
        action_costs = np.maximum(action_costs, max_rejected_utilities + epsilon)
    
    action_costs = np.maximum(action_costs, 0)
    
    gmm = GaussianMixture(n_components=n_clusters, random_state=42)
    gmm.fit(all_p)
    gmm_centers = gmm.means_
    gmm_assignments = gmm.predict(all_p)
    
    refined_costs = np.zeros(n_clusters)
    for i in range(n_clusters):
        cluster_member_indices = np.where(gmm_assignments == i)[0]
        if cluster_member_indices.size > 0:
            wages = np.array([accepted_logs[j]['Contract'] for j in cluster_member_indices])
            utilities = np.sum(wages * gmm_centers[i], axis=1)
            refined_costs[i] = np.min(utilities) - epsilon
        else:
            refined_costs[i] = 0.0
    
    if rejected_logs:
        rejected_utilities_gmm = rejected_wages @ gmm_centers.T
        max_rejected_utilities_gmm = np.max(rejected_utilities_gmm, axis=0)
        refined_costs = np.maximum(refined_costs, max_rejected_utilities_gmm + epsilon)
    
    refined_costs = np.maximum(refined_costs, 0)
    
    combined_centers = np.vstack([cluster_centers, gmm_centers])
    combined_costs = np.hstack([action_costs, refined_costs])
    
    distances = cdist(combined_centers, combined_centers)
    np.fill_diagonal(distances, np.inf)
    to_merge = distances < 1e-6
    merged_indices = set()
    unique_centers = []
    unique_costs = []
    
    for i in range(len(combined_centers)):
        if i not in merged_indices:
            similar_indices = np.where(to_merge[i])[0]
            merged_indices.update(similar_indices)
            unique_center = np.mean(combined_centers[similar_indices], axis=0)
            unique_cost = np.min(combined_costs[similar_indices])
            unique_centers.append(unique_center)
            unique_costs.append(unique_cost)
    
    unique_centers = np.array(unique_centers)
    unique_costs = np.array(unique_costs)
    
    if len(unique_centers) > n_clusters:
        final_kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10).fit(unique_centers)
        final_centers = final_kmeans.cluster_centers_
        final_costs = np.zeros(n_clusters)
        for i in range(n_clusters):
            member_indices = np.where(final_kmeans.labels_ == i)[0]
            if member_indices.size > 0:
                final_costs[i] = np.min(unique_costs[member_indices])
            else:
                final_costs[i] = 0.0
    else:
        final_centers = unique_centers
        final_costs = unique_costs
    
    final_centers = np.clip(final_centers, 0, 1)
    row_sums = final_centers.sum(axis=1, keepdims=True)
    final_centers = np.where(row_sums > 0, final_centers / row_sums, final_centers)
    final_costs = np.maximum(final_costs, 0)
    
    agent_setting = np.hstack([final_centers, final_costs.reshape(-1, 1)])
    return agent_setting
```
