```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.preprocessing import normalize


def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 5
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
        A_eq = [np.ones(m_outcomes), v - w]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m_outcomes
        res = linprog(np.zeros_like(w), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    accepted_ps = []
    accepted_logs = []
    for log in content:
        if log['Agent Action'] == 1:
            w_i = np.array(log['Contract'])
            u_i = log['Principal Utility']
            p_i = mini_lp_p(w_i, u_i)
            if p_i is not None:
                accepted_ps.append(p_i)
                accepted_logs.append(log)

    if not accepted_ps:
        return np.hstack([np.ones((1, m_outcomes)) / m_outcomes, np.zeros((1, 1))])

    all_p = np.array(accepted_ps)
    kmeans = KMeans(n_clusters=n_candidates, random_state=0, n_init=10)
    kmeans.fit(all_p)
    p0 = kmeans.cluster_centers_

    c_init = np.zeros(n_candidates)
    for k in range(n_candidates):
        cluster_indices = np.where(kmeans.labels_ == k)[0]
        if len(cluster_indices) > 0:
            utilities = []
            for i in cluster_indices:
                log = accepted_logs[i]
                w = np.array(log['Contract'])
                utilities.append(p0[k] @ w)
            c_init[k] = np.min(utilities)
        else:
            c_init[k] = 0.0

    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    agent_setting = np.maximum(agent_setting, 0)
    agent_setting[:, :m_outcomes] = normalize(agent_setting[:, :m_outcomes], axis=1, norm='l1')

    return agent_setting
```
