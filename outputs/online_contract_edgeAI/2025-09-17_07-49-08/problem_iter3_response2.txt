```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 3
    m_outcomes = v.shape[0]
    
    accepted_contracts = []
    accepted_utilities = []
    for log in content:
        if log['Agent Action'] == 1:
            accepted_contracts.append(np.array(log['Contract']))
            accepted_utilities.append(log['Principal Utility'])

    if not accepted_contracts:
        return np.array([[1/m_outcomes] * m_outcomes + [0]])

    def calculate_expected_utility(p, contract):
        return np.dot(p, contract)

    def is_consistent(p, c, logs):
        for log in logs:
            contract = np.array(log['Contract'])
            action = log['Agent Action']
            expected_utility = calculate_expected_utility(p, contract) - c
            if action == 1 and expected_utility < -1e-6:
                return False
            if action == -1 and expected_utility > 1e-6:
                return False
        return True

    candidate_ps = []
    for contract, utility in zip(accepted_contracts, accepted_utilities):
        def obj(p):
            return 0
        
        A_eq = [[1] * m_outcomes, v - contract]
        b_eq = [1, utility]
        bounds = [(0, 1)] * m_outcomes
        
        res = linprog(obj, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if res.success:
            candidate_ps.append(res.x)

    if not candidate_ps:
        return np.array([[1/m_outcomes] * m_outcomes + [0]])
        
    all_p = np.array(candidate_ps)
    kmeans = KMeans(n_clusters=min(n_candidates, len(all_p)), random_state=0, n_init=10, init='k-means++')
    kmeans.fit(all_p)
    p0 = kmeans.cluster_centers_

    agent_settings = []
    for p in p0:
        c = 0
        for log in content:
            if log['Agent Action'] == 1:
                contract = np.array(log['Contract'])
                c = max(c, np.dot(p, contract))
        
        if is_consistent(p, c, content):
            agent_settings.append(np.concatenate([p, [c]]))

    if not agent_settings:
        return np.array([[1/m_outcomes] * m_outcomes + [0]])

    return np.array(agent_settings)
```
