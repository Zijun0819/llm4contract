```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.preprocessing import normalize


def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 5
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
        A_eq = [np.ones(m_outcomes), v - w]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m_outcomes
        res = linprog(np.zeros_like(w), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    accepted_contracts = []
    accepted_utilities = []
    for log in content:
        if log['Agent Action'] == 1:
            accepted_contracts.append(log['Contract'])
            accepted_utilities.append(log['Principal Utility'])

    if not accepted_contracts:
        return np.array([[1/m_outcomes] * m_outcomes + [0.0]])

    all_p = []
    for w, u in zip(accepted_contracts, accepted_utilities):
        p = mini_lp_p(np.array(w), u)
        if p is not None:
            all_p.append(p)

    if not all_p:
        return np.array([[1/m_outcomes] * m_outcomes + [0.0]])

    all_p = np.array(all_p)

    kmeans = KMeans(n_clusters=n_candidates, random_state=0, n_init=10)
    kmeans.fit(all_p)
    p0 = kmeans.cluster_centers_

    c_init = np.zeros(n_candidates)
    for i in range(n_candidates):
        costs = []
        for j in range(len(accepted_contracts)):
            costs.append(p0[i] @ np.array(accepted_contracts[j]))
        if costs:
            c_init[i] = min(costs)
        else:
            c_init[i] = 0.0

    for i, log in enumerate(content):
        if log['Agent Action'] == -1:
            w = np.array(log['Contract'])
            utils = p0 @ w
            for k in range(n_candidates):
                c_init[k] = max(c_init[k], utils[k])

    agent_setting = np.hstack([normalize(p0, axis=1), c_init[:, np.newaxis]])
    return agent_setting
```
