```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.preprocessing import normalize


def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 5
    m_outcomes = v.shape[0]
    L = len(content)
    accepted_contracts = []
    rejected_contracts = []
    for log in content:
        if log['Agent Action'] == 1:
            accepted_contracts.append(log['Contract'])
        else:
            rejected_contracts.append(log['Contract'])
    if not accepted_contracts:
        return np.zeros((0, m_outcomes + 1))
    accepted_contracts = np.array(accepted_contracts)
    kmeans = KMeans(n_clusters=n_candidates, random_state=0, n_init=10).fit(accepted_contracts)
    p0 = normalize(np.abs(kmeans.cluster_centers_), axis=1, norm='l1')
    c_init = np.zeros(n_candidates)
    for i in range(n_candidates):
        c_init[i] = np.min(np.dot(accepted_contracts, p0[i]))
    if rejected_contracts:
        rejected_contracts = np.array(rejected_contracts)
        max_utils = np.max(np.dot(rejected_contracts, p0.T), axis=0)
        c_init = np.maximum(c_init, max_utils)
    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    return agent_setting
```
