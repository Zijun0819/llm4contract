```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.preprocessing import normalize

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 5
    m_outcomes = v.shape[0]
    L = len(content)

    def solve_lp(w: np.ndarray, u: float):
        c = -v
        A_eq = [np.ones(m_outcomes), w - v]
        b_eq = [1, u]
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    accept_contracts = [log['Contract'] for log in content if log['Agent Action'] == 1]
    accept_utilities = [log['Principal Utility'] for log in content if log['Agent Action'] == 1]

    if not accept_contracts:
        return np.array([])

    all_ps = []
    for w, u in zip(accept_contracts, accept_utilities):
        p = solve_lp(np.array(w), u)
        if p is not None:
            all_ps.append(p)

    if not all_ps:
        return np.array([])

    all_ps = np.array(all_ps)
    if len(all_ps) < n_candidates:
        n_candidates = len(all_ps)

    kmeans = KMeans(n_clusters=n_candidates, random_state=0, n_init=10)
    clusters = kmeans.fit(all_ps)
    p0 = clusters.cluster_centers_
    p0 = normalize(p0, axis=1, norm='l1')

    costs = np.zeros(n_candidates)
    for i in range(n_candidates):
        min_cost = float('inf')
        for log in content:
            if log['Agent Action'] == 1:
                expected_utility = p0[i] @ np.array(log['Contract'])
                if expected_utility > 0:
                    min_cost = min(min_cost, expected_utility)
        costs[i] = max(0, min_cost)

    agent_setting = np.hstack([p0, costs[:, np.newaxis]])
    return agent_setting
```
