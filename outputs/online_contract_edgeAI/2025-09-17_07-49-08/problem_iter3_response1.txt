```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 3
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
        A_eq = [np.ones(m_outcomes), v - w]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m_outcomes
        res = linprog(np.zeros_like(w), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    accepted_contracts = []
    accepted_utilities = []
    for log in content:
        if log['Agent Action'] == 1:
            accepted_contracts.append(log['Contract'])
            accepted_utilities.append(log['Principal Utility'])

    if not accepted_contracts:
        return np.array([[1/m_outcomes] * m_outcomes + [0]])

    candidate_ps = []
    for i in range(len(accepted_contracts)):
        w_i = np.array(accepted_contracts[i])
        u_i = accepted_utilities[i]
        p_i = mini_lp_p(w_i, u_i)
        if p_i is not None:
            candidate_ps.append(p_i)

    if not candidate_ps:
         return np.array([[1/m_outcomes] * m_outcomes + [0]])

    all_p = np.array(candidate_ps)
    gmm = GaussianMixture(n_components=min(n_candidates, len(all_p)), random_state=0, n_init=5).fit(all_p)
    p0 = gmm.means_

    c_init = np.zeros(p0.shape[0])
    for i in range(p0.shape[0]):
        c_init[i] = 0

    for log in content:
        w = np.array(log['Contract'])
        expected_utility = 0
        for i in range(p0.shape[0]):
            expected_utility = p0[i] @ w
        log['expected_utility'] = expected_utility

    for i in range(p0.shape[0]):
        min_c_list = []
        for log in content:
            if log['Agent Action'] == 1:
                w = np.array(log['Contract'])
                c_temp = p0[i] @ w
                min_c_list.append(c_temp)
        if min_c_list:
            c_init[i] = min(min_c_list)
        else:
            c_init[i] = 0

    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    return agent_setting
```
