```python
import numpy as np
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans
from sklearn.preprocessing import normalize

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:

    n_candidates = 10
    m_outcomes = v.shape[0]
    L = len(content)

    def expected_utility(p, w):
        return np.dot(p, w)

    def solve_lp_accept(contract, principal_utility):
        c = -contract
        A_eq = np.array([[1] * m_outcomes])
        b_eq = np.array([1])
        A_ub = np.array([v - contract])
        b_ub = np.array([principal_utility])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')
        if res.success:
            return res.x
        else:
            return None

    def solve_lp_reject(contract):
        p_init = np.array([1/m_outcomes] * m_outcomes)
        def objective(p):
            return expected_utility(p, contract)
        constraints = ({'type': 'eq', 'fun': lambda p: np.sum(p) - 1})
        bounds = [(0, 1)] * m_outcomes
        res = minimize(objective, p_init, method='SLSQP', bounds=bounds, constraints=constraints)
        if res.success:
            return res.x
        else:
            return None

    candidate_ps = []
    for log in content:
        if log['Agent Action'] == 1:
            p = solve_lp_accept(np.array(log['Contract']), log['Principal Utility'])
            if p is not None:
                candidate_ps.append(p)
        else:
            p = solve_lp_reject(np.array(log['Contract']))
            if p is not None:
                candidate_ps.append(p)

    if not candidate_ps:
        return np.array([[1/m_outcomes] * m_outcomes + [0]])

    all_p = np.array(candidate_ps)
    kmeans = KMeans(n_clusters=min(n_candidates, len(all_p)), random_state=0, n_init=10, init='k-means++').fit(all_p)
    p0 = kmeans.cluster_centers_

    costs = np.zeros(p0.shape[0])
    for i in range(p0.shape[0]):
        min_rej_util = float('inf')
        for log in content:
            if log['Agent Action'] == -1:
                contract = np.array(log['Contract'])
                util = p0[i] @ contract
                min_rej_util = min(min_rej_util, util)
        costs[i] = max(0, -min_rej_util)

    agent_setting = np.hstack([p0, costs[:, np.newaxis]])
    return agent_setting
```
