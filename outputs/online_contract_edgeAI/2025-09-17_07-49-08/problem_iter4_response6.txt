```python
import numpy as np
from scipy.optimize import linprog
from sklearn.mixture import GaussianMixture

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 5
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray) -> np.ndarray | None:
        """Solve for agent outcome distribution p given wage vector w."""
        m = len(w)
        A_eq = [np.ones(m)]
        b_eq = [1.0]
        bounds = [(0, 1)] * m
        res = linprog(-w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    candidate_ps = []
    for log in content:
        w_i = np.array(log['Contract'])
        p_i = mini_lp_p(w_i)
        if p_i is not None:
            candidate_ps.append(p_i)

    if not candidate_ps:
        return np.array([[1/m_outcomes] * m_outcomes + [0.0]])

    all_p = np.array(candidate_ps)

    gmm = GaussianMixture(n_components=min(n_candidates, len(candidate_ps)), random_state=0, covariance_type='full', max_iter=500, n_init=5)
    gmm.fit(all_p)
    p0 = gmm.means_

    n_actions = p0.shape[0]
    c_init = np.zeros(n_actions)
    for k in range(n_actions):
        expected_wages = []
        for log in content:
            if log['Agent Action'] == 1:
                w = np.array(log['Contract'])
                expected_wages.append(p0[k] @ w)

        if expected_wages:
            c_init[k] = min(expected_wages)
        else:
            c_init[k] = 0.0

    for i, log in enumerate(content):
        if log['Agent Action'] == -1:
            w = np.array(log['Contract'])
            expected_utilities = [p0[k] @ w - c_init[k] for k in range(n_actions)]
            best_action = np.argmax(expected_utilities)
            c_init[best_action] = max(c_init[best_action], p0[best_action] @ w)

    c_init = np.maximum(c_init, 0)

    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    return agent_setting
```
