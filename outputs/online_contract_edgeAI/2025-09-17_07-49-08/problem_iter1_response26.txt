```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans


def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 5
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
        A_eq = [np.ones(m_outcomes), v - w]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m_outcomes
        res = linprog(np.zeros_like(w), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    candidate_ps = []
    candidate_us = []
    for log in content:
        if log['Agent Action'] == 1:
            w_i = log['Contract']
            u_i = log['Principal Utility']
            p_i = mini_lp_p(w_i, u_i)
            if p_i is not None:
                candidate_ps.append(p_i)
                candidate_us.append(u_i)

    if not candidate_ps:
        return np.array([])

    all_p = np.array(candidate_ps)

    kmeans = KMeans(n_clusters=n_candidates, random_state=0, n_init=10).fit(all_p)
    p0 = kmeans.cluster_centers_

    c_init = np.zeros(n_candidates)
    for i in range(n_candidates):
        cluster_points = all_p[kmeans.labels_ == i]
        if cluster_points.size > 0:
            c_init[i] = 0

            for log in content:
                if log['Agent Action'] == 1:
                    w = log['Contract']
                    u = log['Principal Utility']

                    dist = np.linalg.norm(cluster_points - mini_lp_p(w, u))
                    if np.min(dist) < 0.01:
                        c_init[i] = max(c_init[i], np.dot(p0[i], log['Contract']))
        else:
            c_init[i] = 0

    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    return agent_setting
```
