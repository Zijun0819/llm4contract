```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 3
    m_outcomes = v.shape[0]
    
    accepted_contracts = []
    accepted_utilities = []
    for log in content:
        if log['Agent Action'] == 1:
            accepted_contracts.append(np.array(log['Contract']))
            accepted_utilities.append(log['Principal Utility'])

    if not accepted_contracts:
        return np.array([[1/m_outcomes] * m_outcomes + [0]])

    def calculate_expected_utility(p, contract):
        return np.dot(p, contract)

    def is_consistent(p, c, logs):
        for log in logs:
            contract = np.array(log['Contract'])
            expected_utility = calculate_expected_utility(p, contract)
            if log['Agent Action'] == 1 and expected_utility < c - 1e-6:
                return False
            if log['Agent Action'] == -1 and expected_utility >= c + 1e-6:
                return False
        return True

    all_contracts = np.array(accepted_contracts)
    kmeans = KMeans(n_clusters=min(n_candidates, len(all_contracts)), random_state=0, n_init=10, init='k-means++').fit(all_contracts)
    representative_contracts = kmeans.cluster_centers_

    agent_settings = []
    for contract in representative_contracts:
        p = contract / np.sum(contract)
        c = 0.0
        
        consistent = False
        for log in content:
            if log['Agent Action'] == 1:
                c = calculate_expected_utility(p, np.array(log['Contract']))
                break

        if not consistent:
            c = 0.0

        if is_consistent(p, c, content):
            agent_settings.append(np.concatenate([p, [c]]))

    if not agent_settings:
        return np.array([[1/m_outcomes] * m_outcomes + [0]])

    return np.array(agent_settings)
```
