```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_actions = 5
    m_outcomes = len(v)
    n_logs = len(content)

    def solve_lp(w: np.ndarray, u: float) -> np.ndarray | None:
        A_eq = [np.ones(m_outcomes), v - w]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m_outcomes
        result = linprog(np.zeros(m_outcomes), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        if result.success:
            return result.x
        return None

    candidate_ps = []
    candidate_logs = []
    for log in content:
        if log['Agent Action'] == 1:
            w = log['Contract']
            u = log['Principal Utility']
            p = solve_lp(w, u)
            if p is not None:
                candidate_ps.append(p)
                candidate_logs.append(log)

    if not candidate_ps:
        return np.zeros((0, m_outcomes + 1))

    all_ps = np.array(candidate_ps)

    kmeans = KMeans(n_clusters=n_actions, random_state=0, n_init=10)
    kmeans.fit(all_ps)
    p0 = kmeans.cluster_centers_

    costs = np.zeros(n_actions)
    for i in range(n_actions):
        costs[i] = 0
        utilities = []
        for j, log in enumerate(candidate_logs):
            w = log['Contract']
            utilities.append(p0[i] @ w)
        if utilities:
            costs[i] = min(utilities)
        else:
            costs[i] = 0

    for log in content:
        if log['Agent Action'] == -1:
            w = log['Contract']
            utilities = p0 @ w
            costs = np.maximum(costs, utilities)

    agent_setting = np.concatenate([p0, costs[:, np.newaxis]], axis=1)

    return agent_setting
```
