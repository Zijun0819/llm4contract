```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_actions = 5
    m_outcomes = len(v)
    accepted_contracts = [log['Contract'] for log in content if log['Agent Action'] == 1]
    accepted_utilities = [log['Principal Utility'] for log in content if log['Agent Action'] == 1]

    if not accepted_contracts:
        return np.zeros((0, m_outcomes + 1))

    def solve_lp(w, u):
        c = np.zeros(m_outcomes)
        A_eq = np.vstack([np.ones(m_outcomes), v - w])
        b_eq = np.array([1, u])
        bounds = [(0, 1)] * m_outcomes
        result = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return result.x if result.success else None

    possible_distributions = []
    for w, u in zip(accepted_contracts, accepted_utilities):
        p = solve_lp(w, u)
        if p is not None:
            possible_distributions.append(p)

    if not possible_distributions:
        return np.zeros((0, m_outcomes + 1))

    possible_distributions = np.array(possible_distributions)

    kmeans = KMeans(n_clusters=n_actions, random_state=0, n_init=10).fit(possible_distributions)
    action_distributions = kmeans.cluster_centers_

    costs = np.zeros(n_actions)
    for i in range(n_actions):
        utilities = []
        for log in content:
            if log['Agent Action'] == 1:
                utilities.append(action_distributions[i] @ np.array(log['Contract']))
        if utilities:
            costs[i] = min(utilities)
        else:
            costs[i] = 0

    rejection_thresholds = np.zeros(n_actions)
    for i in range(n_actions):
        rejection_utilities = []
        for log in content:
            if log['Agent Action'] == -1:
                rejection_utilities.append(action_distributions[i] @ np.array(log['Contract']))
        if rejection_utilities:
            rejection_thresholds[i] = max(rejection_utilities)
        else:
            rejection_thresholds[i] = 0

    final_costs = np.maximum(costs, rejection_thresholds)
    agent_settings = np.hstack([action_distributions, final_costs[:, np.newaxis]])
    return agent_settings
```
