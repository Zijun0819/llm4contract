```python
import numpy as np
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans
from sklearn.preprocessing import normalize

def agent_solver(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 10
    m_outcomes = v.shape[0]
    L = len(content)

    def expected_utility(p, contract):
        return np.dot(p, contract)

    def mini_lp_p(contract, utility) -> np.ndarray | None:
        A_eq = [np.ones(m_outcomes)]
        b_eq = [1.0]
        A_ub = [-contract]
        b_ub = [-utility]
        bounds = [(0, 1)] * m_outcomes
        res = linprog(np.zeros_like(contract), A_eq=A_eq, b_eq=b_eq, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')
        return res.x if res.success else None

    accepted_contracts = []
    accepted_utilities = []
    rejected_contracts = []
    for log in content:
        if log['Agent Action'] == 1:
            accepted_contracts.append(np.array(log['Contract']))
            accepted_utilities.append(log['Principal Utility'])
        else:
            rejected_contracts.append(np.array(log['Contract']))

    candidate_ps = []
    for i in range(len(content)):
        contract = np.array(content[i]['Contract'])
        if content[i]['Agent Action'] == 1:
            utility = 0
            p_i = mini_lp_p(contract, utility)
            if p_i is not None:
                candidate_ps.append(p_i)

    if not candidate_ps:
        return np.array([[1/m_outcomes] * m_outcomes + [0]])

    all_p = np.array(candidate_ps)
    kmeans = KMeans(n_clusters=min(n_candidates, len(all_p)), random_state=0, n_init=10, init='k-means++').fit(all_p)
    p0 = kmeans.cluster_centers_

    c_init = np.zeros(p0.shape[0])

    for i in range(p0.shape[0]):
        def objective(c):
            loss = 0
            for j in range(len(accepted_contracts)):
                contract = accepted_contracts[j]
                expected_util = expected_utility(p0[i], contract)
                loss += (expected_util - c)**2
            return loss

        cons = ({'type': 'ineq', 'fun': lambda x: x[0]})

        res = minimize(objective, 0, method='SLSQP', bounds=[(0, None)], constraints=cons)
        c_init[i] = res.x[0] if res.success else 0

    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    return agent_setting
```
