```python
import numpy as np
from scipy.optimize import linprog, minimize
from sklearn.cluster import KMeans

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:

    n_candidates = 5
    m_outcomes = v.shape[0]
    L = len(content)

    def expected_utility(p, w):
        return np.dot(p, w)

    def mini_lp_p(w: np.ndarray) -> np.ndarray | None:
        c = np.zeros(m_outcomes)
        A_eq = np.array([np.ones(m_outcomes)])
        b_eq = np.array([1.0])
        A_ub = np.array([v - w])
        b_ub = np.array([0])
        bounds = [(0, 1)] * m_outcomes
        res = linprog(c, A_eq=A_eq, b_eq=b_eq, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs')
        return res.x if res.success else None

    accepted_contracts = []
    rejected_contracts = []

    for log in content:
        if log['Agent Action'] == 1:
            accepted_contracts.append(np.array(log['Contract']))
        else:
            rejected_contracts.append(np.array(log['Contract']))

    if not accepted_contracts and not rejected_contracts:
        return np.array([[1/m_outcomes] * m_outcomes + [0]])

    candidate_ps = []
    for w_i in accepted_contracts:
        p_i = mini_lp_p(w_i)
        if p_i is not None:
            candidate_ps.append(p_i)

    for w in rejected_contracts:
        p_init = np.array([1/m_outcomes] * m_outcomes)
        def objective(p):
            return -expected_utility(p, w)
        constraints = ({'type': 'eq', 'fun': lambda p: np.sum(p) - 1})
        bounds = [(0, 1)] * m_outcomes
        res = minimize(objective, p_init, method='SLSQP', bounds=bounds, constraints=constraints)
        if res.success:
            candidate_ps.append(res.x)

    if not candidate_ps:
         return np.array([[1/m_outcomes] * m_outcomes + [0]])

    all_p = np.array(candidate_ps)
    kmeans = KMeans(n_clusters=min(n_candidates, len(all_p)), random_state=0, n_init=5, algorithm='elkan').fit(all_p)
    p0 = kmeans.cluster_centers_

    c_init = np.zeros(p0.shape[0])

    for i in range(p0.shape[0]):
        c_init[i] = 0
        for w in accepted_contracts:
             c_init[i] = max(c_init[i], expected_utility(p0[i], v-w))
        for w in rejected_contracts:
            c_init[i] = max(c_init[i], expected_utility(p0[i], w-v))


    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    return agent_setting
```
