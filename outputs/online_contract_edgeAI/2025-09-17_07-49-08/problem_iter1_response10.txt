```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans


def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 5
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray, u: float, v: np.ndarray) -> np.ndarray | None:
        """Solve for agent outcome distribution p given wage vector w and utility u."""
        m = len(w)
        A_eq = [np.ones(m), v - w]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m
        res = linprog(w, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    accepted_contracts = [log for log in content if log['Agent Action'] == 1]
    if not accepted_contracts:
        p0 = np.random.rand(n_candidates, m_outcomes)
        p0 = p0 / p0.sum(axis=1, keepdims=True)
        c_init = np.zeros(n_candidates)
        agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
        return agent_setting

    candidate_ps = []
    for log in accepted_contracts:
        w_i = log['Contract']
        u_i = log['Principal Utility']
        p_i = mini_lp_p(w_i, u_i, v)
        if p_i is not None:
            candidate_ps.append(p_i)

    if not candidate_ps:
        p0 = np.random.rand(n_candidates, m_outcomes)
        p0 = p0 / p0.sum(axis=1, keepdims=True)
        c_init = np.zeros(n_candidates)
        agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
        return agent_setting

    all_p = np.array(candidate_ps)

    kmeans = KMeans(n_clusters=n_candidates, random_state=0, n_init=10).fit(all_p)
    p0 = kmeans.cluster_centers_

    assigns = np.full(len(accepted_contracts), -1, dtype=int)
    for i, log in enumerate(accepted_contracts):
        w = log['Contract']
        assigns[i] = int(np.argmax(p0 @ w))

    c_ir = np.zeros(n_candidates)
    for a in range(n_candidates):
        idx = np.where(assigns == a)[0]
        if idx.size > 0:
            wages = np.array([accepted_contracts[i]['Contract'] for i in idx]).T
            c_ir[a] = p0[a] @ wages.min(axis=1)
        else:
            c_ir[a] = 0.0

    rej_contracts = [log for log in content if log['Agent Action'] == -1]
    if rej_contracts:
        wages_rej = np.array([log['Contract'] for log in rej_contracts]).T
        rej_utils = p0 @ wages_rej
        c_rej = rej_utils.max(axis=1)
    else:
        c_rej = np.zeros(n_candidates)

    c_init = np.maximum(c_ir, c_rej)

    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    return agent_setting
```
