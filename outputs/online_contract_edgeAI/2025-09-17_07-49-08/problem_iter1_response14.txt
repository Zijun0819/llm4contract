```python
import numpy as np
import pandas as pd
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import normalize


def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 5
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
        A_eq = [np.ones(m_outcomes), v - w]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m_outcomes
        res = linprog(np.zeros(m_outcomes), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    candidate_ps = []
    candidate_utils = []
    for log in content:
        if log['Agent Action'] == 1:
            w_i = np.array(log['Contract'])
            u_i = log['Principal Utility']
            p_i = mini_lp_p(w_i, u_i)
            if p_i is not None:
                candidate_ps.append(p_i)
                candidate_utils.append(u_i)

    if not candidate_ps:
        raise ValueError("No valid accepted logs to infer agent strategies.")

    all_p = np.array(candidate_ps)
    gmm = GaussianMixture(n_components=n_candidates, random_state=0, covariance_type='full', n_init=5)
    gmm.fit(all_p)
    p0 = gmm.means_
    assigns = gmm.predict(all_p)

    costs = np.zeros(n_candidates)
    for i in range(n_candidates):
        indices = np.where(assigns == i)[0]
        if len(indices) > 0:
            costs[i] = np.mean([candidate_utils[j] for j in indices])
        else:
            costs[i] = 0.0

    agent_setting = np.hstack([p0, costs[:, np.newaxis]])
    agent_setting = agent_setting[np.argsort(costs)]

    return agent_setting
```
