```python
import numpy as np
from sklearn.mixture import GaussianMixture
from scipy.optimize import linprog

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 5
    m_outcomes = v.shape[0]
    L = len(content)

    def mini_lp_p(w: np.ndarray, u: float) -> np.ndarray | None:
        m = len(w)
        A_eq = [np.ones(m), w - v]
        b_eq = [1.0, u]
        bounds = [(0, 1)] * m
        res = linprog(np.zeros(m), A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
        return res.x if res.success else None

    candidate_ps = []
    candidate_utils = []
    for log in content:
        if log['Agent Action'] == 1:
            w_i = log['Contract']
            u_i = log['Principal Utility']
            p_i = mini_lp_p(w_i, 0)
            if p_i is not None:
                candidate_ps.append(p_i)
                candidate_utils.append(np.dot(w_i, p_i))

    if not candidate_ps:
        return np.zeros((0, m_outcomes + 1))

    all_p = np.array(candidate_ps)

    gmm = GaussianMixture(n_components=n_candidates, random_state=0, covariance_type='full', max_iter=500)
    gmm.fit(all_p)
    p0 = gmm.means_

    p0 = np.array([p / p.sum() for p in p0])

    assigns = np.full(L, -1, dtype=int)
    for i, log in enumerate(content):
        if log['Agent Action'] == 1:
            w = log['Contract']
            assigns[i] = int(np.argmax(p0 @ w))

    c_ir = np.zeros(n_candidates)
    for a in range(n_candidates):
        idx = np.where(assigns == a)[0]
        if idx.size > 0:
            wages = np.array([content[i]['Contract'] for i in idx]).T
            c_ir[a] = (p0[a] @ wages).min()
        else:
            c_ir[a] = 0.0

    rej_idx = [i for i, log in enumerate(content) if log['Agent Action'] == -1]
    if rej_idx:
        wages_rej = np.array([content[i]['Contract'] for i in rej_idx]).T
        rej_utils = p0 @ wages_rej
        c_rej = rej_utils.max(axis=1)
    else:
        c_rej = np.zeros(n_candidates)

    c_init = np.maximum(c_ir, c_rej)

    for a in range(n_candidates):
        w_accept = []
        for i, log in enumerate(content):
            if log['Agent Action'] == 1 and assigns[i] == a:
                w_accept.append(log['Contract'])

        if w_accept:
            w_accept = np.array(w_accept)
            c_bounds = (0, None)
            c_obj = [1]
            c_A = [p0[a] @ w for w in w_accept]
            c_b = [1] * len(w_accept)
            try:
                res = linprog(c_obj, A_ub=[-np.array(c_A)], b_ub=[-np.array(c_b)], bounds=[c_bounds], method='highs')
                if res.success:
                    c_init[a] = res.x[0]
            except:
                pass

    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    return agent_setting
```
