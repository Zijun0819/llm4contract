```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_candidates = 3
    m_outcomes = v.shape[0]
    
    accepted_contracts = []
    for log in content:
        if log['Agent Action'] == 1:
            accepted_contracts.append(log['Contract'])

    if not accepted_contracts:
        return np.array([[1/m_outcomes] * m_outcomes + [0]])

    all_contracts = np.array(accepted_contracts)
    kmeans = KMeans(n_clusters=min(n_candidates, len(all_contracts)), random_state=0, n_init=10, init='k-means++').fit(all_contracts)
    p0 = kmeans.cluster_centers_

    c_init = np.zeros(p0.shape[0])
    
    for i in range(p0.shape[0]):
        costs = []
        for log in content:
            if log['Agent Action'] == 1:
                w = np.array(log['Contract'])
                expected_utility = p0[i] @ w
                costs.append(expected_utility)
        if costs:
            c_init[i] = min(costs)
        else:
            c_init[i] = 0

    agent_setting = np.hstack([p0, c_init[:, np.newaxis]])
    
    # Enforce IR constraint (cost >= 0)
    agent_setting[:, -1] = np.maximum(0, agent_setting[:, -1])
    
    # Normalize outcome probabilities
    for i in range(agent_setting.shape[0]):
        agent_setting[i, :-1] = agent_setting[i, :-1] / np.sum(agent_setting[i, :-1])

    return agent_setting
```
