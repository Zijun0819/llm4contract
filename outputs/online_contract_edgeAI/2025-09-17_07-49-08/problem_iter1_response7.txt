```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans


def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_actions = 5
    m_outcomes = len(v)
    accepted_contracts = []
    rejected_contracts = []

    for log in content:
        contract = log['Contract']
        action = log['Agent Action']
        if action == 1:
            accepted_contracts.append(contract)
        else:
            rejected_contracts.append(contract)

    if not accepted_contracts:
        return np.zeros((n_actions, m_outcomes + 1))

    accepted_contracts = np.array(accepted_contracts)
    if rejected_contracts:
        rejected_contracts = np.array(rejected_contracts)

    kmeans = KMeans(n_clusters=n_actions, random_state=0, n_init=10)
    kmeans.fit(accepted_contracts)
    action_centers = kmeans.cluster_centers_

    action_probs = np.zeros((n_actions, m_outcomes))
    for i in range(n_actions):
        c = action_centers[i]
        res = linprog(v - c, A_eq=[np.ones(m_outcomes)], b_eq=[1], bounds=[(0, 1)] * m_outcomes, method='highs')
        if res.success:
            action_probs[i] = res.x
        else:
            action_probs[i] = np.ones(m_outcomes) / m_outcomes

    costs = np.zeros(n_actions)
    for i in range(n_actions):
        costs[i] = np.mean(accepted_contracts[kmeans.labels_ == i] @ action_probs[i]) if np.any(kmeans.labels_ == i) else 0

    if rejected_contracts.size > 0:
        rejection_utilities = rejected_contracts @ action_probs.T
        rejection_thresholds = np.max(rejection_utilities, axis=0)
        costs = np.maximum(costs, rejection_thresholds)

    agent_setting = np.hstack((action_probs, costs[:, np.newaxis]))

    return agent_setting
```
