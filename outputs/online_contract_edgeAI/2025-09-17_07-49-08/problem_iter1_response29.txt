```python
import numpy as np
from scipy.optimize import linprog
from sklearn.cluster import KMeans
from sklearn.preprocessing import normalize

def agent_solver_v2(v: np.ndarray, content: list[dict]) -> np.ndarray:
    n_actions = 5
    n_outcomes = v.shape[0]
    n_logs = len(content)

    accepted_contracts = [log['Contract'] for log in content if log['Agent Action'] == 1]
    accepted_utilities = [log['Principal Utility'] for log in content if log['Agent Action'] == 1]

    if not accepted_contracts:
        return np.zeros((0, n_outcomes + 1))

    def solve_lp(contract, utility):
        A = np.vstack((np.ones(n_outcomes), v - contract))
        b = np.array([1, utility])
        bounds = [(0, 1) for _ in range(n_outcomes)]
        result = linprog(v, A_eq=A, b_eq=b, bounds=bounds, method='highs')
        if result.success:
            return result.x
        else:
            return None

    possible_distributions = []
    for contract, utility in zip(accepted_contracts, accepted_utilities):
        distribution = solve_lp(contract, utility)
        if distribution is not None:
            possible_distributions.append(distribution)

    if not possible_distributions:
        return np.zeros((0, n_outcomes + 1))

    possible_distributions = np.array(possible_distributions)
    kmeans = KMeans(n_clusters=n_actions, random_state=0, n_init=10)
    kmeans.fit(possible_distributions)
    action_distributions = kmeans.cluster_centers_

    costs = np.zeros(n_actions)
    for i in range(n_actions):
        contracts_for_action = []
        for j, log in enumerate(content):
            if log['Agent Action'] == 1 and kmeans.labels_[accepted_contracts.index(log['Contract'])] == i:
                contracts_for_action.append(log['Contract'])

        if contracts_for_action:
            costs[i] = np.min([action_distributions[i] @ np.array(c) for c in contracts_for_action])
        else:
            costs[i] = 0

    for i, log in enumerate(content):
        if log['Agent Action'] == -1:
            rejection_utilities = action_distributions @ np.array(log['Contract'])
            costs = np.maximum(costs, rejection_utilities)

    agent_setting = np.hstack([action_distributions, costs[:, np.newaxis]])
    return agent_setting
```
